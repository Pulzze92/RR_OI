import {
  RestClientV5,
  OrderSideV5,
  LinearInverseInstrumentInfoV5
} from "bybit-api";
import { Candle, VolumeSignal, ActivePosition } from "./bybit.types";
import { NotificationService } from "./notificationService";
import { logger } from "../utils/logger";

export interface TradingLogicCallbacks {
  onTradeOperation: (message: string) => void;
  onSignalDetected: (message: string) => void;
}

export class TradingLogicService {
  private currentSignal: VolumeSignal | null = null;
  private activePosition: ActivePosition | null = null;
  private trailingStopInterval: NodeJS.Timeout | null = null;
  private isOpeningPosition: boolean = false;
  private lastSignalNotificationTime: number = 0;
  private usedSignalTimestamps: Set<number> = new Set(); // –•—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
  private lastRestCheckTime: number = 0;
  private readonly REST_CHECK_INTERVAL = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

  private readonly TAKE_PROFIT_POINTS: number;
  private readonly STOP_LOSS_POINTS: number;
  private readonly TRAILING_ACTIVATION_POINTS: number;
  private readonly TRAILING_DISTANCE: number;
  private readonly VOLUME_THRESHOLD: number;
  private readonly TRADE_SIZE_USD: number;
  private readonly SYMBOL: string;
  private readonly LEVERAGE: number = 25;
  private readonly TRAILING_STOP_INTERVAL_MS = 60000;

  constructor(
    private client: RestClientV5,
    private notificationService: NotificationService,
    private callbacks: TradingLogicCallbacks,
    options: {
      symbol: string;
      tradeSizeUsd: number;
      takeProfitPoints: number;
      stopLossPoints: number;
      trailingActivationPoints: number;
      trailingDistance: number;
      volumeThreshold: number;
    }
  ) {
    this.SYMBOL = options.symbol;
    this.TRADE_SIZE_USD = options.tradeSizeUsd;
    this.TAKE_PROFIT_POINTS = options.takeProfitPoints;
    this.STOP_LOSS_POINTS = options.stopLossPoints;
    this.TRAILING_ACTIVATION_POINTS = options.trailingActivationPoints;
    this.TRAILING_DISTANCE = options.trailingDistance;
    this.VOLUME_THRESHOLD = options.volumeThreshold;
  }

  public getActivePosition(): ActivePosition | null {
    return this.activePosition;
  }

  public getCurrentSignal(): VolumeSignal | null {
    return this.currentSignal;
  }

  public resetSignal(): void {
    if (this.currentSignal) {
      // –ù–∞ —á–∞—Å–æ–≤–æ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
      // this.lastSignalCandleTimestamp = this.currentSignal.candle.timestamp;
      logger.info("üîÑ –°–∏–≥–Ω–∞–ª –æ—Ç–º–µ–Ω–µ–Ω –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —É—Å–ª–æ–≤–∏–π –¥–ª—è –≤—Ö–æ–¥–∞.");
      this.currentSignal = null;
    }
  }

  public setSignal(signal: VolumeSignal | null): void {
    this.currentSignal = signal;
    if (signal) {
      logger.info(
        `üîÑ –°–∏–≥–Ω–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${new Date(
          signal.candle.timestamp
        ).toLocaleTimeString()}, V=${signal.candle.volume.toFixed(2)}`
      );
    } else {
      logger.info("üîÑ –°–∏–≥–Ω–∞–ª —Å–±—Ä–æ—à–µ–Ω");
    }
  }

  public async syncPositionState(candleHistory: Candle[] = []): Promise<void> {
    try {
      const positionsResponse = await this.client.getPositionInfo({
        category: "linear",
        symbol: this.SYMBOL
      });

      if (positionsResponse.retCode === 0 && positionsResponse.result?.list) {
        const openPositions = positionsResponse.result.list.filter(
          pos => Number(pos.size) > 0
        );

        if (openPositions.length > 0) {
          const position = openPositions[0];
          const positionSize = position.size;

          logger.info(`üîÑ –£–°–´–ù–û–í–õ–ï–ù–ò–ï –°–£–©–ï–°–¢–í–£–Æ–©–ï–ô –ü–û–ó–ò–¶–ò–ò:`);
          logger.info(`   üìä –†–∞–∑–º–µ—Ä: ${positionSize} ${position.symbol}`);
          logger.info(`   üìà –°—Ç–æ—Ä–æ–Ω–∞: ${position.side}`);
          logger.info(`   üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${position.avgPrice}`);
          logger.info(`   üíπ –¢–µ–∫—É—â–∞—è P&L: ${position.unrealisedPnl} USDT`);

          // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ TP/SL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏
          let currentTakeProfit: number | undefined;
          let currentStopLoss: number | undefined;
          let isTrailingActive = false;

          if (position.takeProfit && Number(position.takeProfit) > 0) {
            currentTakeProfit = Number(position.takeProfit);
            logger.info(`   üéØ –¢–µ–∫—É—â–∏–π Take Profit: ${currentTakeProfit}`);
          }

          if (position.stopLoss && Number(position.stopLoss) > 0) {
            currentStopLoss = Number(position.stopLoss);
            logger.info(`   üõ°Ô∏è –¢–µ–∫—É—â–∏–π Stop Loss: ${currentStopLoss}`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–µ—Ç –ª–∏ —ç—Ç–æ –±—ã—Ç—å —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø
            const currentPrice = Number(position.markPrice);
            const stopDistance =
              position.side === "Buy"
                ? currentPrice - currentStopLoss
                : currentStopLoss - currentPrice;

            if (Math.abs(stopDistance - this.TRAILING_DISTANCE) < 50) {
              isTrailingActive = true;
              logger.info(
                `   üöÄ –í–û–ó–ú–û–ñ–ù–û –ê–ö–¢–ò–í–ï–ù –¢–†–ï–ô–õ–ò–ù–ì: —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Å—Ç–æ–ø–∞ ${stopDistance.toFixed(
                  1
                )} ‚âà ${this.TRAILING_DISTANCE}`
              );
            }
          }

          this.activePosition = {
            side: position.side as any,
            entryPrice: Number(position.avgPrice),
            entryTime: Date.now(), // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è - –ø—Ä–∏ —É—Å—ã–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ
            isTrailingActive: isTrailingActive,
            lastTrailingStopPrice: isTrailingActive
              ? currentStopLoss || null
              : null,
            orderId: "", // –£ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç orderId
            plannedTakeProfit: currentTakeProfit,
            plannedStopLoss: currentStopLoss,
            executionNotificationSent: true // –°—á–∏—Ç–∞–µ–º —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
          };

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å—ã–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏
          const adoptMessage = this.formatPositionAdoptedAlert(position);
          try {
            await this.callbacks.onTradeOperation(adoptMessage);
            logger.info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å—ã–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
          } catch (notifyError) {
            logger.error(
              "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å—ã–Ω–æ–≤–ª–µ–Ω–∏–∏:",
              notifyError
            );
            // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
            setTimeout(async () => {
              try {
                await this.callbacks.onTradeOperation(adoptMessage);
                logger.info(
                  "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å—ã–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ –≤—Ç–æ—Ä–æ–π –ø–æ–ø—ã—Ç–∫–∏"
                );
              } catch (retryError) {
                logger.error(
                  "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–∞–∂–µ —Å–æ –≤—Ç–æ—Ä–æ–π –ø–æ–ø—ã—Ç–∫–∏:",
                  retryError
                );
              }
            }, 1000);
          }

          // –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–∏–º–∏—Ç–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –Ω–æ–≤—ã—Ö
          try {
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
            const activeOrders = await this.client.getActiveOrders({
              category: "linear",
              symbol: this.SYMBOL
            });

            let hasLimitTp = false;
            let hasLimitSl = false;
            let needUpdateSize = false;

            // –í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–≤–Ω–∏ –ø—Ä–∏ —É—Å—ã–Ω–æ–≤–ª–µ–Ω–∏–∏
            logger.info(
              "üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–≤–Ω–∏ TP/SL –¥–ª—è —É—Å—ã–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"
            );
            hasLimitTp = false;
            hasLimitSl = false;
            needUpdateSize = true;

            if (activeOrders.retCode === 0 && activeOrders.result?.list) {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –æ—Ä–¥–µ—Ä
              for (const order of activeOrders.result.list) {
                const isCloseOrder = order.reduceOnly;
                const price = Number(order.price);
                const side = order.side;
                const orderSize = order.qty;

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ª–∏–º–∏—Ç–Ω—ã–º TP –∏–ª–∏ SL
                if (isCloseOrder) {
                  if (position.side === "Buy" && side === "Sell") {
                    if (price > Number(position.avgPrice)) {
                      hasLimitTp = true;
                      if (orderSize !== positionSize) {
                        needUpdateSize = true;
                        logger.info(
                          `üîÑ –ù–∞–π–¥–µ–Ω TP —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º: ${orderSize} != ${positionSize}`
                        );
                      }
                    } else {
                      hasLimitSl = true;
                      if (orderSize !== positionSize) {
                        needUpdateSize = true;
                        logger.info(
                          `üîÑ –ù–∞–π–¥–µ–Ω SL —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º: ${orderSize} != ${positionSize}`
                        );
                      }
                    }
                  } else if (position.side === "Sell" && side === "Buy") {
                    if (price < Number(position.avgPrice)) {
                      hasLimitTp = true;
                      if (orderSize !== positionSize) {
                        needUpdateSize = true;
                        logger.info(
                          `üîÑ –ù–∞–π–¥–µ–Ω TP —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º: ${orderSize} != ${positionSize}`
                        );
                      }
                    } else {
                      hasLimitSl = true;
                      if (orderSize !== positionSize) {
                        needUpdateSize = true;
                        logger.info(
                          `üîÑ –ù–∞–π–¥–µ–Ω SL —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º: ${orderSize} != ${positionSize}`
                        );
                      }
                    }
                  }
                }
              }
            }

            // –ï—Å–ª–∏ –Ω–µ—Ç –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –∏–ª–∏ –∏—Ö —Ä–∞–∑–º–µ—Ä –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–∑–∏—Ü–∏–∏
            if (!hasLimitTp || !hasLimitSl || needUpdateSize) {
              // –°–Ω–∞—á–∞–ª–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º TP/SL —á–µ—Ä–µ–∑ setTradingStop
              await this.client.setTradingStop({
                category: "linear",
                symbol: this.SYMBOL,
                takeProfit: "0",
                stopLoss: "0",
                tpTriggerBy: "MarkPrice",
                slTriggerBy: "MarkPrice",
                positionIdx: 0
              });

              logger.info(
                "üîÑ –°–±—Ä–æ—à–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ TP/SL —á–µ—Ä–µ–∑ setTradingStop"
              );

              // –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–æ–≤
              let retryCount = 0;
              const maxRetries = 3;
              let allOrdersCanceled = false;

              while (!allOrdersCanceled && retryCount < maxRetries) {
                try {
                  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
                  const activeOrders = await this.client.getActiveOrders({
                    category: "linear",
                    symbol: this.SYMBOL
                  });

                  if (activeOrders.retCode === 0 && activeOrders.result?.list) {
                    const closeOrders = activeOrders.result.list.filter(
                      order => order.reduceOnly && order.symbol === this.SYMBOL // –¢–æ–ª—å–∫–æ –æ—Ä–¥–µ—Ä–∞ –∑–∞–∫—Ä—ã—Ç–∏—è // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–≤–æ–ª–∞
                    );

                    if (closeOrders.length === 0) {
                      logger.info("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
                      allOrdersCanceled = true;
                      break;
                    }

                    logger.info(
                      `üîç –ù–∞–π–¥–µ–Ω–æ ${closeOrders.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –∑–∞–∫—Ä—ã—Ç–∏—è`
                    );

                    // –û—Ç–º–µ–Ω—è–µ–º –∫–∞–∂–¥—ã–π –æ—Ä–¥–µ—Ä –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ
                    for (const order of closeOrders) {
                      try {
                        const cancelResponse = await this.client.cancelOrder({
                          category: "linear",
                          symbol: this.SYMBOL,
                          orderId: order.orderId
                        });

                        if (cancelResponse.retCode === 0) {
                          logger.info(
                            `‚úÖ –û—Ç–º–µ–Ω–µ–Ω –æ—Ä–¥–µ—Ä ${order.orderId} (${order.side} @ ${order.price})`
                          );
                        } else {
                          logger.warn(
                            `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä ${order.orderId}: ${cancelResponse.retMsg}`
                          );
                        }
                      } catch (cancelError) {
                        logger.error(
                          `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ—Ä–¥–µ—Ä–∞ ${order.orderId}:`,
                          cancelError
                        );
                      }
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω—ã
                    const checkOrders = await this.client.getActiveOrders({
                      category: "linear",
                      symbol: this.SYMBOL
                    });

                    if (
                      checkOrders.retCode === 0 &&
                      (!checkOrders.result?.list ||
                        checkOrders.result.list.length === 0)
                    ) {
                      logger.info("‚úÖ –í—Å–µ –æ—Ä–¥–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω—ã");
                      allOrdersCanceled = true;
                    } else {
                      logger.warn(
                        `‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã. –ü–æ–ø—ã—Ç–∫–∞ ${retryCount +
                          1}/${maxRetries}`
                      );
                      retryCount++;
                    }
                  } else {
                    logger.error(
                      `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤: ${activeOrders.retMsg}`
                    );
                    retryCount++;
                  }
                } catch (error) {
                  logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ—Ä–¥–µ—Ä–æ–≤:", error);
                  retryCount++;
                }

                if (!allOrdersCanceled && retryCount < maxRetries) {
                  // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                  await new Promise(resolve => setTimeout(resolve, 1000));
                }
              }

              if (!allOrdersCanceled) {
                logger.error(
                  "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫"
                );
                return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –æ—Ä–¥–µ—Ä–∞
              }

              logger.info(
                "üîÑ –û—Ç–º–µ–Ω–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ—Ä–¥–µ—Ä–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–∏–º–∏—Ç–Ω—ã–µ TP/SL"
              );

              // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ TP/SL –æ—Ç —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞
              const entryPrice = Number(position.avgPrice);
              const takeProfit =
                entryPrice +
                (position.side === "Buy"
                  ? this.TAKE_PROFIT_POINTS
                  : -this.TAKE_PROFIT_POINTS);

              // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—å–Ω—ã–µ —Å–≤–µ—á–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
              let stopLoss =
                position.side === "Buy"
                  ? entryPrice - this.STOP_LOSS_POINTS
                  : entryPrice + this.STOP_LOSS_POINTS;

              // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–∞—Ä—É —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–π —Å–≤–µ—á–∏
              let signalCandle = null;
              let confirmingCandle = null;

              // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Å–∏–≥–Ω–∞–ª—å–Ω—É—é —Å–≤–µ—á—É —Å –≤—ã—Å–æ–∫–∏–º –æ–±—ä–µ–º–æ–º
              for (let i = candleHistory.length - 1; i >= 0; i--) {
                const candle = candleHistory[i];
                if (candle.volume >= this.VOLUME_THRESHOLD) {
                  // –ù–∞—à–ª–∏ —Å–∏–≥–Ω–∞–ª—å–Ω—É—é —Å–≤–µ—á—É, —Ç–µ–ø–µ—Ä—å –∏—â–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â—É—é –ø–æ—Å–ª–µ –Ω–µ—ë
                  signalCandle = candle;

                  // –ò—â–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â—É—é —Å–≤–µ—á—É –ø–æ—Å–ª–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π
                  for (let j = i + 1; j < candleHistory.length; j++) {
                    if (candleHistory[j].volume <= signalCandle.volume) {
                      confirmingCandle = candleHistory[j];
                      break;
                    }
                  }

                  if (confirmingCandle) break; // –ù–∞—à–ª–∏ –ø–∞—Ä—É —Å–≤–µ—á–µ–π
                }
              }

              if (signalCandle && confirmingCandle) {
                logger.info(`üîç –ù–∞–π–¥–µ–Ω—ã —Å–≤–µ—á–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ SL:`);
                logger.info(
                  `   üìä –°–∏–≥–Ω–∞–ª—å–Ω–∞—è (${new Date(
                    signalCandle.timestamp
                  ).toLocaleTimeString()}): High=${signalCandle.high}, Low=${
                    signalCandle.low
                  }, Volume=${signalCandle.volume}`
                );
                logger.info(
                  `   ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∞—è (${new Date(
                    confirmingCandle.timestamp
                  ).toLocaleTimeString()}): High=${
                    confirmingCandle.high
                  }, Low=${confirmingCandle.low}, Volume=${
                    confirmingCandle.volume
                  }`
                );

                const extremum =
                  position.side === "Buy"
                    ? Math.min(signalCandle.low, confirmingCandle.low)
                    : Math.max(signalCandle.high, confirmingCandle.high);

                stopLoss =
                  position.side === "Buy"
                    ? extremum - this.STOP_LOSS_POINTS
                    : extremum + this.STOP_LOSS_POINTS;

                logger.info(`   üí∞ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${entryPrice}`);
                logger.info(`   üìç –≠–∫—Å—Ç—Ä–µ–º—É–º: ${extremum}`);
                logger.info(`   üéØ Take Profit: ${takeProfit}`);
                logger.info(`   üõ°Ô∏è Stop Loss: ${stopLoss}`);
              } else {
                logger.warn(
                  "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å–∏–≥–Ω–∞–ª—å–Ω–∞—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∞—è —Å–≤–µ—á–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π SL –æ—Ç —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞"
                );
              }

              // –°–æ–∑–¥–∞–µ–º —É—Å–ª–æ–≤–Ω—ã–π –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –¥–ª—è Take Profit
              const tpResponse = await this.client.submitOrder({
                category: "linear",
                symbol: this.SYMBOL,
                side: position.side === "Buy" ? "Sell" : "Buy",
                orderType: "Limit",
                qty: positionSize.toString(), // –Ø–≤–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
                price: takeProfit.toString(),
                triggerPrice: takeProfit.toString(),
                triggerDirection: position.side === "Buy" ? 1 : 2,
                timeInForce: "GTC",
                triggerBy: "MarkPrice",
                reduceOnly: true,
                closeOnTrigger: true,
                orderLinkId: `tp_${Date.now()}`
              });

              // –°–æ–∑–¥–∞–µ–º —É—Å–ª–æ–≤–Ω—ã–π –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –¥–ª—è Stop Loss
              const slResponse = await this.client.submitOrder({
                category: "linear",
                symbol: this.SYMBOL,
                side: position.side === "Buy" ? "Sell" : "Buy",
                orderType: "Limit",
                qty: positionSize.toString(), // –Ø–≤–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
                price: stopLoss.toString(),
                triggerPrice: stopLoss.toString(),
                triggerDirection: position.side === "Buy" ? 2 : 1,
                timeInForce: "GTC",
                triggerBy: "MarkPrice",
                reduceOnly: true,
                closeOnTrigger: true,
                orderLinkId: `sl_${Date.now()}`
              });

              if (tpResponse.retCode === 0 && slResponse.retCode === 0) {
                logger.info(
                  `‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ª–∏–º–∏—Ç–Ω—ã–µ TP/SL –æ—Ä–¥–µ—Ä–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º ${positionSize}: TP=${takeProfit.toFixed(
                    1
                  )}, SL=${stopLoss.toFixed(1)}`
                );
              } else {
                logger.error(
                  `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ TP/SL: TP=${tpResponse.retMsg}, SL=${slResponse.retMsg}`
                );
              }
            } else {
              logger.info(
                "‚úÖ –õ–∏–º–∏—Ç–Ω—ã–µ TP/SL –æ—Ä–¥–µ—Ä–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º"
              );
            }
          } catch (error) {
            logger.error(
              "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ/—É—Å—Ç–∞–Ω–æ–≤–∫–µ –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤:",
              error
            );
          }

          // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
          this.startTrailingStopCheck();

          logger.info(
            "‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ø–æ–∑–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É—Å—ã–Ω–æ–≤–ª–µ–Ω–∞ –∏ —Ç—Ä–µ–π–ª–∏–Ω–≥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
          );
        } else {
          logger.info("‚úÖ –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∏—Å—Ç–æ–µ");
        }
      }
    } catch (error) {
      logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π:", error);
    }
  }

  private formatPositionAdoptedAlert(position: any): string {
    const side = position.side === "Buy" ? "–õ–û–ù–ì" : "–®–û–†–¢";
    const pnl = Number(position.unrealisedPnl);
    const pnlEmoji = pnl >= 0 ? "üìà" : "üìâ";
    const pnlText = pnl >= 0 ? `+${pnl.toFixed(2)}` : pnl.toFixed(2);

    let message = `üîÑ –ü–û–ó–ò–¶–ò–Ø –£–°–´–ù–û–í–õ–ï–ù–ê\n\n`;
    message += `üìä –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${side}\n`;
    message += `üí∞ –†–∞–∑–º–µ—Ä: ${position.size} BTC\n`;
    message += `üìà –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${position.avgPrice}\n`;
    message += `üíπ –¢–µ–∫—É—â–∞—è P&L: ${pnlEmoji} ${pnlText} USDT\n`;

    // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏–∏
    message += `\nüìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n`;
    message += `‚ö°Ô∏è –õ–∏–∫–≤–∏–¥–∞—Ü–∏–æ–Ω–Ω–∞—è —Ü–µ–Ω–∞: ${position.liqPrice || "–ù/–î"}\n`;
    message += `üíµ –ú–∞—Ä–∂–∞ –ø–æ–∑–∏—Ü–∏–∏: ${position.positionMargin || "–ù/–î"} USDT\n`;
    message += `üìÖ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: ${new Date().toLocaleString()}\n`;

    if (position.takeProfit && Number(position.takeProfit) > 0) {
      message += `üéØ Take Profit: ${position.takeProfit}\n`;
    }

    if (position.stopLoss && Number(position.stopLoss) > 0) {
      message += `üõ°Ô∏è Stop Loss: ${position.stopLoss}\n`;
    }

    message += `\n‚è±Ô∏è –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –ø—Ä–∏–±—ã–ª–∏ > 300 –ø—É–Ω–∫—Ç–æ–≤`;

    return message;
  }

  public checkVolumeSpike(
    completedCandle: Candle,
    previousCandle: Candle
  ): void {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
    if (this.activePosition) {
      logger.info(
        `üîÑ –ü–†–û–ü–£–°–ö –ü–†–û–í–ï–†–ö–ò –û–ë–™–ï–ú–ê: –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è ${this.activePosition.side} –ø–æ–∑–∏—Ü–∏—è`
      );
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–≤–µ—á–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
    if (!completedCandle.confirmed) {
      logger.info(`‚è≥ –ü–†–û–ü–£–°–ö –ü–†–û–í–ï–†–ö–ò –û–ë–™–ï–ú–ê: –¢–µ–∫—É—â–∞—è —Å–≤–µ—á–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞`);
      return;
    }

    logger.info(`üìä –ê–ù–ê–õ–ò–ó –û–ë–™–ï–ú–û–í:`);
    logger.info(
      `   üìà –û–±—ä–µ–º —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏: ${completedCandle.volume.toFixed(2)}`
    );
    logger.info(`   üéØ –ü–æ—Ä–æ–≥ –æ–±—ä–µ–º–∞: ${this.VOLUME_THRESHOLD}`);

    // –ï—Å–ª–∏ —É –Ω–∞—Å –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–∞ –∏ —Ç–µ–∫—É—â–∞—è —Å–≤–µ—á–∞ –∏–º–µ–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –æ–±—ä–µ–º - —Å–æ–∑–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª
    if (
      !this.currentSignal?.isActive &&
      completedCandle.volume >= this.VOLUME_THRESHOLD
    ) {
      logger.info(
        `üö® –û–ë–ù–ê–†–£–ñ–ï–ù –°–ò–ì–ù–ê–õ: –í–´–°–û–ö–ò–ô –û–ë–™–ï–ú (${completedCandle.volume.toFixed(
          2
        )}) –í –ó–ê–ö–†–´–¢–û–ô –°–í–ï–ß–ï!`
      );
      logger.info(`üí∞ –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: ${completedCandle.close}`);

      this.currentSignal = {
        candle: completedCandle,
        isActive: true,
        waitingForLowerVolume: true
      };
      this.usedSignalTimestamps.add(completedCandle.timestamp);
    }
  }

  public async processCompletedCandle(
    completedCandle: Candle,
    candleHistory: Candle[]
  ): Promise<void> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
    if (this.activePosition) {
      logger.info(
        `üîÑ –ü–†–û–ü–£–°–ö –û–ë–†–ê–ë–û–¢–ö–ò –°–í–ï–ß–ò: –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è ${this.activePosition.side} –ø–æ–∑–∏—Ü–∏—è`
      );
      return;
    }

    if (!this.currentSignal?.isActive) {
      logger.info(`‚è≥ –ü–†–û–ü–£–°–ö –û–ë–†–ê–ë–û–¢–ö–ò: –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞`);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∞—è —Å–≤–µ—á–∞ –Ω–æ–≤–µ–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π
    if (completedCandle.timestamp <= this.currentSignal.candle.timestamp) {
      logger.info(
        `‚ö†Ô∏è –ü–†–û–ü–£–°–ö –û–ë–†–ê–ë–û–¢–ö–ò: –¢–µ–∫—É—â–∞—è —Å–≤–µ—á–∞ (${new Date(
          completedCandle.timestamp
        ).toLocaleTimeString()}) —Å—Ç–∞—Ä—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π (${new Date(
          this.currentSignal.candle.timestamp
        ).toLocaleTimeString()})`
      );
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–≤–µ—á–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
    if (!completedCandle.confirmed) {
      logger.info(`‚è≥ –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏`);
      return;
    }

    logger.info(`üìä –ü–†–û–í–ï–†–ö–ê –ü–û–î–¢–í–ï–†–ñ–î–ê–Æ–©–ï–ô –°–í–ï–ß–ò:`);
    logger.info(`   üìà –û–±—ä–µ–º —Ç–µ–∫—É—â–µ–π: ${completedCandle.volume.toFixed(2)}`);
    logger.info(
      `   üìä –û–±—ä–µ–º —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π: ${this.currentSignal.candle.volume.toFixed(2)}`
    );

    // –ï—Å–ª–∏ –æ–±—ä–µ–º —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏ –º–µ–Ω—å—à–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π - –≤—Ö–æ–¥–∏–º –≤ –ø–æ–∑–∏—Ü–∏—é
    if (completedCandle.volume <= this.currentSignal.candle.volume) {
      logger.info(`üéØ –í–•–û–î–ò–ú –í –ü–û–ó–ò–¶–ò–Æ: –ù–∞–π–¥–µ–Ω–∞ —Å–≤–µ—á–∞ —Å –º–µ–Ω—å—à–∏–º –æ–±—ä–µ–º–æ–º`);
      const positionOpened = await this.openPosition(
        this.currentSignal.candle,
        completedCandle
      );

      // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞
      if (positionOpened && this.currentSignal) {
        this.currentSignal.isActive = false;
        logger.info("‚úÖ –°–∏–≥–Ω–∞–ª –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é.");
      }
    } else {
      // –ï—Å–ª–∏ –æ–±—ä–µ–º –±–æ–ª—å—à–µ - –æ–±–Ω–æ–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –Ω–∞ —Ç–µ–∫—É—â—É—é —Å–≤–µ—á—É
      logger.info(`üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–ò–ì–ù–ê–õ–ê: –ù–∞–π–¥–µ–Ω–∞ —Å–≤–µ—á–∞ —Å –±–æ–ª—å—à–∏–º –æ–±—ä–µ–º–æ–º`);
      logger.info(
        `   üìä –°—Ç–∞—Ä—ã–π –æ–±—ä–µ–º: ${this.currentSignal.candle.volume.toFixed(2)}`
      );
      logger.info(`   üìä –ù–æ–≤—ã–π –æ–±—ä–µ–º: ${completedCandle.volume.toFixed(2)}`);

      this.currentSignal = {
        candle: completedCandle,
        isActive: true,
        waitingForLowerVolume: true
      };
      this.usedSignalTimestamps.add(completedCandle.timestamp);
    }
  }

  private async openPosition(
    signalCandle: Candle,
    currentCandle: Candle
  ): Promise<boolean> {
    if (this.activePosition) {
      logger.warn(
        "‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–∑–∏—Ü–∏—é. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –±–∏—Ä–∂–µ..."
      );

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞ –±–∏—Ä–∂–µ
      const positionsResponse = await this.client.getPositionInfo({
        category: "linear",
        symbol: this.SYMBOL
      });

      if (positionsResponse.retCode === 0 && positionsResponse.result?.list) {
        const openPositions = positionsResponse.result.list.filter(
          pos => Number(pos.size) > 0
        );

        if (openPositions.length === 0) {
          logger.warn(
            "üîÑ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–°–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò: –ù–∞ –±–∏—Ä–∂–µ –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–π, –Ω–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é. –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ."
          );
          this.activePosition = null;
          this.stopTrailingStopCheck();
        } else {
          logger.warn(
            `üö´ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è –Ω–∞ –±–∏—Ä–∂–µ - —Ä–∞–∑–º–µ—Ä ${openPositions[0].size}, —Å—Ç–æ—Ä–æ–Ω–∞ ${openPositions[0].side}`
          );
          return false;
        }
      }
    }

    if (this.isOpeningPosition) {
      logger.warn(
        "‚è≥ –£–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â—É—é –ø–æ–ø—ã—Ç–∫—É."
      );
      return false;
    }

    this.isOpeningPosition = true;
    logger.info("üîí –ë–ª–æ–∫–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏");

    try {
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ API - –Ω–µ—Ç –ª–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
      const positionsResponse = await this.client.getPositionInfo({
        category: "linear",
        symbol: this.SYMBOL
      });

      if (positionsResponse.retCode === 0 && positionsResponse.result?.list) {
        const openPositions = positionsResponse.result.list.filter(
          pos => Number(pos.size) > 0
        );

        if (openPositions.length > 0) {
          logger.warn(
            `üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è —á–µ—Ä–µ–∑ API: —Ä–∞–∑–º–µ—Ä ${openPositions[0].size}, —Å—Ç–æ—Ä–æ–Ω–∞ ${openPositions[0].side}`
          );
          logger.warn(
            "–°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–¥–Ω—É —Å–¥–µ–ª–∫—É! –û—Ç–º–µ–Ω—è–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏."
          );

          // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º
          this.activePosition = {
            side: openPositions[0].side as any,
            entryPrice: Number(openPositions[0].avgPrice),
            entryTime: Date.now(), // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è
            isTrailingActive: false,
            lastTrailingStopPrice: null,
            orderId: "", // –£ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç orderId
            plannedTakeProfit: undefined,
            plannedStopLoss: undefined
          };

          return false;
        }
      }
    } catch (error) {
      logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π:", error);
      this.isOpeningPosition = false;
      return false;
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –ø–æ–∑–∏—Ü–∏–∏
      const balanceResponse = await this.client.getWalletBalance({
        accountType: "UNIFIED"
      });

      // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–º CONTRACT —Å—á–µ—Ç –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤
      const contractBalanceResponse = await this.client.getWalletBalance({
        accountType: "CONTRACT"
      });

      // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–º SPOT —Å—á–µ—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      const spotBalanceResponse = await this.client.getWalletBalance({
        accountType: "SPOT"
      });

      // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∏–∑ –ª—é–±–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Å—á–µ—Ç–∞
      let usdtBalance = null;
      let accountType = "";

      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º CONTRACT
      if (
        contractBalanceResponse.retCode === 0 &&
        contractBalanceResponse.result?.list?.[0]?.coin
      ) {
        usdtBalance = contractBalanceResponse.result.list[0].coin.find(
          c => c.coin === "USDT"
        );
        accountType = "CONTRACT";
      }

      // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ CONTRACT, –ø—Ä–æ–≤–µ—Ä—è–µ–º UNIFIED
      if (
        !usdtBalance &&
        balanceResponse.retCode === 0 &&
        balanceResponse.result?.list?.[0]?.coin
      ) {
        usdtBalance = balanceResponse.result.list[0].coin.find(
          c => c.coin === "USDT"
        );
        accountType = "UNIFIED";
      }

      if (usdtBalance) {
        const availableBalance =
          accountType === "UNIFIED"
            ? Number(usdtBalance.walletBalance) // –î–ª—è UNIFIED –∏—Å–ø–æ–ª—å–∑—É–µ–º walletBalance
            : Number(usdtBalance.availableToWithdraw); // –î–ª—è –¥—Ä—É–≥–∏—Ö —Å—á–µ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º availableToWithdraw

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–µ—á–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –º–∞—Ä–∂–∏
        const instrumentResponse = await this.client.getInstrumentsInfo({
          category: "linear",
          symbol: this.SYMBOL
        });

        let requiredMargin = this.TRADE_SIZE_USD; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ–∑ –ø–ª–µ—á–∞

        if (
          instrumentResponse.retCode === 0 &&
          instrumentResponse.result?.list?.[0]
        ) {
          const leverage =
            Number(
              instrumentResponse.result.list[0].leverageFilter?.maxLeverage
            ) || 1;
          requiredMargin =
            this.TRADE_SIZE_USD / Math.min(leverage, this.LEVERAGE); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à–µ –ø–ª–µ—á–æ

          logger.info(
            `üîß –î–æ—Å—Ç—É–ø–Ω–æ–µ –ø–ª–µ—á–æ: ${leverage}x, –ò—Å–ø–æ–ª—å–∑—É–µ–º: ${Math.min(
              leverage,
              this.LEVERAGE
            )}x`
          );
        }

        logger.info(
          `üí∞ –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å USDT: ${availableBalance.toFixed(
            2
          )}, –¢—Ä–µ–±—É–µ—Ç—Å—è –º–∞—Ä–∂–∏: ${requiredMargin.toFixed(2)} (—Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${
            this.TRADE_SIZE_USD
          })`
        );

        if (availableBalance < requiredMargin) {
          logger.error(
            `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –î–æ—Å—Ç—É–ø–Ω–æ: ${availableBalance.toFixed(
              2
            )} USDT, —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∞—Ä–∂–∏: ${requiredMargin.toFixed(2)} USDT`
          );
          this.isOpeningPosition = false;
          return false;
        }
      } else {
        logger.warn("üí∏ –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –±–∞–ª–∞–Ω—Å USDT –Ω–∏ –Ω–∞ –æ–¥–Ω–æ–º –∏–∑ —Å—á–µ—Ç–æ–≤");
        this.isOpeningPosition = false;
        return false;
      }

      const side: OrderSideV5 = signalCandle.isGreen ? "Sell" : "Buy";

      // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø –°–î–ï–õ–ö–ò –î–õ–Ø VSA
      logger.info(`üîç –ê–ù–ê–õ–ò–ó –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø –°–î–ï–õ–ö–ò (VSA –ª–æ–≥–∏–∫–∞):`);
      logger.info(
        `   ‚è∞ –í—Ä–µ–º—è —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π —Å–≤–µ—á–∏: ${new Date(
          signalCandle.timestamp
        ).toISOString()} (${new Date(
          signalCandle.timestamp
        ).toLocaleTimeString()})`
      );
      logger.info(
        `   üìä –°–∏–≥–Ω–∞–ª—å–Ω–∞—è —Å–≤–µ—á–∞: Open=${signalCandle.open} ‚Üí Close=${signalCandle.close}`
      );
      logger.info(
        `   üßÆ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞: ${signalCandle.close} ${
          signalCandle.close >= signalCandle.open ? ">=" : "<"
        } ${signalCandle.open} = ${
          signalCandle.close >= signalCandle.open ? "–ó–ï–õ–ï–ù–ê–Ø" : "–ö–†–ê–°–ù–ê–Ø"
        }`
      );
      logger.info(
        `   üé® –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ü–≤–µ—Ç: ${
          signalCandle.isGreen ? "üü¢ –ó–ï–õ–ï–ù–ê–Ø (—Ä–æ—Å—Ç)" : "üî¥ –ö–†–ê–°–ù–ê–Ø (–ø–∞–¥–µ–Ω–∏–µ)"
        }`
      );
      logger.info(
        `   üìà –û–±—ä–µ–º —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π —Å–≤–µ—á–∏: ${signalCandle.volume.toFixed(2)}`
      );
      logger.info(
        `   üéØ –í–´–ë–†–ê–ù–ù–û–ï –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï: ${side} ${
          side === "Buy" ? "(–õ–û–ù–ì)" : "(–®–û–†–¢)"
        }`
      );

      // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ó–ê–©–ò–¢–ê: –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è VSA –ª–æ–≥–∏–∫–∏
      const vsaLogicCheck = this.verifyVSALogic(signalCandle, side);
      if (!vsaLogicCheck.isValid) {
        logger.error(`üö´ –û–®–ò–ë–ö–ê VSA –õ–û–ì–ò–ö–ò: ${vsaLogicCheck.error}`);
        logger.error(`üö´ –°–î–ï–õ–ö–ê –û–¢–ú–ï–ù–ï–ù–ê –î–õ–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò!`);
        this.isOpeningPosition = false;
        return false;
      }

      const stopLossLevel =
        side === "Buy"
          ? Math.min(signalCandle.low, currentCandle.low)
          : Math.max(signalCandle.high, currentCandle.high);

      const stopLoss =
        side === "Buy"
          ? stopLossLevel - this.STOP_LOSS_POINTS
          : stopLossLevel + this.STOP_LOSS_POINTS;

      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –æ—Ä–¥–µ—Ä–∞, –ø–æ—Ç–æ–º —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º TP –æ—Ç –Ω–µ—ë
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä—ã–Ω–æ—á–Ω—É—é —Ü–µ–Ω—É –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
      const tickerResponse = await this.client.getTickers({
        category: "linear",
        symbol: this.SYMBOL
      });

      let orderPrice = currentCandle.close; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ü–µ–Ω–∞ —Å–≤–µ—á–∏

      if (tickerResponse.retCode === 0 && tickerResponse.result?.list?.[0]) {
        const currentMarketPrice = Number(
          tickerResponse.result.list[0].lastPrice
        );
        // –î–µ–ª–∞–µ–º –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é —Ü–µ–Ω—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
        orderPrice =
          side === "Buy"
            ? currentMarketPrice + 10 // Buy –≤—ã—à–µ —Ä—ã–Ω–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
            : currentMarketPrice - 10; // Sell –Ω–∏–∂–µ —Ä—ã–Ω–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è

        logger.info(
          `üìä –†—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞: ${currentMarketPrice}, –¶–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞: ${orderPrice} (${
            side === "Buy" ? "-5" : "+2"
          } –ø—É–Ω–∫—Ç–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ª–∏–º–∏—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è)`
        );
      }

      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º TP –æ—Ç —Ü–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞, –∞ –Ω–µ –æ—Ç —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–∏
      const takeProfit =
        orderPrice +
        (side === "Buy" ? this.TAKE_PROFIT_POINTS : -this.TAKE_PROFIT_POINTS);

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞
      const instrumentResponse = await this.client.getInstrumentsInfo({
        category: "linear",
        symbol: this.SYMBOL
      });

      let lotSizeFilter;
      if (
        instrumentResponse.retCode === 0 &&
        instrumentResponse.result?.list?.[0]
      ) {
        lotSizeFilter = instrumentResponse.result.list[0].lotSizeFilter;
        logger.info(
          `üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: minOrderQty=${lotSizeFilter?.minOrderQty}, qtyStep=${lotSizeFilter?.qtyStep}`
        );
      }

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —à–∞–≥–∞
      const rawSize = this.TRADE_SIZE_USD / orderPrice;
      const qtyStep = Number(lotSizeFilter?.qtyStep || 0.1);
      const minQty = Number(lotSizeFilter?.minOrderQty || 0.1);

      // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∫—Ä–∞—Ç–Ω–æ–≥–æ qtyStep, –Ω–æ –Ω–µ –º–µ–Ω—å—à–µ minQty
      const steps = Math.floor(rawSize / qtyStep);
      const contractSize = Math.max(steps * qtyStep, minQty).toFixed(1);

      logger.info(
        `üí∞ –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏: $${this.TRADE_SIZE_USD} / ${orderPrice} = ${rawSize} ‚Üí ${contractSize} (–æ–∫—Ä—É–≥–ª–µ–Ω–æ –¥–æ —à–∞–≥–∞ ${qtyStep})`
      );

      const orderParams = {
        category: "linear" as const,
        symbol: this.SYMBOL,
        side: side,
        orderType: "Limit" as const,
        qty: contractSize,
        price: orderPrice.toString(),
        timeInForce: "GTC" as const,
        positionIdx: 0 as const
      };

      const orderResponse = await this.client.submitOrder(orderParams);

      if (orderResponse.retCode === 0) {
        logger.info(
          `‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º ${contractSize}: TP=${takeProfit.toFixed(
            1
          )}, SL=${stopLoss.toFixed(1)}`
        );
        return true;
      } else {
        logger.error(
          `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞: ${orderResponse.retMsg}`
        );
        return false;
      }
    } catch (error) {
      logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏:", error);
      this.isOpeningPosition = false;
      return false;
    }
  }

  private verifyVSALogic(
    signalCandle: Candle,
    side: OrderSideV5
  ): { isValid: boolean; error?: string } {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ VSA –ª–æ–≥–∏–∫–∏
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å —Ñ–ª–∞–≥–æ–º isValid –∏, –≤–æ–∑–º–æ–∂–Ω–æ, —Å—Ç—Ä–æ–∫–æ–π —Å –æ—à–∏–±–∫–æ–π
    return { isValid: true };
  }

  public finishInitialHistoryAnalysis(): void {
    if (this.currentSignal?.isActive) {
      logger.info(
        `üéØ –ù–∞—á–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∞–∫—Ç–∏–≤–Ω—ã–º —Å–∏–≥–Ω–∞–ª–æ–º –æ—Ç —Å–≤–µ—á–∏ ${new Date(
          this.currentSignal.candle.timestamp
        ).toLocaleTimeString()}`
      );
    }
    logger.info(
      "‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω, —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ"
    );
  }

  private async startTrailingStopCheck(): Promise<void> {
    if (this.trailingStopInterval) {
      clearInterval(this.trailingStopInterval);
    }

    this.trailingStopInterval = setInterval(async () => {
      await this.checkPositionState();
    }, this.TRAILING_STOP_INTERVAL_MS);
  }

  private async checkPositionState(): Promise<void> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
      const positionsResponse = await this.client.getPositionInfo({
        category: "linear",
        symbol: this.SYMBOL
      });

      if (positionsResponse.retCode === 0 && positionsResponse.result?.list) {
        const openPositions = positionsResponse.result.list.filter(
          pos => Number(pos.size) > 0
        );

        // –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π, –Ω–æ —É –Ω–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        if (openPositions.length === 0 && this.activePosition) {
          logger.info("üîÑ –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞, –æ—Ç–º–µ–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ—Ä–¥–µ—Ä–∞");

          // –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ—Ä–¥–µ—Ä–∞
          try {
            const activeOrders = await this.client.getActiveOrders({
              category: "linear",
              symbol: this.SYMBOL
            });

            if (activeOrders.retCode === 0 && activeOrders.result?.list) {
              for (const order of activeOrders.result.list) {
                if (order.reduceOnly) {
                  try {
                    await this.client.cancelOrder({
                      category: "linear",
                      symbol: this.SYMBOL,
                      orderId: order.orderId
                    });
                    logger.info(`‚úÖ –û—Ç–º–µ–Ω–µ–Ω –æ—Ä–¥–µ—Ä ${order.orderId}`);
                  } catch (cancelError) {
                    logger.error(
                      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ—Ä–¥–µ—Ä–∞ ${order.orderId}:`,
                      cancelError
                    );
                  }
                }
              }
            }
          } catch (error) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –æ—Ä–¥–µ—Ä–æ–≤:", error);
          }

          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          this.activePosition = null;
          this.stopTrailingStopCheck();
          logger.info(
            "‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å–±—Ä–æ—à–µ–Ω–æ, –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º —Å–∏–≥–Ω–∞–ª–∞–º"
          );
          return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é —Ç—Ä–µ–π–ª–∏–Ω–≥–∞ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
        if (openPositions.length > 0 && this.activePosition) {
          const position = openPositions[0];
          const currentPrice = Number(position.markPrice);
          const entryPrice = Number(position.avgPrice);

          // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏—Ç –≤ –ø—É–Ω–∫—Ç–∞—Ö
          const profitPoints =
            this.activePosition.side === "Buy"
              ? currentPrice - entryPrice
              : entryPrice - currentPrice;

          // –ï—Å–ª–∏ —Ç—Ä–µ–π–ª–∏–Ω–≥ –µ—â–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
          if (!this.activePosition.isTrailingActive) {
            logger.info(
              `üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–π–ª–∏–Ω–≥–∞: –ü—Ä–æ—Ñ–∏—Ç=${profitPoints.toFixed(
                2
              )} –ø—É–Ω–∫—Ç–æ–≤ (–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–∏ ${this.TRAILING_ACTIVATION_POINTS})`
            );

            if (profitPoints >= this.TRAILING_ACTIVATION_POINTS) {
              // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å
              const newStopLoss =
                this.activePosition.side === "Buy"
                  ? currentPrice - this.TRAILING_DISTANCE
                  : currentPrice + this.TRAILING_DISTANCE;

              try {
                // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç–æ–ø-–ª–æ—Å—Å –æ—Ä–¥–µ—Ä
                const activeOrders = await this.client.getActiveOrders({
                  category: "linear",
                  symbol: this.SYMBOL
                });

                if (activeOrders.retCode === 0 && activeOrders.result?.list) {
                  for (const order of activeOrders.result.list) {
                    if (order.reduceOnly) {
                      const orderPrice = Number(order.price);
                      const isSL =
                        this.activePosition.side === "Buy"
                          ? orderPrice < currentPrice
                          : orderPrice > currentPrice;

                      if (isSL) {
                        await this.client.cancelOrder({
                          category: "linear",
                          symbol: this.SYMBOL,
                          orderId: order.orderId
                        });
                        logger.info(
                          `‚úÖ –û—Ç–º–µ–Ω–µ–Ω —Å—Ç–∞—Ä—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${order.orderId} @ ${orderPrice}`
                        );
                      }
                    }
                  }
                }

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å
                const slResponse = await this.client.submitOrder({
                  category: "linear",
                  symbol: this.SYMBOL,
                  side: this.activePosition.side === "Buy" ? "Sell" : "Buy",
                  orderType: "Limit",
                  qty: position.size.toString(),
                  price: newStopLoss.toString(),
                  triggerPrice: newStopLoss.toString(),
                  triggerDirection: this.activePosition.side === "Buy" ? 2 : 1,
                  timeInForce: "GTC",
                  triggerBy: "MarkPrice",
                  reduceOnly: true,
                  closeOnTrigger: true,
                  orderLinkId: `sl_trailing_${Date.now()}`
                });

                if (slResponse.retCode === 0) {
                  this.activePosition.isTrailingActive = true;
                  this.activePosition.lastTrailingStopPrice = newStopLoss;
                  logger.info(
                    `üöÄ –ê–ö–¢–ò–í–ò–†–û–í–ê–ù –¢–†–ï–ô–õ–ò–ù–ì-–°–¢–û–ü –õ–ò–ú–ò–¢–ù–´–ú –û–†–î–ï–†–û–ú: SL=${newStopLoss.toFixed(
                      2
                    )}`
                  );
                } else {
                  logger.error(
                    `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ª–∏–º–∏—Ç–Ω–æ–≥–æ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞: ${slResponse.retMsg}`
                  );
                }
              } catch (error) {
                logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞:", error);
              }
            }
          }
          // –ï—Å–ª–∏ —Ç—Ä–µ–π–ª–∏–Ω–≥ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
          else if (this.activePosition.lastTrailingStopPrice !== null) {
            const optimalStopPrice =
              this.activePosition.side === "Buy"
                ? currentPrice - this.TRAILING_DISTANCE
                : currentPrice + this.TRAILING_DISTANCE;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–æ–ø
            const shouldUpdateStop =
              this.activePosition.side === "Buy"
                ? optimalStopPrice > this.activePosition.lastTrailingStopPrice
                : optimalStopPrice < this.activePosition.lastTrailingStopPrice;

            if (shouldUpdateStop) {
              try {
                // –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–æ–ø-–ª–æ—Å—Å
                const activeOrders = await this.client.getActiveOrders({
                  category: "linear",
                  symbol: this.SYMBOL
                });

                if (activeOrders.retCode === 0 && activeOrders.result?.list) {
                  for (const order of activeOrders.result.list) {
                    if (order.reduceOnly) {
                      const orderPrice = Number(order.price);
                      const isSL =
                        this.activePosition.side === "Buy"
                          ? orderPrice < currentPrice
                          : orderPrice > currentPrice;

                      if (isSL) {
                        await this.client.cancelOrder({
                          category: "linear",
                          symbol: this.SYMBOL,
                          orderId: order.orderId
                        });
                        logger.info(
                          `‚úÖ –û—Ç–º–µ–Ω–µ–Ω —Å—Ç–∞—Ä—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${order.orderId} @ ${orderPrice}`
                        );
                      }
                    }
                  }
                }

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å
                const slResponse = await this.client.submitOrder({
                  category: "linear",
                  symbol: this.SYMBOL,
                  side: this.activePosition.side === "Buy" ? "Sell" : "Buy",
                  orderType: "Limit",
                  qty: position.size.toString(),
                  price: optimalStopPrice.toString(),
                  triggerPrice: optimalStopPrice.toString(),
                  triggerDirection: this.activePosition.side === "Buy" ? 2 : 1,
                  timeInForce: "GTC",
                  triggerBy: "MarkPrice",
                  reduceOnly: true,
                  closeOnTrigger: true,
                  orderLinkId: `sl_trailing_${Date.now()}`
                });

                if (slResponse.retCode === 0) {
                  this.activePosition.lastTrailingStopPrice = optimalStopPrice;
                  logger.info(
                    `üîÑ –û–ë–ù–û–í–õ–ï–ù –¢–†–ï–ô–õ–ò–ù–ì-–°–¢–û–ü: ${optimalStopPrice.toFixed(
                      2
                    )} (–¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã: ${currentPrice.toFixed(2)})`
                  );
                } else {
                  logger.error(
                    `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞: ${slResponse.retMsg}`
                  );
                }
              } catch (error) {
                logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞:", error);
              }
            }
          }
        }
      }
    } catch (error) {
      logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏:", error);
    }
  }

  private stopTrailingStopCheck(): void {
    if (this.trailingStopInterval) {
      clearInterval(this.trailingStopInterval);
    }
  }

  private cleanupOldSignals(oldestCandleTimestamp: number): void {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
  }

  public async performRestCheck(): Promise<void> {
    const currentTime = Date.now();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —Ä–∞–Ω–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    if (currentTime - this.lastRestCheckTime < this.REST_CHECK_INTERVAL) {
      return;
    }

    try {
      logger.info("üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ REST API...");

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏ —á–µ—Ä–µ–∑ REST API
      const klineResponse = await this.client.getKline({
        category: "linear",
        symbol: this.SYMBOL,
        interval: "240", // 4h
        limit: 5 // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–≤–µ—á–µ–π
      });

      if (klineResponse.retCode === 0 && klineResponse.result?.list) {
        const candles: Candle[] = klineResponse.result.list
          .map(item => ({
            timestamp: Number(item[0]),
            open: Number(item[1]),
            high: Number(item[2]),
            low: Number(item[3]),
            close: Number(item[4]),
            volume: Number(item[5]),
            turnover: Number(item[6]),
            confirmed: true,
            isGreen: Number(item[4]) >= Number(item[1])
          }))
          .reverse(); // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤, —á—Ç–æ–±—ã —Å–≤–µ—á–∏ —à–ª–∏ –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º

        logger.info(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${candles.length} —Å–≤–µ—á–µ–π —á–µ—Ä–µ–∑ REST API`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–≤–µ—á—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–∏–≥–Ω–∞–ª–∞
        for (let i = 1; i < candles.length; i++) {
          const currentCandle = candles[i];
          const previousCandle = candles[i - 1];

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–º
          this.checkVolumeSpike(currentCandle, previousCandle);

          // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Å–∏–≥–Ω–∞–ª, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å–≤–µ—á—É –∫–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â—É—é
          if (this.currentSignal?.isActive) {
            await this.processCompletedCandle(currentCandle, candles);
          }
        }

        this.lastRestCheckTime = currentTime;
        logger.info("‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ REST API –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
      }
    } catch (error) {
      logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ REST –ø—Ä–æ–≤–µ—Ä–∫–∏:", error);
    }
  }
}
