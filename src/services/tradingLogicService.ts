import { RestClientV5, OrderSideV5, LinearInverseInstrumentInfoV5 } from 'bybit-api';
import { Candle, VolumeSignal, ActivePosition } from './bybit.types';
import { NotificationService } from './notificationService';
import { logger } from '../utils/logger';

export interface TradingLogicCallbacks {
    onTradeOperation: (message: string) => void;
    onSignalDetected: (message: string) => void;
}

export class TradingLogicService {
    private currentSignal: VolumeSignal | null = null;
    private activePosition: ActivePosition | null = null;
    private trailingStopInterval: NodeJS.Timeout | null = null;

    private readonly TAKE_PROFIT_POINTS: number;
    private readonly STOP_LOSS_POINTS: number;
    private readonly TRAILING_ACTIVATION_POINTS: number;
    private readonly TRAILING_DISTANCE: number;
    private readonly VOLUME_THRESHOLD: number;
    private readonly VOLUME_MULTIPLIER: number;
    private readonly TRADE_SIZE_USD: number;
    private readonly SYMBOL: string;
    private readonly TRAILING_STOP_INTERVAL_MS = 3000;

    constructor(
        private client: RestClientV5,
        private notificationService: NotificationService,
        private callbacks: TradingLogicCallbacks,
        options: {
            symbol: string;
            tradeSizeUsd: number;
            takeProfitPoints: number;
            stopLossPoints: number;
            trailingActivationPoints: number;
            trailingDistance: number;
            volumeThreshold: number;
            volumeMultiplier: number;
        }
    ) {
        this.SYMBOL = options.symbol;
        this.TRADE_SIZE_USD = options.tradeSizeUsd;
        this.TAKE_PROFIT_POINTS = options.takeProfitPoints;
        this.STOP_LOSS_POINTS = options.stopLossPoints;
        this.TRAILING_ACTIVATION_POINTS = options.trailingActivationPoints;
        this.TRAILING_DISTANCE = options.trailingDistance;
        this.VOLUME_THRESHOLD = options.volumeThreshold;
        this.VOLUME_MULTIPLIER = options.volumeMultiplier;
    }

    public getActivePosition(): ActivePosition | null {
        return this.activePosition;
    }

    public getCurrentSignal(): VolumeSignal | null {
        return this.currentSignal;
    }
    
    public resetSignal(): void {
        if (this.currentSignal) {
            logger.info('üîÑ –°–∏–≥–Ω–∞–ª –æ—Ç–º–µ–Ω–µ–Ω –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —É—Å–ª–æ–≤–∏–π –¥–ª—è –≤—Ö–æ–¥–∞.');
            this.currentSignal = null;
        }
    }

    public checkVolumeSpike(completedCandle: Candle, previousCandle: Candle): void {
        if (!completedCandle.confirmed) {
            return;
        }

        const volumeRatio = completedCandle.volume / previousCandle.volume;
        
        if (volumeRatio >= this.VOLUME_MULTIPLIER && this.activePosition) {
            const timeSinceEntry = completedCandle.timestamp - this.activePosition.entryTime;
            if (timeSinceEntry > 0) {
                logger.info(`üö® –û–ë–ù–ê–†–£–ñ–ï–ù –ê–ù–û–ú–ê–õ–¨–ù–´–ô –û–ë–™–ï–ú –ü–û–°–õ–ï –í–•–û–î–ê! –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏.`);
                logger.info(`üìä –û–±—ä–µ–º –≤—ã—Ä–æ—Å –≤ ${volumeRatio.toFixed(2)}x —Ä–∞–∑`);
                this.closePosition(completedCandle, '–ê–Ω–æ–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞');
                return;
            }
        }

        const isVolumeSpike = volumeRatio >= this.VOLUME_MULTIPLIER;
        const isHighVolume = completedCandle.volume >= this.VOLUME_THRESHOLD;

        if (!this.currentSignal?.isActive && (isVolumeSpike || isHighVolume)) {
            let signalReason = '';
            if (isVolumeSpike && isHighVolume) {
                signalReason = `–í–´–°–û–ö–ò–ô –û–ë–™–ï–ú (${completedCandle.volume.toFixed(2)}) –ò –í–°–ü–õ–ï–°–ö –û–ë–™–ï–ú–ê (${volumeRatio.toFixed(2)}x)`;
            } else if (isVolumeSpike) {
                signalReason = `–í–°–ü–õ–ï–°–ö –û–ë–™–ï–ú–ê (${volumeRatio.toFixed(2)}x)`;
            } else {
                signalReason = `–í–´–°–û–ö–ò–ô –û–ë–™–ï–ú (${completedCandle.volume.toFixed(2)})`;
            }
            logger.info(`üö® –û–ë–ù–ê–†–£–ñ–ï–ù –°–ò–ì–ù–ê–õ: ${signalReason} –í –ó–ê–ö–†–´–¢–û–ô –°–í–ï–ß–ï!`);
            logger.info(`üí∞ –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: ${completedCandle.close}`);
            
            const message = this.notificationService.formatVolumeAlert(completedCandle, previousCandle);
            this.callbacks.onSignalDetected(message);

            this.currentSignal = {
                candle: completedCandle,
                isActive: true,
                waitingForLowerVolume: true
            };
            logger.info(`‚úÖ –°–∏–≥–Ω–∞–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –æ–∂–∏–¥–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å–≤–µ—á—É —Å –º–µ–Ω—å—à–∏–º –æ–±—ä–µ–º–æ–º`);
        } else if (this.currentSignal?.isActive && (completedCandle.volume > previousCandle.volume && completedCandle.volume / previousCandle.volume >= this.VOLUME_MULTIPLIER || completedCandle.volume >= this.VOLUME_THRESHOLD )) {
            logger.info(`üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–ò–ì–ù–ê–õ–ê: –ù–æ–≤–∞—è —Å–≤–µ—á–∞ —Ç–∞–∫–∂–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É—Å–ª–æ–≤–∏—è–º.`);
             this.currentSignal = {
                candle: completedCandle,
                isActive: true,
                waitingForLowerVolume: true
            };
            logger.info(`‚úÖ –°–∏–≥–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å–≤–µ—á—É —Å –º–µ–Ω—å—à–∏–º –æ–±—ä–µ–º–æ–º`);
        } else if (volumeRatio >= this.VOLUME_MULTIPLIER * 0.8 || completedCandle.volume >= this.VOLUME_THRESHOLD * 0.8) {
             logger.info(`üîç –ü–†–û–í–ï–†–ö–ê –û–ë–™–ï–ú–û–í –ó–ê–ö–†–´–¢–û–ô –°–í–ï–ß–ò (–±–ª–∏–∑–∫–æ –∫ —Å–∏–≥–Ω–∞–ª—É): –û–±—ä–µ–º ${completedCandle.volume.toFixed(2)}, –†–∞—Ç–∏–æ ${volumeRatio.toFixed(2)}x`);
        }
    }

    public processCompletedCandle(completedCandle: Candle, candleHistory: Candle[]): void {
        if (!this.currentSignal?.isActive || !this.currentSignal.waitingForLowerVolume) {
            return;
        }

        if (completedCandle.timestamp === this.currentSignal.candle.timestamp) {
            return;
        }
        
        const signalCandleIndex = candleHistory.findIndex(c => c.timestamp === this.currentSignal!.candle.timestamp);
        const completedCandleIndex = candleHistory.findIndex(c => c.timestamp === completedCandle.timestamp);

        if (signalCandleIndex === -1 || completedCandleIndex === -1) {
            logger.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–∏–≥–Ω–∞–ª—å–Ω—É—é –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Å–≤–µ—á—É –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.");
            this.resetSignal();
            return;
        }


        if (completedCandle.volume <= this.currentSignal.candle.volume) {
            logger.info(`‚úÖ –£—Å–ª–æ–≤–∏–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: –æ–±—ä–µ–º —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏ (${completedCandle.volume.toFixed(2)}) <= –æ–±—ä–µ–º–∞ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π (${this.currentSignal.candle.volume.toFixed(2)})`);
            this.openPosition(this.currentSignal.candle, completedCandle);
            this.currentSignal.isActive = false; 
            this.currentSignal.waitingForLowerVolume = false;
        } else {
            logger.info(`‚ùå –£—Å–ª–æ–≤–∏–µ –¥–ª—è –≤—Ö–æ–¥–∞ –ù–ï –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: –æ–±—ä–µ–º —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏ (${completedCandle.volume.toFixed(2)}) > –æ–±—ä–µ–º–∞ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π (${this.currentSignal.candle.volume.toFixed(2)})`);
            logger.info(`üïØÔ∏è –û–∂–∏–¥–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å–≤–µ—á—É... –°–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º.`);
        }
    }

    private async openPosition(signalCandle: Candle, currentCandle: Candle): Promise<void> {
        if (this.activePosition) {
            logger.warn("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é, –∫–æ–≥–¥–∞ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è. –û—Ç–∫–ª–æ–Ω–µ–Ω–æ.");
            return;
        }
        try {
            const side: OrderSideV5 = signalCandle.isGreen ? 'Sell' : 'Buy';
            
            const stopLossLevel = side === 'Buy' ? 
                Math.min(signalCandle.low, currentCandle.low) :    
                Math.max(signalCandle.high, currentCandle.high);   

            const stopLoss = side === 'Buy' ? 
                stopLossLevel - this.STOP_LOSS_POINTS :   
                stopLossLevel + this.STOP_LOSS_POINTS;    

            const takeProfit = currentCandle.close + (side === 'Buy' ? 
                this.TAKE_PROFIT_POINTS : 
                -this.TAKE_PROFIT_POINTS);

            const contractSize = (this.TRADE_SIZE_USD / currentCandle.close).toFixed(3);
            const orderPrice = currentCandle.close.toString();

            logger.info(`üéØ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ (–õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä PostOnly):`);
            logger.info(`üìà –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${side}, –¶–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞: ${orderPrice}, –¢–ü: ${takeProfit}, –°–õ: ${stopLoss}`);

            const response = await this.client.submitOrder({
                category: 'linear',
                symbol: this.SYMBOL,
                side: side,
                orderType: 'Limit',
                qty: contractSize,
                price: orderPrice,
                timeInForce: 'PostOnly',
            });

            logger.info(`üì° –û—Ç–≤–µ—Ç –æ—Ç API –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ª–∏–º–∏—Ç–Ω–æ–π PostOnly –ø–æ–∑–∏—Ü–∏–∏: RetCode=${response.retCode}, RetMsg=${response.retMsg}, OrderId=${response.result?.orderId}`);

            if (response.retCode === 0 && response.result && response.result.orderId) {
                logger.info(`‚úÖ –õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä PostOnly —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω (orderId: ${response.result.orderId}).`);
                
                this.activePosition = {
                    side: side,
                    entryPrice: currentCandle.close, 
                    entryTime: currentCandle.timestamp,
                    isTrailingActive: false,
                    lastTrailingStopPrice: null,
                    orderId: response.result.orderId 
                };

                const tpSlResponse = await this.client.setTradingStop({
                    category: 'linear',
                    symbol: this.SYMBOL,
                    takeProfit: takeProfit.toString(),
                    stopLoss: stopLoss.toString(),
                    positionIdx: 0, 
                    tpTriggerBy: 'MarkPrice',
                    slTriggerBy: 'MarkPrice'
                });
                logger.info(`üõ°Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ TP/SL: RetCode=${tpSlResponse.retCode}, RetMsg=${tpSlResponse.retMsg}`);

                this.startTrailingStopCheck();

                const message = this.notificationService.formatTradeOpenAlert(this.activePosition, takeProfit, stopLoss, signalCandle, currentCandle, true);
                this.callbacks.onTradeOperation(message);
                logger.info(`‚úÖ –°–¥–µ–ª–∫–∞ (–ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä) –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
            } else {
                logger.error(`‚ùå –õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä PostOnly –Ω–µ –±—ã–ª —Ä–∞–∑–º–µ—â–µ–Ω. –ö–æ–¥: ${response.retCode}, —Å–æ–æ–±—â–µ–Ω–∏–µ: ${response.retMsg}`);
            }
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ª–∏–º–∏—Ç–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏:', error);
        }
    }

    public async closePosition(triggeringCandle: Candle, reason: string): Promise<void> {
        if (!this.activePosition) return;

        const positionToClose = { ...this.activePosition };
        this.activePosition = null;
        this.stopTrailingStopCheck();
        
        try {
            const closeSide: OrderSideV5 = positionToClose.side === 'Buy' ? 'Sell' : 'Buy';
            const contractSize = (this.TRADE_SIZE_USD / positionToClose.entryPrice).toFixed(3);

            logger.info(`üéØ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ (–†—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä): ${reason}`);
            logger.info(`üìà –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è: ${closeSide}, –†–∞–∑–º–µ—Ä: ${contractSize}`);
            
            const response = await this.client.submitOrder({
                category: 'linear',
                symbol: this.SYMBOL,
                side: closeSide,
                orderType: 'Market',
                qty: contractSize,
                reduceOnly: true
            });
            logger.info(`üì° –û—Ç–≤–µ—Ç –æ—Ç API –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: RetCode=${response.retCode}, RetMsg=${response.retMsg}`);

            if (response.retCode === 0) {
                logger.info(`‚úÖ –ü–æ–∑–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ —Ä—ã–Ω–∫—É.`);
                const message = this.notificationService.formatTradeCloseAlert(positionToClose, triggeringCandle.close, reason);
                this.callbacks.onTradeOperation(message);
            } else {
                 logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ —Ä—ã–Ω–æ—á–Ω—ã–º –æ—Ä–¥–µ—Ä–æ–º. –ö–æ–¥: ${response.retCode}, —Å–æ–æ–±—â–µ–Ω–∏–µ: ${response.retMsg}. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–∑–∏—Ü–∏—è —É–∂–µ –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞.`);
            }
        } catch (error) {
            logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏:', error);
        }
    }
    
    private startTrailingStopCheck(): void {
        this.stopTrailingStopCheck(); 

        this.trailingStopInterval = setInterval(async () => {
            await this.updateTrailingStop();
        }, this.TRAILING_STOP_INTERVAL_MS);
        logger.info(`‚è±Ô∏è –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º ${this.TRAILING_STOP_INTERVAL_MS / 1000} —Å–µ–∫.`);
    }

    private stopTrailingStopCheck(): void {
        if (this.trailingStopInterval) {
            clearInterval(this.trailingStopInterval);
            this.trailingStopInterval = null;
            logger.info('‚è±Ô∏è –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.');
        }
    }

    private async updateTrailingStop(): Promise<void> {
        if (!this.activePosition || !this.activePosition.orderId) {
            this.stopTrailingStopCheck();
            return;
        }

        try {
            const response = await this.client.getTickers({ category: 'linear', symbol: this.SYMBOL });

            if (response.retCode === 0 && response.result.list && response.result.list[0]) {
                const currentPrice = Number(response.result.list[0].lastPrice);
                const entryPrice = this.activePosition.entryPrice;
                const side = this.activePosition.side;

                const profitPoints = side === 'Buy' ? currentPrice - entryPrice : entryPrice - currentPrice;

                if (profitPoints >= this.TRAILING_ACTIVATION_POINTS) {
                    const newStopPrice = side === 'Buy' ? 
                        currentPrice - this.TRAILING_DISTANCE : 
                        currentPrice + this.TRAILING_DISTANCE;

                    if (!this.activePosition.isTrailingActive ||
                        (side === 'Buy' && newStopPrice > (this.activePosition.lastTrailingStopPrice || 0)) ||
                        (side === 'Sell' && newStopPrice < (this.activePosition.lastTrailingStopPrice || Infinity))) {
                        
                        let tpSlParams: any = {
                            category: 'linear',
                            symbol: this.SYMBOL,
                            stopLoss: newStopPrice.toString(),
                            slTriggerBy: 'MarkPrice',
                            positionIdx: 0 
                        };

                        if (!this.activePosition.isTrailingActive) {
                            logger.info(this.notificationService.formatTrailingStopActivation());
                            this.callbacks.onTradeOperation(this.notificationService.formatTrailingStopActivation());
                            tpSlParams.takeProfit = '0';
                            tpSlParams.tpTriggerBy = 'MarkPrice';
                            this.activePosition.isTrailingActive = true;
                        }
                        
                        await this.client.setTradingStop(tpSlParams);
                        this.activePosition.lastTrailingStopPrice = newStopPrice;
                        
                        const updateMessage = this.notificationService.formatTrailingStopUpdate(newStopPrice, this.TRAILING_DISTANCE, currentPrice);
                        logger.info(updateMessage);
                        this.callbacks.onTradeOperation(updateMessage);
                    }
                }
            }
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞:', error);
        }
    }
} 