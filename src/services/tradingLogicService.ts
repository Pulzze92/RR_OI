import {
  RestClientV5,
  OrderSideV5,
  LinearInverseInstrumentInfoV5
} from "bybit-api";
import { Candle, VolumeSignal, ActivePosition } from "./bybit.types";
import { NotificationService } from "./notificationService";
import { logger } from "../utils/logger";

export interface TradingLogicCallbacks {
  onTradeOperation: (message: string) => void;
  onSignalDetected: (message: string) => void;
}

export class TradingLogicService {
  private currentSignal: VolumeSignal | null = null;
  private activePosition: ActivePosition | null = null;
  private trailingStopInterval: NodeJS.Timeout | null = null;
  private isOpeningPosition: boolean = false;
  private lastSignalNotificationTime: number = 0;
  private lastTrailingNotificationTime: number = 0;
  private lastTrailingStopPrice: number = 0;

  private readonly TAKE_PROFIT_POINTS: number;
  private readonly STOP_LOSS_POINTS: number;
  private readonly TRAILING_ACTIVATION_POINTS: number;
  private readonly TRAILING_DISTANCE: number;
  private readonly VOLUME_THRESHOLD: number;
  private readonly TRADE_SIZE_USD: number;
  private readonly SYMBOL: string;
  private readonly TRAILING_STOP_INTERVAL_MS = 3000;
  private lastTrailingLogTime: number | null = null;

  constructor(
    private client: RestClientV5,
    private notificationService: NotificationService,
    private callbacks: TradingLogicCallbacks,
    options: {
      symbol: string;
      tradeSizeUsd: number;
      takeProfitPoints: number;
      stopLossPoints: number;
      trailingActivationPoints: number;
      trailingDistance: number;
      volumeThreshold: number;
    }
  ) {
    this.SYMBOL = options.symbol;
    this.TRADE_SIZE_USD = options.tradeSizeUsd;
    this.TAKE_PROFIT_POINTS = options.takeProfitPoints;
    this.STOP_LOSS_POINTS = options.stopLossPoints;
    this.TRAILING_ACTIVATION_POINTS = options.trailingActivationPoints;
    this.TRAILING_DISTANCE = options.trailingDistance;
    this.VOLUME_THRESHOLD = options.volumeThreshold;
  }

  public getActivePosition(): ActivePosition | null {
    return this.activePosition;
  }

  public getCurrentSignal(): VolumeSignal | null {
    return this.currentSignal;
  }

  public resetSignal(): void {
    if (this.currentSignal) {
      logger.info("üîÑ –°–∏–≥–Ω–∞–ª –æ—Ç–º–µ–Ω–µ–Ω –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —É—Å–ª–æ–≤–∏–π –¥–ª—è –≤—Ö–æ–¥–∞.");
      this.currentSignal = null;
    }
  }

  public setSignal(signal: VolumeSignal | null): void {
    this.currentSignal = signal;
    if (signal) {
      logger.info(
        `üîÑ –°–∏–≥–Ω–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${new Date(
          signal.candle.timestamp
        ).toLocaleTimeString()}, V=${signal.candle.volume.toFixed(2)}`
      );
    } else {
      logger.info("üîÑ –°–∏–≥–Ω–∞–ª —Å–±—Ä–æ—à–µ–Ω");
    }
  }

  public async syncPositionState(): Promise<void> {
    try {
      const positionsResponse = await this.client.getPositionInfo({
        category: "linear",
        symbol: this.SYMBOL
      });

      if (positionsResponse.retCode === 0 && positionsResponse.result?.list) {
        const openPositions = positionsResponse.result.list.filter(
          pos => Number(pos.size) > 0
        );

        if (openPositions.length > 0) {
          const position = openPositions[0];

          logger.info(`üîÑ –£–°–´–ù–û–í–õ–ï–ù–ò–ï –°–£–©–ï–°–¢–í–£–Æ–©–ï–ô –ü–û–ó–ò–¶–ò–ò:`);
          logger.info(`   üìä –†–∞–∑–º–µ—Ä: ${position.size} ${position.symbol}`);
          logger.info(`   üìà –°—Ç–æ—Ä–æ–Ω–∞: ${position.side}`);
          logger.info(`   üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${position.avgPrice}`);
          logger.info(`   üíπ –¢–µ–∫—É—â–∞—è P&L: ${position.unrealisedPnl} USDT`);

          // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ TP/SL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏
          let currentTakeProfit: number | undefined;
          let currentStopLoss: number | undefined;
          let isTrailingActive = false;

          if (position.takeProfit && Number(position.takeProfit) > 0) {
            currentTakeProfit = Number(position.takeProfit);
            logger.info(`   üéØ –¢–µ–∫—É—â–∏–π Take Profit: ${currentTakeProfit}`);
          }

          if (position.stopLoss && Number(position.stopLoss) > 0) {
            currentStopLoss = Number(position.stopLoss);
            logger.info(`   üõ°Ô∏è –¢–µ–∫—É—â–∏–π Stop Loss: ${currentStopLoss}`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–µ—Ç –ª–∏ —ç—Ç–æ –±—ã—Ç—å —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø
            // –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–º –∏ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–æ–π –±–ª–∏–∑–∫–∞ –∫ TRAILING_DISTANCE,
            // –≤–æ–∑–º–æ–∂–Ω–æ —Ç—Ä–µ–π–ª–∏–Ω–≥ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω
            const currentPrice = Number(position.markPrice);
            const stopDistance =
              position.side === "Buy"
                ? currentPrice - currentStopLoss
                : currentStopLoss - currentPrice;

            if (Math.abs(stopDistance - this.TRAILING_DISTANCE) < 50) {
              isTrailingActive = true;
              logger.info(
                `   üöÄ –í–û–ó–ú–û–ñ–ù–û –ê–ö–¢–ò–í–ï–ù –¢–†–ï–ô–õ–ò–ù–ì: —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Å—Ç–æ–ø–∞ ${stopDistance.toFixed(
                  1
                )} ‚âà ${this.TRAILING_DISTANCE}`
              );
            }
          }

          this.activePosition = {
            side: position.side as any,
            entryPrice: Number(position.avgPrice),
            entryTime: Date.now(), // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è - –ø—Ä–∏ —É—Å—ã–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ
            isTrailingActive: isTrailingActive,
            lastTrailingStopPrice: isTrailingActive
              ? currentStopLoss || null
              : null,
            orderId: "", // –£ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç orderId
            plannedTakeProfit: currentTakeProfit,
            plannedStopLoss: currentStopLoss,
            executionNotificationSent: true // –°—á–∏—Ç–∞–µ–º —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
          };

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å—ã–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏
          const adoptMessage = this.formatPositionAdoptedAlert(position);
          this.callbacks.onTradeOperation(adoptMessage);

          // –í–ê–ñ–ù–û: –ï—Å–ª–∏ TP/SL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Ö –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º —Å–∏—Å—Ç–µ–º—ã
          if (!currentTakeProfit || !currentStopLoss) {
            logger.info(
              "üîß TP/SL –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º —Å–∏—Å—Ç–µ–º—ã..."
            );

            try {
              const entryPrice = Number(position.avgPrice);

              // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º TP –æ—Ç —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ (–Ω–µ –æ—Ç —Ç–µ–∫—É—â–µ–π!)
              const takeProfit =
                entryPrice +
                (position.side === "Buy"
                  ? this.TAKE_PROFIT_POINTS
                  : -this.TAKE_PROFIT_POINTS);

              // –î–ª—è SL –ø—Ä–∏ —É—Å—ã–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—É –≤—Ö–æ–¥–∞ –∫–∞–∫ –±–∞–∑—É (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π —Å–≤–µ—á–µ)
              const stopLoss =
                position.side === "Buy"
                  ? entryPrice - this.STOP_LOSS_POINTS // –õ–æ–Ω–≥: SL –Ω–∏–∂–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞
                  : entryPrice + this.STOP_LOSS_POINTS; // –®–æ—Ä—Ç: SL –≤—ã—à–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞

              logger.info(
                `üéØ –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω–∏: –í—Ö–æ–¥=${entryPrice.toFixed(
                  1
                )}, TP=${takeProfit.toFixed(1)}, SL=${stopLoss.toFixed(1)}`
              );

              const tpSlResponse = await this.client.setTradingStop({
                category: "linear",
                symbol: this.SYMBOL,
                takeProfit: takeProfit.toString(),
                stopLoss: stopLoss.toString(),
                positionIdx: 0,
                tpTriggerBy: "MarkPrice",
                slTriggerBy: "MarkPrice"
              });

              if (tpSlResponse.retCode === 0) {
                logger.info(
                  `üõ°Ô∏è TP/SL —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∏ —É—Å—ã–Ω–æ–≤–ª–µ–Ω–∏–∏: –¢–ü=${takeProfit.toFixed(
                    1
                  )}, –°–õ=${stopLoss.toFixed(1)}`
                );

                // –û–±–Ω–æ–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                this.activePosition.plannedTakeProfit = takeProfit;
                this.activePosition.plannedStopLoss = stopLoss;

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–µ TP/SL
                const tpSlMessage = `üõ°Ô∏è TP/SL –£–°–¢–ê–ù–û–í–õ–ï–ù–´\n\nüéØ Take Profit: ${takeProfit.toFixed(
                  1
                )}\nüö´ Stop Loss: ${stopLoss.toFixed(1)}`;
                this.callbacks.onTradeOperation(tpSlMessage);
              } else {
                logger.error(
                  `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TP/SL –ø—Ä–∏ —É—Å—ã–Ω–æ–≤–ª–µ–Ω–∏–∏: ${tpSlResponse.retMsg}`
                );
              }
            } catch (tpSlError) {
              logger.error(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ TP/SL –¥–ª—è —É—Å—ã–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏:",
                tpSlError
              );
            }
          } else {
            // TP/SL —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏—Ö —Ä–∞—Å—á–µ—Ç–∞
            const entryPrice = Number(position.avgPrice);
            const expectedTakeProfit =
              entryPrice +
              (position.side === "Buy"
                ? this.TAKE_PROFIT_POINTS
                : -this.TAKE_PROFIT_POINTS);
            const expectedStopLoss =
              position.side === "Buy"
                ? entryPrice - this.STOP_LOSS_POINTS
                : entryPrice + this.STOP_LOSS_POINTS;

            const tpDifference = Math.abs(
              currentTakeProfit - expectedTakeProfit
            );
            const slDifference = Math.abs(currentStopLoss - expectedStopLoss);

            logger.info(
              `üîç –ü–†–û–í–ï–†–ö–ê TP/SL: –¢–µ–∫—É—â–∏–µ TP=${currentTakeProfit.toFixed(
                1
              )} SL=${currentStopLoss.toFixed(1)}`
            );
            logger.info(
              `üîç –û–ñ–ò–î–ê–ï–ú–´–ï: TP=${expectedTakeProfit.toFixed(
                1
              )} SL=${expectedStopLoss.toFixed(1)}`
            );
            logger.info(
              `üîç –û–¢–ö–õ–û–ù–ï–ù–ò–Ø: TP=${tpDifference.toFixed(
                1
              )} SL=${slDifference.toFixed(1)} –ø—É–Ω–∫—Ç–æ–≤`
            );

            // –ï—Å–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –±–æ–ª—å—à–µ 50 –ø—É–Ω–∫—Ç–æ–≤, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º
            if (tpDifference > 50 || slDifference > 50) {
              logger.info(
                "üîß TP/SL —Ç—Ä–µ–±—É—é—Ç –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞..."
              );

              try {
                const tpSlResponse = await this.client.setTradingStop({
                  category: "linear",
                  symbol: this.SYMBOL,
                  takeProfit: expectedTakeProfit.toString(),
                  stopLoss: expectedStopLoss.toString(),
                  positionIdx: 0,
                  tpTriggerBy: "MarkPrice",
                  slTriggerBy: "MarkPrice"
                });

                if (tpSlResponse.retCode === 0) {
                  logger.info(
                    `üõ°Ô∏è TP/SL —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã: –¢–ü=${expectedTakeProfit.toFixed(
                      1
                    )}, –°–õ=${expectedStopLoss.toFixed(1)}`
                  );

                  // –û–±–Ω–æ–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                  this.activePosition.plannedTakeProfit = expectedTakeProfit;
                  this.activePosition.plannedStopLoss = expectedStopLoss;

                  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
                  const correctionMessage = `üîß TP/SL –°–ö–û–†–†–ï–ö–¢–ò–†–û–í–ê–ù–´\n\nüéØ Take Profit: ${expectedTakeProfit.toFixed(
                    1
                  )}\nüö´ Stop Loss: ${expectedStopLoss.toFixed(
                    1
                  )}\n\n(–ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–æ –æ—Ç —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ ${entryPrice.toFixed(1)})`;
                  this.callbacks.onTradeOperation(correctionMessage);
                } else {
                  logger.error(
                    `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å TP/SL: ${tpSlResponse.retMsg}`
                  );
                }
              } catch (correctionError) {
                logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ TP/SL:", correctionError);
              }
            } else {
              logger.info("‚úÖ TP/SL –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è");
            }
          }

          // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
          this.startTrailingStopCheck();

          logger.info(
            "‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ø–æ–∑–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É—Å—ã–Ω–æ–≤–ª–µ–Ω–∞ –∏ —Ç—Ä–µ–π–ª–∏–Ω–≥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
          );
        } else {
          logger.info("‚úÖ –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∏—Å—Ç–æ–µ");
        }
      }
    } catch (error) {
      logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π:", error);
    }
  }

  private formatPositionAdoptedAlert(position: any): string {
    const side = position.side === "Buy" ? "–õ–û–ù–ì" : "–®–û–†–¢";
    const pnl = Number(position.unrealisedPnl);
    const pnlEmoji = pnl >= 0 ? "üìà" : "üìâ";
    const pnlText = pnl >= 0 ? `+${pnl.toFixed(2)}` : pnl.toFixed(2);

    let message = `üîÑ –ü–û–ó–ò–¶–ò–Ø –£–°–´–ù–û–í–õ–ï–ù–ê\n\n`;
    message += `üìä –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${side}\n`;
    message += `üí∞ –†–∞–∑–º–µ—Ä: ${position.size} BTC\n`;
    message += `üìà –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${position.avgPrice}\n`;
    message += `üíπ –¢–µ–∫—É—â–∞—è P&L: ${pnlEmoji} ${pnlText} USDT\n`;

    if (position.takeProfit && Number(position.takeProfit) > 0) {
      message += `üéØ Take Profit: ${position.takeProfit}\n`;
    }

    if (position.stopLoss && Number(position.stopLoss) > 0) {
      message += `üõ°Ô∏è Stop Loss: ${position.stopLoss}\n`;
    }

    message += `\n‚è±Ô∏è –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`;

    return message;
  }

  public checkVolumeSpike(
    completedCandle: Candle,
    previousCandle: Candle
  ): void {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–≤–µ—á–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—É—â–µ–π —Ñ–æ—Ä–º–∏—Ä—É—é—â–µ–π—Å—è
    const now = new Date();
    const candleTime = new Date(completedCandle.timestamp);
    const isCurrentHourCandle =
      candleTime.getUTCFullYear() === now.getUTCFullYear() &&
      candleTime.getUTCMonth() === now.getUTCMonth() &&
      candleTime.getUTCDate() === now.getUTCDate() &&
      candleTime.getUTCHours() === now.getUTCHours();

    if (isCurrentHourCandle) {
      logger.info(
        `‚è≥ –ü–†–û–ü–£–°–ö –ü–†–û–í–ï–†–ö–ò –û–ë–™–ï–ú–ê: –°–≤–µ—á–∞ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Å–∞ (${new Date(
          completedCandle.timestamp
        ).toLocaleTimeString()})`
      );
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–µ —Å–≤–µ—á–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã
    if (!completedCandle.confirmed || !previousCandle.confirmed) {
      logger.info(
        `‚è≥ –ü–†–û–ü–£–°–ö –ü–†–û–í–ï–†–ö–ò –û–ë–™–ï–ú–ê: –°–≤–µ—á–∏ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã (—Ç–µ–∫—É—â–∞—è: ${completedCandle.confirmed}, –ø—Ä–µ–¥—ã–¥—É—â–∞—è: ${previousCandle.confirmed})`
      );
      return;
    }

    const volumeRatio = completedCandle.volume / previousCandle.volume;

    if (this.activePosition) {
      const timeSinceEntry =
        completedCandle.timestamp - this.activePosition.entryTime;
      const isAnomalousVolume = completedCandle.volume > 8000;

      if (timeSinceEntry > 0 && isAnomalousVolume) {
        logger.info(
          `üö® –û–ë–ù–ê–†–£–ñ–ï–ù –ê–ù–û–ú–ê–õ–¨–ù–´–ô –û–ë–™–ï–ú –ü–û–°–õ–ï –í–•–û–î–ê! –û–±—ä–µ–º=${completedCandle.volume.toFixed(
            2
          )} > 7000 –ò —Ä–æ—Å—Ç –≤ ${volumeRatio.toFixed(2)}x —Ä–∞–∑`
        );
        this.closePosition(completedCandle, "–ê–Ω–æ–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞");
        return;
      } else if (timeSinceEntry > 0) {
        logger.info(
          `üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä–µ–º–∞ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞: –û–±—ä–µ–º=${completedCandle.volume.toFixed(
            2
          )} (–ø–æ—Ä–æ–≥ 7000), –ò–∑–º–µ–Ω–µ–Ω–∏–µ=${volumeRatio.toFixed(2)}x (–ø–æ—Ä–æ–≥ 2x)`
        );
      }
    }

    const isHighVolume = completedCandle.volume >= this.VOLUME_THRESHOLD;

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–µ—á—É –∫–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â—É—é
    if (
      this.currentSignal?.isActive &&
      this.currentSignal.waitingForLowerVolume
    ) {
      logger.info(
        `[TradingLogic] –¢–µ–∫—É—â–∞—è —Å–≤–µ—á–∞ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –∫–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∞—è –≤ processCompletedCandle`
      );
      return; // –í—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã processCompletedCandle –º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–≤–µ—á—É
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
    if (!this.currentSignal?.isActive && isHighVolume) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º "—Å–≤–µ–∂–µ—Å—Ç—å" —Å–∏–≥–Ω–∞–ª–∞ (–Ω–µ —Å—Ç–∞—Ä—à–µ 2 —á–∞—Å–æ–≤)
      const signalAge = Date.now() - completedCandle.timestamp;
      const TWO_HOURS = 2 * 60 * 60 * 1000;

      if (signalAge > TWO_HOURS) {
        logger.info(
          `üïí –ü–†–û–ü–£–°–ö –°–ò–ì–ù–ê–õ–ê: –°–≤–µ—á–∞ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è - –æ—Ç ${new Date(
            completedCandle.timestamp
          ).toLocaleTimeString()} (${Math.round(
            signalAge / (60 * 60 * 1000)
          )} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥)`
        );
        return;
      }

      let signalReason = "";
      if (isHighVolume) {
        signalReason = `–í–´–°–û–ö–ò–ô –û–ë–™–ï–ú (${completedCandle.volume.toFixed(
          2
        )}) –ò –í–°–ü–õ–ï–°–ö –û–ë–™–ï–ú–ê (${volumeRatio.toFixed(2)}x)`;
      } else {
        signalReason = `–í–´–°–û–ö–ò–ô –û–ë–™–ï–ú (${completedCandle.volume.toFixed(2)})`;
      }
      logger.info(`üö® –û–ë–ù–ê–†–£–ñ–ï–ù –°–ò–ì–ù–ê–õ: ${signalReason} –í –ó–ê–ö–†–´–¢–û–ô –°–í–ï–ß–ï!`);
      logger.info(`üí∞ –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: ${completedCandle.close}`);
      logger.info(`‚úÖ –°–≤–µ—á–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
      const now = Date.now();
      if (now - this.lastSignalNotificationTime > 60000) {
        const message = this.notificationService.formatVolumeAlert(
          completedCandle,
          previousCandle
        );
        this.callbacks.onSignalDetected(message);
        this.lastSignalNotificationTime = now;
      } else {
        logger.info("‚è≠Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∏–≥–Ω–∞–ª–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ (–∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞)");
      }

      this.currentSignal = {
        candle: completedCandle,
        isActive: true,
        waitingForLowerVolume: true
      };
      logger.info(
        `‚úÖ –°–∏–≥–Ω–∞–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –æ–∂–∏–¥–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å–≤–µ—á—É —Å –º–µ–Ω—å—à–∏–º –æ–±—ä–µ–º–æ–º`
      );
    } else if (
      this.currentSignal?.isActive &&
      completedCandle.volume > previousCandle.volume
    ) {
      logger.info(
        `üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–ò–ì–ù–ê–õ–ê: –ù–æ–≤–∞—è —Å–≤–µ—á–∞ —Å –µ—â–µ –±–æ–ª—å—à–∏–º –≤—Å–ø–ª–µ—Å–∫–æ–º –æ–±—ä–µ–º–∞ (${volumeRatio.toFixed(
          2
        )}x) –∏ –æ–±—ä–µ–º–æ–º –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞ (${completedCandle.volume.toFixed(2)} > ${
          this.VOLUME_THRESHOLD
        }).`
      );
      this.currentSignal = {
        candle: completedCandle,
        isActive: true,
        waitingForLowerVolume: true
      };
      logger.info(
        `‚úÖ –°–∏–≥–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å–≤–µ—á—É —Å –º–µ–Ω—å—à–∏–º –æ–±—ä–µ–º–æ–º`
      );
    } else if (completedCandle.volume >= this.VOLUME_THRESHOLD * 0.8) {
      logger.info(
        `üîç –ü–†–û–í–ï–†–ö–ê –û–ë–™–ï–ú–û–í –ó–ê–ö–†–´–¢–û–ô –°–í–ï–ß–ò (–±–ª–∏–∑–∫–æ –∫ —Å–∏–≥–Ω–∞–ª—É): –û–±—ä–µ–º ${completedCandle.volume.toFixed(
          2
        )}, –†–∞—Ç–∏–æ ${volumeRatio.toFixed(2)}x`
      );
    }
  }

  public async processCompletedCandle(
    completedCandle: Candle,
    candleHistory: Candle[]
  ): Promise<void> {
    logger.info(
      `[TradingLogic] processCompletedCandle –≤—ã–∑–≤–∞–Ω –¥–ª—è —Å–≤–µ—á–∏: ${new Date(
        completedCandle.timestamp
      ).toLocaleTimeString()}, V=${completedCandle.volume.toFixed(
        2
      )}, Confirmed: ${completedCandle.confirmed}`
    );

    if (
      !this.currentSignal?.isActive ||
      !this.currentSignal.waitingForLowerVolume
    ) {
      logger.info(
        "[TradingLogic] –°–∏–≥–Ω–∞–ª –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –Ω–µ –æ–∂–∏–¥–∞–µ–º —Å–≤–µ—á—É —Å –º–µ–Ω—å—à–∏–º –æ–±—ä–µ–º–æ–º. –í—ã—Ö–æ–¥."
      );
      return;
    }

    if (completedCandle.timestamp === this.currentSignal.candle.timestamp) {
      logger.info(
        "[TradingLogic] –ó–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Å–≤–µ—á–∞ —è–≤–ª—è–µ—Ç—Å—è —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º."
      );
      return;
    }

    logger.info(
      `[TradingLogic] –ò—â–µ–º —Å–∏–≥–Ω–∞–ª—å–Ω—É—é —Å–≤–µ—á—É (${new Date(
        this.currentSignal.candle.timestamp
      ).toLocaleTimeString()}) –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é (${new Date(
        completedCandle.timestamp
      ).toLocaleTimeString()}) –≤ –∏—Å—Ç–æ—Ä–∏–∏ (—Ä–∞–∑–º–µ—Ä: ${candleHistory.length})`
    );

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å–∏–≥–Ω–∞–ª—å–Ω—ã–µ —Å–≤–µ—á–∏ —Å —Ç–∞–∫–∏–º –∂–µ —Ç–∞–π–º—Å—Ç–∞–º–ø–æ–º
    const signalCandlesFromHistory = candleHistory.filter(
      c => c.timestamp === this.currentSignal!.candle.timestamp
    );

    // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–∑ –Ω–∏—Ö (—Å —Å–∞–º—ã–º –≤—ã—Å–æ–∫–∏–º –∏–Ω–¥–µ–∫—Å–æ–º)
    const signalCandleFromHistory =
      signalCandlesFromHistory[signalCandlesFromHistory.length - 1];

    if (signalCandlesFromHistory.length > 1) {
      logger.info(
        `üìä –ù–∞–π–¥–µ–Ω–æ ${signalCandlesFromHistory.length} —Å–∏–≥–Ω–∞–ª—å–Ω—ã—Ö —Å–≤–µ—á–µ–π —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º —Ç–∞–π–º—Å—Ç–∞–º–ø–æ–º. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é.`
      );
    }

    const completedCandleFromHistory = candleHistory.find(
      c => c.timestamp === completedCandle.timestamp
    );

    if (!signalCandleFromHistory || !completedCandleFromHistory) {
      logger.warn(
        "[TradingLogic] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–∏–≥–Ω–∞–ª—å–Ω—É—é –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Å–≤–µ—á—É –≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏."
      );
      // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è
      if (candleHistory.length < 10) {
        logger.debug(
          "[TradingLogic] –°–æ–¥–µ—Ä–∂–∏–º–æ–µ candleHistory:",
          JSON.stringify(
            candleHistory.map(c => ({
              t: new Date(c.timestamp).toLocaleTimeString(),
              v: c.volume,
              conf: c.confirmed
            }))
          )
        );
      }
      this.resetSignal(); // –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –∏–ª–∏ –∂–¥–∞—Ç—å –¥–∞–ª—å—à–µ
      return;
    }
    logger.info(
      `[TradingLogic] –°–∏–≥–Ω–∞–ª—å–Ω–∞—è —Å–≤–µ—á–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏: V=${signalCandleFromHistory.volume.toFixed(
        2
      )}. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Å–≤–µ—á–∞ –Ω–∞–π–¥–µ–Ω–∞: V=${completedCandleFromHistory.volume.toFixed(
        2
      )}`
    );

    if (completedCandle.volume <= this.currentSignal.candle.volume) {
      logger.info(
        `‚úÖ [TradingLogic] –£—Å–ª–æ–≤–∏–µ –æ–±—ä–µ–º–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: –æ–±—ä–µ–º —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏ (${completedCandle.volume.toFixed(
          2
        )}) <= –æ–±—ä–µ–º–∞ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π (${this.currentSignal.candle.volume.toFixed(
          2
        )})`
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–≤–µ—á–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—É—â–µ–π —Ñ–æ—Ä–º–∏—Ä—É—é—â–µ–π—Å—è
      const now = new Date();
      const candleTime = new Date(completedCandle.timestamp);
      const isCurrentHourCandle =
        candleTime.getUTCFullYear() === now.getUTCFullYear() &&
        candleTime.getUTCMonth() === now.getUTCMonth() &&
        candleTime.getUTCDate() === now.getUTCDate() &&
        candleTime.getUTCHours() === now.getUTCHours();

      if (isCurrentHourCandle) {
        logger.info(
          `‚è≥ [TradingLogic] –ù–∞–π–¥–µ–Ω–∞ —Å–≤–µ—á–∞ —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º –æ–±—ä–µ–º–æ–º, –Ω–æ —ç—Ç–æ —Å–≤–µ—á–∞ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Å–∞ (${new Date(
            completedCandle.timestamp
          ).toLocaleTimeString()}). –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–∞—Å–∞.`
        );
        return;
      }

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      if (!completedCandle.confirmed) {
        logger.info(
          `‚è≥ [TradingLogic] –ù–∞–π–¥–µ–Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∞—è —Å–≤–µ—á–∞ —Å –º–µ–Ω—å—à–∏–º –æ–±—ä–µ–º–æ–º, –Ω–æ –æ–Ω–∞ –µ—â–µ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è (${new Date(
            completedCandle.timestamp
          ).toLocaleTimeString()}). –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.`
        );
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º "—Å–≤–µ–∂–µ—Å—Ç—å" —Å–∏–≥–Ω–∞–ª–∞ –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º
      const signalAge = Date.now() - this.currentSignal.candle.timestamp;
      const TWO_HOURS = 2 * 60 * 60 * 1000;

      if (signalAge > TWO_HOURS) {
        logger.info(
          `üïí –ü–†–û–ü–£–°–ö –í–•–û–î–ê: –°–∏–≥–Ω–∞–ª—å–Ω–∞—è —Å–≤–µ—á–∞ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è - –æ—Ç ${new Date(
            this.currentSignal.candle.timestamp
          ).toLocaleTimeString()} (${Math.round(
            signalAge / (60 * 60 * 1000)
          )} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥)`
        );
        this.resetSignal();
        return;
      }

      logger.info(
        `‚úÖ [TradingLogic] –ù–∞–π–¥–µ–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è —Å–≤–µ—á–∞ —Å –º–µ–Ω—å—à–∏–º –æ–±—ä–µ–º–æ–º (${new Date(
          completedCandle.timestamp
        ).toLocaleTimeString()}). –í—Ö–æ–¥–∏–º –≤ –ø–æ–∑–∏—Ü–∏—é.`
      );

      await this.openPosition(this.currentSignal.candle, completedCandle);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —Å–∏–≥–Ω–∞–ª —Å–±—Ä–æ—à–µ–Ω –≤–æ –≤—Ä–µ–º—è openPosition
      if (this.currentSignal) {
        this.currentSignal.isActive = false;
        this.currentSignal.waitingForLowerVolume = false;
        logger.info("[TradingLogic] –°–∏–≥–Ω–∞–ª –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞.");
      }
    } else {
      logger.info(
        `‚ùå [TradingLogic] –£—Å–ª–æ–≤–∏–µ –¥–ª—è –≤—Ö–æ–¥–∞ –ù–ï –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: –æ–±—ä–µ–º —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏ (${completedCandle.volume.toFixed(
          2
        )}) > –æ–±—ä–µ–º–∞ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π (${this.currentSignal.candle.volume.toFixed(
          2
        )})`
      );
      logger.info(
        `üïØÔ∏è [TradingLogic] –û–∂–∏–¥–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å–≤–µ—á—É... –°–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º.`
      );
    }
  }

  private async openPosition(
    signalCandle: Candle,
    currentCandle: Candle
  ): Promise<void> {
    if (this.activePosition) {
      logger.warn(
        "‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–∑–∏—Ü–∏—é. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –±–∏—Ä–∂–µ..."
      );

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞ –±–∏—Ä–∂–µ
      const positionsResponse = await this.client.getPositionInfo({
        category: "linear",
        symbol: this.SYMBOL
      });

      if (positionsResponse.retCode === 0 && positionsResponse.result?.list) {
        const openPositions = positionsResponse.result.list.filter(
          pos => Number(pos.size) > 0
        );

        if (openPositions.length === 0) {
          logger.warn(
            "üîÑ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–°–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò: –ù–∞ –±–∏—Ä–∂–µ –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–π, –Ω–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é. –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ."
          );
          this.activePosition = null;
          this.stopTrailingStopCheck();
        } else {
          logger.warn(
            `üö´ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è –Ω–∞ –±–∏—Ä–∂–µ - —Ä–∞–∑–º–µ—Ä ${openPositions[0].size}, —Å—Ç–æ—Ä–æ–Ω–∞ ${openPositions[0].side}`
          );
          return;
        }
      }
    }

    if (this.isOpeningPosition) {
      logger.warn(
        "‚è≥ –£–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â—É—é –ø–æ–ø—ã—Ç–∫—É."
      );
      return;
    }

    this.isOpeningPosition = true;
    logger.info("üîí –ë–ª–æ–∫–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏");

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º "—Å–≤–µ–∂–µ—Å—Ç—å" —Å–∏–≥–Ω–∞–ª–∞ (–Ω–µ —Å—Ç–∞—Ä—à–µ 2 —á–∞—Å–æ–≤)
      const now = Date.now();
      const signalAge = now - signalCandle.timestamp;
      const TWO_HOURS = 2 * 60 * 60 * 1000;

      if (signalAge > TWO_HOURS) {
        logger.info(
          `üïí –°–ò–ì–ù–ê–õ –£–°–¢–ê–†–ï–õ: –°–∏–≥–Ω–∞–ª—å–Ω–∞—è —Å–≤–µ—á–∞ –æ—Ç ${new Date(
            signalCandle.timestamp
          ).toLocaleTimeString()} (${Math.round(
            signalAge / (60 * 60 * 1000)
          )} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥)`
        );
        this.resetSignal();
        this.isOpeningPosition = false;
        return;
      }

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ API - –Ω–µ—Ç –ª–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
      const positionsResponse = await this.client.getPositionInfo({
        category: "linear",
        symbol: this.SYMBOL
      });

      if (positionsResponse.retCode === 0 && positionsResponse.result?.list) {
        const openPositions = positionsResponse.result.list.filter(
          pos => Number(pos.size) > 0 // –ü–æ–∑–∏—Ü–∏—è —Å —Ä–∞–∑–º–µ—Ä–æ–º –±–æ–ª—å—à–µ 0 –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –æ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞
        );

        if (openPositions.length > 0) {
          logger.warn(
            `üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è —á–µ—Ä–µ–∑ API: —Ä–∞–∑–º–µ—Ä ${openPositions[0].size}, —Å—Ç–æ—Ä–æ–Ω–∞ ${openPositions[0].side}`
          );
          logger.warn(
            "–°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–¥–Ω—É —Å–¥–µ–ª–∫—É! –û—Ç–º–µ–Ω—è–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏."
          );

          // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º
          this.activePosition = {
            side: openPositions[0].side as any,
            entryPrice: Number(openPositions[0].avgPrice),
            entryTime: Date.now(), // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è
            isTrailingActive: false,
            lastTrailingStopPrice: null,
            orderId: "", // –£ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç orderId
            plannedTakeProfit: undefined,
            plannedStopLoss: undefined
          };

          return;
        }
      }
    } catch (error) {
      logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π:", error);
      this.isOpeningPosition = false;
      return; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –ø–æ–∑–∏—Ü–∏–∏
      const balanceResponse = await this.client.getWalletBalance({
        accountType: "UNIFIED"
      });

      // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–º CONTRACT —Å—á–µ—Ç –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤
      const contractBalanceResponse = await this.client.getWalletBalance({
        accountType: "CONTRACT"
      });

      // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–º SPOT —Å—á–µ—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      const spotBalanceResponse = await this.client.getWalletBalance({
        accountType: "SPOT"
      });

      logger.info(
        `üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ UNIFIED: ${JSON.stringify(balanceResponse.result)}`
      );
      logger.info(
        `üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ CONTRACT: ${JSON.stringify(
          contractBalanceResponse.result
        )}`
      );
      logger.info(
        `üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ SPOT: ${JSON.stringify(
          spotBalanceResponse.result
        )}`
      );

      // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∏–∑ –ª—é–±–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Å—á–µ—Ç–∞
      let usdtBalance = null;
      let accountType = "";

      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º CONTRACT
      if (
        contractBalanceResponse.retCode === 0 &&
        contractBalanceResponse.result?.list?.[0]?.coin
      ) {
        usdtBalance = contractBalanceResponse.result.list[0].coin.find(
          c => c.coin === "USDT"
        );
        accountType = "CONTRACT";
      }

      // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ CONTRACT, –ø—Ä–æ–≤–µ—Ä—è–µ–º UNIFIED
      if (
        !usdtBalance &&
        balanceResponse.retCode === 0 &&
        balanceResponse.result?.list?.[0]?.coin
      ) {
        usdtBalance = balanceResponse.result.list[0].coin.find(
          c => c.coin === "USDT"
        );
        accountType = "UNIFIED";
      }

      if (usdtBalance) {
        logger.info(`üí∞ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—á–µ—Ç: ${accountType}`);
        const availableBalance =
          accountType === "UNIFIED"
            ? Number(usdtBalance.walletBalance) // –î–ª—è UNIFIED –∏—Å–ø–æ–ª—å–∑—É–µ–º walletBalance
            : Number(usdtBalance.availableToWithdraw); // –î–ª—è –¥—Ä—É–≥–∏—Ö —Å—á–µ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º availableToWithdraw

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–µ—á–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –º–∞—Ä–∂–∏
        const instrumentResponse = await this.client.getInstrumentsInfo({
          category: "linear",
          symbol: this.SYMBOL
        });

        let requiredMargin = this.TRADE_SIZE_USD; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ–∑ –ø–ª–µ—á–∞

        if (
          instrumentResponse.retCode === 0 &&
          instrumentResponse.result?.list?.[0]
        ) {
          const leverage =
            Number(
              instrumentResponse.result.list[0].leverageFilter?.maxLeverage
            ) || 1;
          requiredMargin = this.TRADE_SIZE_USD / Math.min(leverage, 10); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º—É–º 10x –ø–ª–µ—á–æ

          logger.info(
            `üîß –î–æ—Å—Ç—É–ø–Ω–æ–µ –ø–ª–µ—á–æ: ${leverage}x, –ò—Å–ø–æ–ª–∑—É–µ–º: ${Math.min(
              leverage,
              10
            )}x`
          );
        }

        logger.info(
          `üí∞ –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å USDT: ${availableBalance.toFixed(
            2
          )}, –¢—Ä–µ–±—É–µ—Ç—Å—è –º–∞—Ä–∂–∏: ${requiredMargin.toFixed(2)} (—Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${
            this.TRADE_SIZE_USD
          })`
        );

        if (availableBalance < requiredMargin) {
          logger.error(
            `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –î–æ—Å—Ç—É–ø–Ω–æ: ${availableBalance.toFixed(
              2
            )} USDT, —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∞—Ä–∂–∏: ${requiredMargin.toFixed(2)} USDT`
          );
          this.isOpeningPosition = false;
          return;
        }
      } else {
        logger.warn("üí∏ –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –±–∞–ª–∞–Ω—Å USDT –Ω–∏ –Ω–∞ –æ–¥–Ω–æ–º –∏–∑ —Å—á–µ—Ç–æ–≤");
        this.isOpeningPosition = false;
        return;
      }

      const side: OrderSideV5 = signalCandle.isGreen ? "Sell" : "Buy";

      // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø –°–î–ï–õ–ö–ò –î–õ–Ø VSA
      logger.info(`üîç –ê–ù–ê–õ–ò–ó –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø –°–î–ï–õ–ö–ò (VSA –ª–æ–≥–∏–∫–∞):`);
      logger.info(
        `   ‚è∞ –í—Ä–µ–º—è —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π —Å–≤–µ—á–∏: ${new Date(
          signalCandle.timestamp
        ).toISOString()} (${new Date(
          signalCandle.timestamp
        ).toLocaleTimeString()})`
      );
      logger.info(
        `   üìä –°–∏–≥–Ω–∞–ª—å–Ω–∞—è —Å–≤–µ—á–∞: Open=${signalCandle.open} ‚Üí Close=${signalCandle.close}`
      );
      logger.info(
        `   üßÆ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞: ${signalCandle.close} ${
          signalCandle.close >= signalCandle.open ? ">=" : "<"
        } ${signalCandle.open} = ${
          signalCandle.close >= signalCandle.open ? "–ó–ï–õ–ï–ù–ê–Ø" : "–ö–†–ê–°–ù–ê–Ø"
        }`
      );
      logger.info(
        `   üé® –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ü–≤–µ—Ç: ${
          signalCandle.isGreen ? "üü¢ –ó–ï–õ–ï–ù–ê–Ø (—Ä–æ—Å—Ç)" : "üî¥ –ö–†–ê–°–ù–ê–Ø (–ø–∞–¥–µ–Ω–∏–µ)"
        }`
      );
      logger.info(
        `   üìà –û–±—ä–µ–º —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π —Å–≤–µ—á–∏: ${signalCandle.volume.toFixed(2)}`
      );
      logger.info(
        `   üí° VSA –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è: ${
          signalCandle.isGreen
            ? "–ó–µ–ª–µ–Ω–∞—è —Å–≤–µ—á–∞ —Å –≤—ã—Å–æ–∫–∏–º –æ–±—ä–µ–º–æ–º = –∏–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª—ã –ü–†–û–î–ê–Æ–¢ –Ω–∞ —Ä–æ—Å—Ç–µ ‚Üí –º—ã –ü–†–û–î–ê–ï–ú –Ω–∞ –æ—Ç–∫–∞—Ç–µ"
            : "–ö—Ä–∞—Å–Ω–∞—è —Å–≤–µ—á–∞ —Å –≤—ã—Å–æ–∫–∏–º –æ–±—ä–µ–º–æ–º = –∏–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª—ã –ü–û–ö–£–ü–ê–Æ–¢ –Ω–∞ –ø–∞–¥–µ–Ω–∏–∏ ‚Üí –º—ã –ü–û–ö–£–ü–ê–ï–ú –Ω–∞ –æ—Ç–∫–∞—Ç–µ"
        }`
      );
      logger.info(
        `   üéØ –í–´–ë–†–ê–ù–ù–û–ï –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï: ${side} ${
          side === "Buy" ? "(–õ–û–ù–ì)" : "(–®–û–†–¢)"
        }`
      );
      logger.info(
        `   ‚ö†Ô∏è  –ü–†–û–í–ï–†–¨–¢–ï: –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ${side} –≤–∞—à–∏–º –æ–∂–∏–¥–∞–Ω–∏—è–º –ø–æ VSA?`
      );

      // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ó–ê–©–ò–¢–ê: –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è VSA –ª–æ–≥–∏–∫–∏
      const vsaLogicCheck = this.verifyVSALogic(signalCandle, side);
      if (!vsaLogicCheck.isValid) {
        logger.error(`üö´ –û–®–ò–ë–ö–ê VSA –õ–û–ì–ò–ö–ò: ${vsaLogicCheck.error}`);
        logger.error(`üö´ –°–î–ï–õ–ö–ê –û–¢–ú–ï–ù–ï–ù–ê –î–õ–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò!`);
        this.isOpeningPosition = false;
        return;
      }
      logger.info(`‚úÖ VSA –ª–æ–≥–∏–∫–∞ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞: ${vsaLogicCheck.explanation}`);

      const stopLossLevel =
        side === "Buy"
          ? Math.min(signalCandle.low, currentCandle.low)
          : Math.max(signalCandle.high, currentCandle.high);

      const stopLoss =
        side === "Buy"
          ? stopLossLevel - this.STOP_LOSS_POINTS
          : stopLossLevel + this.STOP_LOSS_POINTS;

      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –æ—Ä–¥–µ—Ä–∞, –ø–æ—Ç–æ–º —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º TP –æ—Ç –Ω–µ—ë
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä—ã–Ω–æ—á–Ω—É—é —Ü–µ–Ω—É –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
      const tickerResponse = await this.client.getTickers({
        category: "linear",
        symbol: this.SYMBOL
      });

      let orderPrice = currentCandle.close; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ü–µ–Ω–∞ —Å–≤–µ—á–∏

      if (tickerResponse.retCode === 0 && tickerResponse.result?.list?.[0]) {
        const currentMarketPrice = Number(
          tickerResponse.result.list[0].lastPrice
        );
        // –õ–æ–≥–∏–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤:
        // Buy –Ω–∏–∂–µ —Ä—ã–Ω–∫–∞ - –∂–¥–µ—Ç —Å–Ω–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ –ª—É—á—à–µ–π —Ü–µ–Ω–µ
        // Sell –≤—ã—à–µ —Ä—ã–Ω–∫–∞ - –∂–¥–µ—Ç –ø–æ–≤—ã—à–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –ª—É—á—à–µ–π —Ü–µ–Ω–µ
        orderPrice =
          side === "Buy"
            ? currentMarketPrice - 5 // Buy –Ω–∏–∂–µ —Ä—ã–Ω–∫–∞ - —É–º–µ–Ω—å—à–∞–µ–º –æ—Ç—Å—Ç—É–ø –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
            : currentMarketPrice + 2; // Sell –≤—ã—à–µ —Ä—ã–Ω–∫–∞ - —É–º–µ–Ω—å—à–∞–µ–º –æ—Ç—Å—Ç—É–ø –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è

        logger.info(
          `üìä –†—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞: ${currentMarketPrice}, –¶–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞: ${orderPrice} (${
            side === "Buy" ? "-5" : "+2"
          } –ø—É–Ω–∫—Ç–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ª–∏–º–∏—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è)`
        );
      }

      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º TP –æ—Ç —Ü–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞, –∞ –Ω–µ –æ—Ç —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–∏
      const takeProfit =
        orderPrice +
        (side === "Buy" ? this.TAKE_PROFIT_POINTS : -this.TAKE_PROFIT_POINTS);

      const contractSize = (this.TRADE_SIZE_USD / currentCandle.close).toFixed(
        3
      );

      const orderPriceString = orderPrice.toString();

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ—á–æ –ø–µ—Ä–µ–¥ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º –æ—Ä–¥–µ—Ä–∞
      try {
        const leverageResponse = await this.client.setLeverage({
          category: "linear",
          symbol: this.SYMBOL,
          buyLeverage: "10",
          sellLeverage: "10"
        });

        if (leverageResponse.retCode === 0) {
          logger.info(`üîß –ü–ª–µ—á–æ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: 10x`);
        } else {
          logger.warn(
            `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–µ—á–æ: ${leverageResponse.retMsg} (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ)`
          );
        }
      } catch (leverageError) {
        logger.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–ª–µ—á–∞:`, leverageError);
      }

      logger.info(`üéØ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ (–õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä):`);
      logger.info(
        `üìà –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${side}, –¶–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞: ${orderPriceString}, –¢–ü: ${takeProfit}, –°–õ: ${stopLoss}`
      );
      logger.info(
        `üìä –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: ${contractSize} BTC (${this.TRADE_SIZE_USD} USD)`
      );

      // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–†–î–ï–†–ê –î–õ–Ø –í–´–Ø–í–õ–ï–ù–ò–Ø –ü–†–û–ë–õ–ï–ú
      const orderParams = {
        category: "linear" as const,
        symbol: this.SYMBOL,
        side: side,
        orderType: "Limit" as const,
        qty: contractSize,
        price: orderPriceString,
        timeInForce: "GTC" as const // Good Till Cancel - –æ—Ä–¥–µ—Ä –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º
      };

      logger.info(`üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–†–î–ï–†–ê:`);
      logger.info(
        `   üìã –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: ${JSON.stringify(orderParams, null, 2)}`
      );
      logger.info(
        `   üè¶ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${orderParams.category} (Linear/Perpetual —Ñ—å—é—á–µ—Ä—Å—ã)`
      );
      logger.info(`   ü™ô –°–∏–º–≤–æ–ª: ${orderParams.symbol}`);
      logger.info(
        `   ‚ÜóÔ∏è –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${orderParams.side} ${
          side === "Buy" ? "(–ü–û–ö–£–ü–ö–ê/–õ–û–ù–ì)" : "(–ü–†–û–î–ê–ñ–ê/–®–û–†–¢)"
        }`
      );
      logger.info(`   üìä –¢–∏–ø: ${orderParams.orderType} (–õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä)`);
      logger.info(`   üí∞ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${orderParams.qty} BTC`);
      logger.info(`   üíµ –¶–µ–Ω–∞: ${orderParams.price} USD`);
      logger.info(
        `   ‚è∞ Time In Force: ${orderParams.timeInForce} (–æ—Å—Ç–∞–µ—Ç—Å—è –¥–æ –æ—Ç–º–µ–Ω—ã)`
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–µ—Ä–µ–¥ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º –æ—Ä–¥–µ—Ä–∞
      try {
        const accountInfo = await this.client.getAccountInfo();
        logger.info(`üè¶ –¢–ò–ü –ê–ö–ö–ê–£–ù–¢–ê: ${JSON.stringify(accountInfo.result)}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
        const marginMode = await this.client.getSpotMarginState();
        logger.info(
          `‚öôÔ∏è –ú–ê–†–ñ–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ñ–ò–ú: ${JSON.stringify(marginMode.result)}`
        );
      } catch (accountError) {
        logger.warn(
          "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ:",
          accountError
        );
      }

      const response = await this.client.submitOrder(orderParams);

      logger.info(
        `üì° –û—Ç–≤–µ—Ç –æ—Ç API –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞: RetCode=${response.retCode}, RetMsg=${response.retMsg}, OrderId=${response.result?.orderId}`
      );

      if (
        response.retCode === 0 &&
        response.result &&
        response.result.orderId
      ) {
        logger.info(
          `‚úÖ –õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω (orderId: ${response.result.orderId}).`
        );

        // –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–ê–Ø –ü–û–ü–´–¢–ö–ê: –ï—Å–ª–∏ –æ—Ä–¥–µ—Ä –Ω–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±
        if (side === "Buy" && orderPrice < currentCandle.close) {
          logger.info(
            "üîÑ –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–ê–Ø –ü–û–ü–´–¢–ö–ê: –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏..."
          );

          try {
            const alternativeParams = {
              category: "linear" as const,
              symbol: this.SYMBOL,
              side: side,
              orderType: "Limit" as const,
              qty: contractSize,
              price: (currentCandle.close + 1).toString(), // –ß—É—Ç—å –≤—ã—à–µ —Ä—ã–Ω–∫–∞ –¥–ª—è Buy
              timeInForce: "GTC" as const,
              orderLinkId: `ALT_${Date.now()}`, // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
              positionIdx: 0 as const
            };

            const altResponse = await this.client.submitOrder(
              alternativeParams
            );
            logger.info(
              `üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –æ—Ä–¥–µ—Ä: RetCode=${altResponse.retCode}, OrderId=${altResponse.result?.orderId}`
            );
          } catch (altError) {
            logger.warn("‚ö†Ô∏è –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å:", altError);
          }
        }

        // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–¥–µ –∏–º–µ–Ω–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω –æ—Ä–¥–µ—Ä
        setTimeout(async () => {
          logger.info(
            "üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –†–ê–ó–ú–ï–©–ï–ù–ò–Ø –û–†–î–ï–†–ê: –ò—â–µ–º –æ—Ä–¥–µ—Ä –Ω–∞ –≤—Å–µ—Ö —Ç–∏–ø–∞—Ö —Å—á–µ—Ç–æ–≤..."
          );

          try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º Linear —Å—á–µ—Ç
            const linearOrders = await this.client.getActiveOrders({
              category: "linear",
              symbol: this.SYMBOL
            });
            logger.info(
              `üìã LINEAR –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞: ${linearOrders.result?.list?.length ||
                0}`
            );

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º Spot —Å—á–µ—Ç
            const spotOrders = await this.client.getActiveOrders({
              category: "spot",
              symbol: this.SYMBOL
            });
            logger.info(
              `üìã SPOT –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞: ${spotOrders.result?.list?.length || 0}`
            );

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º Option —Å—á–µ—Ç
            try {
              const optionOrders = await this.client.getActiveOrders({
                category: "option",
                symbol: this.SYMBOL
              });
              logger.info(
                `üìã OPTION –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞: ${optionOrders.result?.list
                  ?.length || 0}`
              );
            } catch (optionError) {
              logger.info(`üìã OPTION —Å—á–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${optionError}`);
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –ø–æ ID
            const specificOrder = await this.client.getActiveOrders({
              category: "linear",
              symbol: this.SYMBOL,
              orderId: response.result.orderId
            });

            if (specificOrder.result?.list?.[0]) {
              const order = specificOrder.result.list[0];
              logger.info(
                `üéØ –ù–ê–ô–î–ï–ù –û–†–î–ï–†: –°—Ç–∞—Ç—É—Å=${order.orderStatus}, –¶–µ–Ω–∞=${order.price}, –†–∞–∑–º–µ—Ä=${order.qty}`
              );
              logger.info(
                `üéØ –î–µ—Ç–∞–ª–∏: timeInForce=${order.timeInForce}, triggerBy=${order.triggerBy}, orderLinkId=${order.orderLinkId}`
              );
            } else {
              logger.warn(
                `‚ùå –û–†–î–ï–† –ù–ï –ù–ê–ô–î–ï–ù –ø–æ ID ${response.result.orderId} –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–∞—Ö!`
              );
            }
          } catch (diagError) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞:", diagError);
          }
        }, 2000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã

        this.activePosition = {
          side: side,
          entryPrice: currentCandle.close,
          entryTime: currentCandle.timestamp,
          isTrailingActive: false,
          lastTrailingStopPrice: null,
          orderId: response.result.orderId,
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º TP/SL –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
          plannedTakeProfit: takeProfit,
          plannedStopLoss: stopLoss,
          executionNotificationSent: false // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–ª–∞–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        };

        // TP/SL –±—É–¥—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ü–û–°–õ–ï –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
        logger.info(
          `üìù TP/SL –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã: –¢–ü=${takeProfit.toFixed(
            1
          )}, –°–õ=${stopLoss.toFixed(1)} (—É—Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è)`
        );

        const message = this.notificationService.formatOrderPlacedAlert(
          this.activePosition,
          takeProfit,
          stopLoss,
          signalCandle,
          currentCandle,
          orderPrice
        );
        this.callbacks.onTradeOperation(message);
        logger.info(
          `‚úÖ –õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è...`
        );

        // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
        setTimeout(async () => {
          await this.checkOrderExecution();
        }, 1000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ 1 —Å–µ–∫

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–µ–∫ API
        setTimeout(async () => {
          logger.info("üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞ (30 —Å–µ–∫)");
          await this.checkOrderExecution();
        }, 30000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ 30 —Å–µ–∫

        setTimeout(async () => {
          logger.info("üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞ (2 –º–∏–Ω)");
          await this.checkOrderExecution();
        }, 120000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ 2 –º–∏–Ω

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
        this.startTrailingStopCheck();
      } else {
        logger.error(
          `‚ùå –õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–µ –±—ã–ª —Ä–∞–∑–º–µ—â–µ–Ω. –ö–æ–¥: ${response.retCode}, —Å–æ–æ–±—â–µ–Ω–∏–µ: ${response.retMsg}`
        );
        if (response.retCode === 110007) {
          logger.error(
            `üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á–µ—Ç –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ TRADE_SIZE_USD –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö`
          );
        }
      }
    } catch (error) {
      logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞:", error);
    } finally {
      this.isOpeningPosition = false;
      logger.info("üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ñ–ª–∞–≥–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏");
    }
  }

  public async closePosition(
    triggeringCandle: Candle,
    reason: string
  ): Promise<void> {
    if (!this.activePosition) return;

    const positionToClose = { ...this.activePosition };
    this.activePosition = null;
    this.stopTrailingStopCheck();

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–∏–≥–Ω–∞–ª —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∏—Å–∫–∞—Ç—å –Ω–æ–≤—ã–µ
    this.resetSignal();
    logger.info(
      "üîÑ –°–∏–≥–Ω–∞–ª —Å–±—Ä–æ—à–µ–Ω –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ - —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å –Ω–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã"
    );

    try {
      const closeSide: OrderSideV5 =
        positionToClose.side === "Buy" ? "Sell" : "Buy";
      const contractSize = (
        this.TRADE_SIZE_USD / positionToClose.entryPrice
      ).toFixed(3);

      logger.info(`üéØ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ (–õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä): ${reason}`);
      logger.info(
        `üìà –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è: ${closeSide}, –†–∞–∑–º–µ—Ä: ${contractSize}`
      );

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä—ã–Ω–æ—á–Ω—É—é —Ü–µ–Ω—É –¥–ª—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
      const tickerResponse = await this.client.getTickers({
        category: "linear",
        symbol: this.SYMBOL
      });

      let closePrice = triggeringCandle.close; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ü–µ–Ω–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞

      if (tickerResponse.retCode === 0 && tickerResponse.result?.list?.[0]) {
        const currentMarketPrice = Number(
          tickerResponse.result.list[0].lastPrice
        );

        // –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ –≤ –Ω–∞—à—É –ø–æ–ª—å–∑—É
        // –ï—Å–ª–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ª–æ–Ω–≥ (–ø—Ä–æ–¥–∞–µ–º) - —Å—Ç–∞–≤–∏–º —Ü–µ–Ω—É –Ω–µ–º–Ω–æ–≥–æ –Ω–∏–∂–µ —Ä—ã–Ω–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
        // –ï—Å–ª–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —à–æ—Ä—Ç (–ø–æ–∫—É–ø–∞–µ–º) - —Å—Ç–∞–≤–∏–º —Ü–µ–Ω—É –Ω–µ–º–Ω–æ–≥–æ –≤—ã—à–µ —Ä—ã–Ω–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
        const slippagePoints = 25; // –ü—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
        closePrice =
          closeSide === "Sell"
            ? currentMarketPrice - slippagePoints // –ü—Ä–æ–¥–∞–µ–º –Ω–∏–∂–µ —Ä—ã–Ω–∫–∞
            : currentMarketPrice + slippagePoints; // –ü–æ–∫—É–ø–∞–µ–º –≤—ã—à–µ —Ä—ã–Ω–∫–∞

        logger.info(
          `üìä –†—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞: ${currentMarketPrice}, –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: ${closePrice} (${
            closeSide === "Sell" ? "-" : "+"
          }${slippagePoints} –ø—É–Ω–∫—Ç–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è)`
        );
      }

      const response = await this.client.submitOrder({
        category: "linear",
        symbol: this.SYMBOL,
        side: closeSide,
        orderType: "Limit",
        qty: contractSize,
        price: closePrice.toString(),
        timeInForce: "IOC", // Immediate or Cancel –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
        reduceOnly: true
      });

      logger.info(
        `üì° –û—Ç–≤–µ—Ç –æ—Ç API –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: RetCode=${response.retCode}, RetMsg=${response.retMsg}`
      );

      if (response.retCode === 0) {
        logger.info(`‚úÖ –ü–æ–∑–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞ –ª–∏–º–∏—Ç–Ω—ã–º –æ—Ä–¥–µ—Ä–æ–º.`);
        const message = this.notificationService.formatTradeCloseAlert(
          positionToClose,
          triggeringCandle.close,
          reason
        );
        this.callbacks.onTradeOperation(message);
      } else {
        logger.error(
          `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ –ª–∏–º–∏—Ç–Ω—ã–º –æ—Ä–¥–µ—Ä–æ–º. –ö–æ–¥: ${response.retCode}, —Å–æ–æ–±—â–µ–Ω–∏–µ: ${response.retMsg}. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–∑–∏—Ü–∏—è —É–∂–µ –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞.`
        );
      }
    } catch (error) {
      logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏:", error);
    }
  }

  private startTrailingStopCheck(): void {
    this.stopTrailingStopCheck();

    this.trailingStopInterval = setInterval(async () => {
      await this.updateTrailingStop();
    }, this.TRAILING_STOP_INTERVAL_MS);
    logger.info(
      `‚è±Ô∏è –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º ${this
        .TRAILING_STOP_INTERVAL_MS / 1000} —Å–µ–∫.`
    );
  }

  private stopTrailingStopCheck(): void {
    if (this.trailingStopInterval) {
      clearInterval(this.trailingStopInterval);
      this.trailingStopInterval = null;
      logger.info("‚è±Ô∏è –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.");
    }
  }

  private async updateTrailingStop(): Promise<void> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø–æ–∑–∏—Ü–∏–π
    const isSynced = await this.checkPositionSync();
    if (!isSynced || !this.activePosition) {
      return;
    }

    // –í–ê–ñ–ù–û: –ï—Å–ª–∏ –µ—Å—Ç—å orderId, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å–ø–æ–ª–Ω–∏–ª—Å—è –ª–∏ –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä
    if (
      this.activePosition &&
      this.activePosition.orderId &&
      !this.activePosition.isTrailingActive
    ) {
      const orderFilled = await this.checkOrderExecution();
      if (!orderFilled) {
        // –û—Ä–¥–µ—Ä –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª–Ω–∏–ª—Å—è - —Ç—Ä–µ–π–ª–∏–Ω–≥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        // –ù–ï –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        return;
      }
    }

    if (!this.activePosition) {
      this.stopTrailingStopCheck();
      return;
    }

    try {
      const response = await this.client.getTickers({
        category: "linear",
        symbol: this.SYMBOL
      });

      if (
        response.retCode === 0 &&
        response.result.list &&
        response.result.list[0]
      ) {
        const currentPrice = Number(response.result.list[0].lastPrice);
        const entryPrice = this.activePosition.entryPrice;
        const side = this.activePosition.side;

        const profitPoints =
          side === "Buy"
            ? currentPrice - entryPrice
            : entryPrice - currentPrice;

        // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
        const shouldLog =
          !this.lastTrailingLogTime ||
          Date.now() - this.lastTrailingLogTime > 30000;

        if (shouldLog) {
          logger.info(
            `üìä –¢–†–ï–ô–õ–ò–ù–ì –ê–ù–ê–õ–ò–ó: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞=${currentPrice}, –í—Ö–æ–¥=${entryPrice}, –ü—Ä–∏–±—ã–ª—å=${profitPoints.toFixed(
              1
            )} –ø—É–Ω–∫—Ç–æ–≤, –ê–∫—Ç–∏–≤–∞—Ü–∏—è=${this.TRAILING_ACTIVATION_POINTS}`
          );
          this.lastTrailingLogTime = Date.now();
        }

        if (profitPoints >= this.TRAILING_ACTIVATION_POINTS) {
          const newStopPrice =
            side === "Buy"
              ? currentPrice - this.TRAILING_DISTANCE
              : currentPrice + this.TRAILING_DISTANCE;

          const shouldUpdate =
            !this.activePosition.isTrailingActive ||
            (side === "Buy" &&
              newStopPrice >
                (this.activePosition.lastTrailingStopPrice || 0)) ||
            (side === "Sell" &&
              newStopPrice <
                (this.activePosition.lastTrailingStopPrice || Infinity));

          if (shouldLog || shouldUpdate) {
            logger.info(
              `üéØ –¢–†–ï–ô–õ–ò–ù–ì –£–°–õ–û–í–ò–ï: –ù–æ–≤—ã–π —Å—Ç–æ–ø=${newStopPrice.toFixed(
                1
              )}, –¢–µ–∫—É—â–∏–π=${
                this.activePosition.lastTrailingStopPrice
              }, –ù—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å=${shouldUpdate}`
            );
          }

          if (shouldUpdate) {
            let tpSlParams: any = {
              category: "linear",
              symbol: this.SYMBOL,
              stopLoss: newStopPrice.toString(),
              slTriggerBy: "MarkPrice",
              positionIdx: 0
            };

            if (!this.activePosition.isTrailingActive) {
              logger.info("üöÄ –ê–ö–¢–ò–í–ê–¶–ò–Ø –¢–†–ï–ô–õ–ò–ù–ì-–°–¢–û–ü–ê!");
              this.callbacks.onTradeOperation(
                this.notificationService.formatTrailingStopActivation()
              );
              // –£–±–∏—Ä–∞–µ–º takeProfit –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç—Ä–µ–π–ª–∏–Ω–≥–∞
              tpSlParams.takeProfit = "0";
              tpSlParams.tpTriggerBy = "MarkPrice";
              this.activePosition.isTrailingActive = true;
            }

            const tpSlResponse = await this.client.setTradingStop(tpSlParams);

            if (tpSlResponse.retCode === 0) {
              this.activePosition.lastTrailingStopPrice = newStopPrice;

              const updateMessage = this.notificationService.formatTrailingStopUpdate(
                newStopPrice,
                this.TRAILING_DISTANCE,
                currentPrice
              );
              logger.info(updateMessage);

              // –õ–û–ì–ò–ö–ê –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –û –¢–†–ï–ô–õ–ò–ù–ì–ï
              const now = Date.now();
              const timeSinceLastNotification =
                now - this.lastTrailingNotificationTime;
              const stopPriceChange = Math.abs(
                newStopPrice - this.lastTrailingStopPrice
              );

              const shouldNotify =
                !this.activePosition.isTrailingActive || // –ü–µ—Ä–≤–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ç—Ä–µ–π–ª–∏–Ω–≥–∞
                timeSinceLastNotification > 300000 || // –ü—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 5 –º–∏–Ω—É—Ç
                stopPriceChange > 100; // –°—Ç–æ–ø –ø–µ—Ä–µ–¥–≤–∏–Ω—É–ª—Å—è –±–æ–ª—å—à–µ —á–µ–º –Ω–∞ 100 –ø—É–Ω–∫—Ç–æ–≤

              if (shouldNotify) {
                this.callbacks.onTradeOperation(updateMessage);
                this.lastTrailingNotificationTime = now;
                this.lastTrailingStopPrice = newStopPrice;
                logger.info("üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç—Ä–µ–π–ª–∏–Ω–≥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
              } else {
                logger.info(
                  `üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç—Ä–µ–π–ª–∏–Ω–≥–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ (${Math.round(
                    timeSinceLastNotification / 1000
                  )} —Å–µ–∫ –Ω–∞–∑–∞–¥, –∏–∑–º–µ–Ω–µ–Ω–∏–µ ${stopPriceChange.toFixed(
                    1
                  )} –ø—É–Ω–∫—Ç–æ–≤)`
                );
              }
            } else {
              logger.error(
                `‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞: ${tpSlResponse.retMsg}`
              );
            }
          }
        } else {
          if (shouldLog) {
            logger.info(
              `‚è≥ –¢–†–ï–ô–õ–ò–ù–ì –û–ñ–ò–î–ê–ù–ò–ï: –ü—Ä–∏–±—ã–ª—å ${profitPoints.toFixed(1)} < ${
                this.TRAILING_ACTIVATION_POINTS
              } –ø—É–Ω–∫—Ç–æ–≤ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏`
            );
          }
        }
      }
    } catch (error) {
      logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞:", error);
    }
  }

  private async checkOrderExecution(): Promise<boolean> {
    if (!this.activePosition?.orderId) {
      return false;
    }

    try {
      const orderPlacedTime = this.activePosition.entryTime;
      const timeSinceOrder = Math.round((Date.now() - orderPlacedTime) / 1000);

      logger.info(
        `‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞ ${this.activePosition.orderId} (${timeSinceOrder} —Å–µ–∫ –Ω–∞–∑–∞–¥)`
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞
      const orderResponse = await this.client.getActiveOrders({
        category: "linear",
        symbol: this.SYMBOL,
        orderId: this.activePosition.orderId
      });

      logger.info(
        `üì° –û—Ç–≤–µ—Ç API –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä–¥–µ—Ä–∞: RetCode=${
          orderResponse.retCode
        }, Found=${orderResponse.result?.list?.length || 0} –æ—Ä–¥–µ—Ä–æ–≤`
      );

      if (orderResponse.retCode === 0 && orderResponse.result?.list?.[0]) {
        const order = orderResponse.result.list[0];

        logger.info(
          `üìä –°—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞: ${order.orderStatus}, –†–∞–∑–º–µ—Ä: ${
            order.qty
          }, –ò—Å–ø–æ–ª–Ω–µ–Ω–æ: ${order.cumExecQty || 0}`
        );

        if (order.orderStatus === "Filled") {
          logger.info(
            `‚úÖ –õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω! –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${order.avgPrice}`
          );

          // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏
          this.activePosition.entryPrice = Number(order.avgPrice);
          this.activePosition.entryTime = Number(order.updatedTime);

          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ TP/SL —Ç–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ –ø–æ–∑–∏—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞
          if (
            this.activePosition.plannedTakeProfit &&
            this.activePosition.plannedStopLoss
          ) {
            try {
              const tpSlResponse = await this.client.setTradingStop({
                category: "linear",
                symbol: this.SYMBOL,
                takeProfit: this.activePosition.plannedTakeProfit.toString(),
                stopLoss: this.activePosition.plannedStopLoss.toString(),
                positionIdx: 0,
                tpTriggerBy: "MarkPrice",
                slTriggerBy: "MarkPrice"
              });

              if (tpSlResponse.retCode === 0) {
                logger.info(
                  `üõ°Ô∏è TP/SL —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: –¢–ü=${this.activePosition.plannedTakeProfit.toFixed(
                    1
                  )}, –°–õ=${this.activePosition.plannedStopLoss.toFixed(1)}`
                );
              } else {
                logger.warn(
                  `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TP/SL: ${tpSlResponse.retMsg}`
                );
              }
            } catch (tpSlError) {
              logger.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ TP/SL:", tpSlError);
            }
          }

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∞–ª—å–Ω–æ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞ –¢–û–õ–¨–ö–û –û–î–ò–ù –†–ê–ó
          if (!this.activePosition.executionNotificationSent) {
            const message = this.notificationService.formatOrderExecutedAlert(
              this.activePosition,
              Number(order.avgPrice)
            );
            this.callbacks.onTradeOperation(message);
            this.activePosition.executionNotificationSent = true; // –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            logger.info("üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
          } else {
            logger.info(
              "üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ"
            );
          }

          // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø —Ç–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ –ø–æ–∑–∏—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞
          this.startTrailingStopCheck();

          return true;
        } else {
          logger.info(
            `‚è≥ –û—Ä–¥–µ—Ä –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª–Ω–µ–Ω. –°—Ç–∞—Ç—É—Å: ${order.orderStatus} (${timeSinceOrder} —Å–µ–∫ –æ–∂–∏–¥–∞–Ω–∏—è)`
          );
          return false;
        }
      } else if (
        orderResponse.retCode === 0 &&
        (!orderResponse.result?.list || orderResponse.result.list.length === 0)
      ) {
        // –û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö - –≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ –∏—Å–ø–æ–ª–Ω–µ–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω
        logger.warn(
          `‚ö†Ô∏è –û—Ä–¥–µ—Ä ${this.activePosition.orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–∞—Ö —á–µ—Ä–µ–∑ ${timeSinceOrder} —Å–µ–∫. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é...`
        );

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ä–¥–µ—Ä–æ–≤
        const historyResponse = await this.client.getHistoricOrders({
          category: "linear",
          symbol: this.SYMBOL,
          orderId: this.activePosition.orderId
        });

        if (
          historyResponse.retCode === 0 &&
          historyResponse.result?.list?.[0]
        ) {
          const historicOrder = historyResponse.result.list[0];
          logger.info(
            `üìö –ù–∞–π–¥–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏–∏: –°—Ç–∞—Ç—É—Å=${historicOrder.orderStatus}, –ò—Å–ø–æ–ª–Ω–µ–Ω–æ=${historicOrder.cumExecQty}`
          );

          if (historicOrder.orderStatus === "Filled") {
            logger.info("‚úÖ –û—Ä–¥–µ—Ä –±—ã–ª –∏—Å–ø–æ–ª–Ω–µ–Ω (–Ω–∞–π–¥–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏–∏)");
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –æ—Ä–¥–µ—Ä
            this.activePosition.entryPrice = Number(
              historicOrder.avgPrice || historicOrder.price
            );
            this.activePosition.entryTime = Number(historicOrder.updatedTime);
            return true;
          }
        }

        return false;
      }

      return false;
    } catch (error) {
      logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞:", error);
      return false;
    }
  }

  private verifyVSALogic(
    signalCandle: Candle,
    side: OrderSideV5
  ): { isValid: boolean; explanation: string; error?: string } {
    // VSA –ª–æ–≥–∏–∫–∞:
    // 1. –ó–µ–ª–µ–Ω–∞—è —Å–≤–µ—á–∞ (—Ä–æ—Å—Ç) —Å –≤—ã—Å–æ–∫–∏–º –æ–±—ä–µ–º–æ–º = –∏–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª—ã –ø—Ä–æ–¥–∞—é—Ç ‚Üí –º—ã –ø—Ä–æ–¥–∞–µ–º (Sell/Short)
    // 2. –ö—Ä–∞—Å–Ω–∞—è —Å–≤–µ—á–∞ (–ø–∞–¥–µ–Ω–∏–µ) —Å –≤—ã—Å–æ–∫–∏–º –æ–±—ä–µ–º–æ–º = –∏–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª—ã –ø–æ–∫—É–ø–∞—é—Ç ‚Üí –º—ã –ø–æ–∫—É–ø–∞–µ–º (Buy/Long)

    const candleDirection = signalCandle.isGreen
      ? "–∑–µ–ª–µ–Ω–∞—è (—Ä–æ—Å—Ç)"
      : "–∫—Ä–∞—Å–Ω–∞—è (–ø–∞–¥–µ–Ω–∏–µ)";
    const expectedSide = signalCandle.isGreen ? "Sell" : "Buy";
    const expectedAction = signalCandle.isGreen
      ? "–®–û–†–¢ (–ø—Ä–æ–¥–∞–∂–∞)"
      : "–õ–û–ù–ì (–ø–æ–∫—É–ø–∫–∞)";

    if (side !== expectedSide) {
      return {
        isValid: false,
        explanation: `–û—à–∏–±–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${candleDirection} —Å–≤–µ—á–∞ —Ç—Ä–µ–±—É–µ—Ç ${expectedAction}`,
        error: `–°–∏–≥–Ω–∞–ª—å–Ω–∞—è —Å–≤–µ—á–∞ ${candleDirection}, –æ–∂–∏–¥–∞–µ—Ç—Å—è ${expectedAction}, –Ω–æ –≤—ã–±—Ä–∞–Ω–æ ${side}`
      };
    }

    return {
      isValid: true,
      explanation: `–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ: ${candleDirection} —Å–≤–µ—á–∞ ‚Üí ${expectedAction} (${side})`
    };
  }

  private async checkPositionSync(): Promise<boolean> {
    if (!this.activePosition) {
      return true; // –ù–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ø–æ–∑–∏—Ü–∏–∏ - –û–ö
    }

    // –í–ê–ñ–ù–û: –ï—Å–ª–∏ –µ—Å—Ç—å orderId, –∑–Ω–∞—á–∏—Ç –æ—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω –Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª–Ω–µ–Ω
    // –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ —Ä–µ–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –±–∏—Ä–∂–µ –º–æ–∂–µ—Ç –µ—â–µ –Ω–µ –±—ã—Ç—å
    if (this.activePosition.orderId) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞
        const orderResponse = await this.client.getActiveOrders({
          category: "linear",
          symbol: this.SYMBOL,
          orderId: this.activePosition.orderId
        });

        if (orderResponse.retCode === 0 && orderResponse.result?.list?.[0]) {
          const order = orderResponse.result.list[0];
          if (
            order.orderStatus === "New" ||
            order.orderStatus === "PartiallyFilled"
          ) {
            // –û—Ä–¥–µ—Ä –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ —á—Ç–æ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç –Ω–∞ –±–∏—Ä–∂–µ
            return true;
          }
        }
      } catch (orderError) {
        logger.warn(
          "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞ –≤ checkPositionSync:",
          orderError
        );
      }
    }

    try {
      const positionsResponse = await this.client.getPositionInfo({
        category: "linear",
        symbol: this.SYMBOL
      });

      if (positionsResponse.retCode === 0 && positionsResponse.result?.list) {
        const openPositions = positionsResponse.result.list.filter(
          pos => Number(pos.size) > 0
        );

        if (openPositions.length === 0) {
          // –ü–æ–∑–∏—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ –±–∏—Ä–∂–µ
          // –ù–æ –ø—Ä–æ–≤–µ—Ä–∏–º - –º–æ–∂–µ—Ç —ç—Ç–æ –ø–æ—Ç–æ–º—É —á—Ç–æ –æ—Ä–¥–µ—Ä –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª–Ω–µ–Ω?
          if (this.activePosition.orderId) {
            logger.info(
              "üîç –ü–†–û–í–ï–†–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò: –ü–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç –Ω–∞ –±–∏—Ä–∂–µ, –Ω–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ä–¥–µ—Ä. –í–æ–∑–º–æ–∂–Ω–æ –æ—Ä–¥–µ—Ä –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª–Ω–µ–Ω."
            );
            return true; // –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é - –∂–¥–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
          }

          logger.info(
            "üîÑ –†–£–ß–ù–û–ï/–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ó–ê–ö–†–´–¢–ò–ï –û–ë–ù–ê–†–£–ñ–ï–ù–û: –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ (TP/SL –∏–ª–∏ –≤—Ä—É—á–Ω—É—é), –æ–±–Ω–æ–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"
          );

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
          const closedPosition = { ...this.activePosition };
          this.activePosition = null;
          this.stopTrailingStopCheck();

          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–∏–≥–Ω–∞–ª —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∏—Å–∫–∞—Ç—å –Ω–æ–≤—ã–µ
          this.resetSignal();
          logger.info("üîÑ –°–∏–≥–Ω–∞–ª —Å–±—Ä–æ—à–µ–Ω - —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å –Ω–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã");

          // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä—ã–Ω–æ—á–Ω—É—é —Ü–µ–Ω—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ P&L
          try {
            const tickerResponse = await this.client.getTickers({
              category: "linear",
              symbol: this.SYMBOL
            });

            let closePrice = closedPosition.entryPrice; // Fallback
            if (
              tickerResponse.retCode === 0 &&
              tickerResponse.result?.list?.[0]
            ) {
              closePrice = Number(tickerResponse.result.list[0].lastPrice);
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏
            const closeMessage = this.notificationService.formatTradeCloseAlert(
              closedPosition,
              closePrice,
              "Take Profit, Stop Loss –∏–ª–∏ —Ä—É—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ"
            );
            this.callbacks.onTradeOperation(closeMessage);
          } catch (priceError) {
            logger.warn(
              "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫—Ä—ã—Ç–∏–∏:",
              priceError
            );
            // Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é
            const closeMessage =
              "üîî –ü–û–ó–ò–¶–ò–Ø –ó–ê–ö–†–´–¢–ê\n\n–ü–æ–∑–∏—Ü–∏—è –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞ (Take Profit, Stop Loss –∏–ª–∏ –≤—Ä—É—á–Ω—É—é)";
            this.callbacks.onTradeOperation(closeMessage);
          }

          return false; // –ü–æ–∑–∏—Ü–∏—è –±—ã–ª–∞ —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
        }
      }
    } catch (syncError) {
      logger.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–π:", syncError);
    }

    return true; // –ü–æ–∑–∏—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
  }
}
