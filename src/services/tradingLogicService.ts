import {
  RestClientV5,
  OrderSideV5,
  LinearInverseInstrumentInfoV5
} from "bybit-api";
import { Candle, VolumeSignal, ActivePosition } from "./bybit.types";
import { NotificationService } from "./notificationService";
import { logger } from "../utils/logger";

export interface TradingLogicCallbacks {
  onTradeOperation: (message: string) => void;
  onSignalDetected: (message: string) => void;
}

export interface TradingLogicOptions {
  symbol: string;
  tradeSizeUsd: number;
  takeProfitPoints: number;
  stopLossPoints: number;
  trailingActivationPoints: number;
  trailingDistance: number;
  volumeThreshold: number;
  useTrailingStop: boolean;
}

export class TradingLogicService {
  private currentSignal: VolumeSignal | null = null;
  private candleHistory: Candle[] = [];
  private readonly usedSignalTimestamps: Set<number> = new Set();
  private activePosition: ActivePosition | null = null;
  private trailingStopCheckInterval: NodeJS.Timeout | null = null;
  private isOpeningPosition: boolean = false;
  private lastSignalNotificationTime: number = 0;
  private lastRestCheckTime: number = 0;
  private readonly REST_CHECK_INTERVAL = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
  private hasInitialSync = false;
  private lastPositionOpenTime: number = 0;

  private readonly TAKE_PROFIT_POINTS: number;
  private readonly STOP_LOSS_POINTS: number;
  private readonly TRAILING_ACTIVATION_POINTS: number;
  private readonly TRAILING_DISTANCE: number;
  private readonly VOLUME_THRESHOLD: number;
  private readonly TRADE_SIZE_USD: number;
  private readonly SYMBOL: string;
  private readonly LEVERAGE: number = 25;
  private readonly TRAILING_STOP_INTERVAL_MS = 60000;
  private readonly USE_TRAILING_STOP: boolean;

  constructor(
    private client: RestClientV5,
    private notificationService: NotificationService,
    private callbacks: TradingLogicCallbacks,
    options: TradingLogicOptions
  ) {
    this.SYMBOL = options.symbol;
    this.TRADE_SIZE_USD = options.tradeSizeUsd;
    this.TAKE_PROFIT_POINTS = options.takeProfitPoints;
    this.STOP_LOSS_POINTS = options.stopLossPoints;
    this.TRAILING_ACTIVATION_POINTS = options.trailingActivationPoints;
    this.TRAILING_DISTANCE = options.trailingDistance;
    this.VOLUME_THRESHOLD = options.volumeThreshold;
    this.USE_TRAILING_STOP = options.useTrailingStop;
  }

  public getActivePosition(): ActivePosition | null {
    return this.activePosition;
  }

  public getCurrentSignal(): VolumeSignal | null {
    return this.currentSignal;
  }

  public resetSignal(): void {
    if (this.currentSignal) {
      // –ù–∞ —á–∞—Å–æ–≤–æ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
      // this.lastSignalCandleTimestamp = this.currentSignal.candle.timestamp;
      logger.info("üîÑ –°–∏–≥–Ω–∞–ª –æ—Ç–º–µ–Ω–µ–Ω –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —É—Å–ª–æ–≤–∏–π –¥–ª—è –≤—Ö–æ–¥–∞.");
      this.currentSignal = null;
    }
  }

  public setSignal(signal: VolumeSignal | null): void {
    this.currentSignal = signal;
    if (signal) {
      logger.info(
        `üîÑ –°–∏–≥–Ω–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${new Date(
          signal.candle.timestamp
        ).toLocaleTimeString()}, V=${signal.candle.volume.toFixed(2)}`
      );
    } else {
      logger.info("üîÑ –°–∏–≥–Ω–∞–ª —Å–±—Ä–æ—à–µ–Ω");
    }
  }

  public async syncPositionState(candleHistory: Candle[] = []): Promise<void> {
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–≤–µ—á–µ–π
      this.candleHistory = [...candleHistory];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
      if (!this.hasInitialSync) {
        const positionsResponse = await this.client.getPositionInfo({
          category: "linear",
          symbol: this.SYMBOL
        });

        if (positionsResponse.retCode === 0 && positionsResponse.result?.list) {
          const openPositions = positionsResponse.result.list.filter(
            pos => Number(pos.size) > 0
          );

          if (openPositions.length > 0) {
            const position = openPositions[0];
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –Ω–∞—à–µ–π —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–µ–π
            if (
              Date.now() - this.lastPositionOpenTime < 5000 &&
              this.activePosition &&
              this.activePosition.side === position.side &&
              Math.abs(
                Number(position.avgPrice) - this.activePosition.entryPrice
              ) < 0.1
            ) {
              logger.info(
                "‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Å—ã–Ω–æ–≤–ª–µ–Ω–∏–µ - —ç—Ç–æ –Ω–∞—à–∞ –Ω–µ–¥–∞–≤–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è"
              );
              return;
            }
            const positionSize = position.size;
            const currentPrice = Number(position.markPrice);
            const side = position.side;
            const entryPrice = Number(position.avgPrice);

            logger.info(`üîÑ –£–°–´–ù–û–í–õ–ï–ù–ò–ï –°–£–©–ï–°–¢–í–£–Æ–©–ï–ô –ü–û–ó–ò–¶–ò–ò:`);
            logger.info(`    –†–∞–∑–º–µ—Ä: ${positionSize} ${position.symbol}`);
            logger.info(`   üìà –°—Ç–æ—Ä–æ–Ω–∞: ${side}`);
            logger.info(`   üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${entryPrice}`);
            logger.info(`   üíπ –¢–µ–∫—É—â–∞—è P&L: ${position.unrealisedPnl} USDT`);

            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ TP/SL
            let currentTakeProfit: number | undefined;
            let currentStopLoss: number | undefined;
            let isTrailingActive = false;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏—Ç –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç—Ä–µ–π–ª–∏–Ω–≥–∞
            const profitPoints =
              side === "Buy"
                ? currentPrice - entryPrice
                : entryPrice - currentPrice;

            // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
            let stopLossLevel = currentPrice;
            let foundSignal = false;

            // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–µ —Å–≤–µ—á–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
            if (this.candleHistory.length >= 2) {
              const lastCandle = this.candleHistory[
                this.candleHistory.length - 1
              ];
              const prevCandle = this.candleHistory[
                this.candleHistory.length - 2
              ];

              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–º –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π —Å–≤–µ—á–∏
              if (prevCandle.volume > this.VOLUME_THRESHOLD) {
                foundSignal = true;
                stopLossLevel =
                  side === "Buy"
                    ? Math.min(prevCandle.low, lastCandle.low)
                    : Math.max(prevCandle.high, lastCandle.high);
              }
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å
            const stopLoss =
              side === "Buy"
                ? foundSignal
                  ? stopLossLevel - this.STOP_LOSS_POINTS
                  : currentPrice - this.STOP_LOSS_POINTS
                : foundSignal
                ? stopLossLevel + this.STOP_LOSS_POINTS
                : currentPrice + this.STOP_LOSS_POINTS;

            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –æ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
            const takeProfit =
              currentPrice +
              (side === "Buy"
                ? this.TAKE_PROFIT_POINTS
                : -this.TAKE_PROFIT_POINTS);

            // –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ—Ä–¥–µ—Ä–∞
            try {
              const activeOrders = await this.client.getActiveOrders({
                category: "linear",
                symbol: this.SYMBOL
              });

              if (activeOrders.retCode === 0 && activeOrders.result?.list) {
                for (const order of activeOrders.result.list) {
                  if (order.reduceOnly) {
                    await this.client.cancelOrder({
                      category: "linear",
                      symbol: this.SYMBOL,
                      orderId: order.orderId
                    });
                    logger.info(
                      `‚úÖ –û—Ç–º–µ–Ω–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ä–¥–µ—Ä: ${order.orderId}`
                    );
                  }
                }
              }
            } catch (error) {
              logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤:", error);
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π TP
            const tpResponse = await this.client.submitOrder({
              category: "linear",
              symbol: this.SYMBOL,
              side: side === "Buy" ? "Sell" : "Buy",
              orderType: "Limit",
              qty: positionSize.toString(),
              price: takeProfit.toString(),
              triggerPrice: takeProfit.toString(),
              triggerDirection: side === "Buy" ? 1 : 2,
              timeInForce: "GTC",
              triggerBy: "MarkPrice",
              reduceOnly: true,
              orderLinkId: `tp_${Date.now()}`
            });

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π SL
            const slResponse = await this.client.submitOrder({
              category: "linear",
              symbol: this.SYMBOL,
              side: side === "Buy" ? "Sell" : "Buy",
              orderType: "Limit",
              qty: positionSize.toString(),
              price: stopLoss.toString(),
              triggerPrice: stopLoss.toString(),
              triggerDirection: side === "Buy" ? 2 : 1,
              timeInForce: "GTC",
              triggerBy: "MarkPrice",
              reduceOnly: true,
              orderLinkId: `sl_${Date.now()}`
            });

            if (tpResponse.retCode === 0 && slResponse.retCode === 0) {
              logger.info(
                `‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ TP=${takeProfit.toFixed(
                  2
                )}, SL=${stopLoss.toFixed(2)}`
              );
            } else {
              logger.error(
                `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–æ–≤—ã—Ö —É—Ä–æ–≤–Ω–µ–π: TP=${tpResponse.retMsg}, SL=${slResponse.retMsg}`
              );
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç—Ä–µ–π–ª–∏–Ω–≥–∞
            isTrailingActive =
              this.USE_TRAILING_STOP &&
              profitPoints >= this.TRAILING_ACTIVATION_POINTS;

            this.activePosition = {
              side: side as any,
              entryPrice: entryPrice,
              entryTime: Date.now(),
              isTrailingActive: isTrailingActive,
              lastTrailingStopPrice: stopLoss,
              orderId: "",
              plannedTakeProfit: takeProfit,
              plannedStopLoss: stopLoss,
              executionNotificationSent: true
            };

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å—ã–Ω–æ–≤–ª–µ–Ω–∏–∏
            const adoptMessage = this.formatPositionAdoptedAlert(position);
            await this.callbacks.onTradeOperation(adoptMessage);

            // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–µ–Ω
            if (isTrailingActive) {
              logger.info(
                `üöÄ –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ —É—Å—ã–Ω–æ–≤–ª–µ–Ω–∏–∏ (–ø—Ä–æ—Ñ–∏—Ç: ${profitPoints.toFixed(
                  2
                )} –ø—É–Ω–∫—Ç–æ–≤)`
              );
              this.startTrailingStopCheck();
            } else {
              logger.info(
                `‚ÑπÔ∏è –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (–ø—Ä–æ—Ñ–∏—Ç: ${profitPoints.toFixed(
                  2
                )} –ø—É–Ω–∫—Ç–æ–≤, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${this.TRAILING_ACTIVATION_POINTS})`
              );
            }
          } else {
            logger.info("‚úÖ –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∏—Å—Ç–æ–µ");
          }
        }
        this.hasInitialSync = true;
      }
    } catch (error) {
      logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π:", error);
    }
  }

  private formatPositionAdoptedAlert(position: any): string {
    const side = position.side === "Buy" ? "–®–û–†–¢" : "–õ–û–ù–ì";
    const pnl = Number(position.unrealisedPnl);
    const pnlEmoji = pnl >= 0 ? "üìà" : "üìâ";
    const pnlText = pnl >= 0 ? `+${pnl.toFixed(2)}` : pnl.toFixed(2);

    let message = `üîÑ –ü–û–ó–ò–¶–ò–Ø –£–°–´–ù–û–í–õ–ï–ù–ê\n\n`;
    message += `üìä –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${side}\n`;
    message += `üí∞ –†–∞–∑–º–µ—Ä: ${position.size} BTC\n`;
    message += `üìà –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${position.avgPrice}\n`;
    message += `üíπ –¢–µ–∫—É—â–∞—è P&L: ${pnlEmoji} ${pnlText} USDT\n`;

    // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏–∏
    message += `\nüìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n`;
    message += `‚ö°Ô∏è –õ–∏–∫–≤–∏–¥–∞—Ü–∏–æ–Ω–Ω–∞—è —Ü–µ–Ω–∞: ${position.liqPrice || "–ù/–î"}\n`;
    message += `üíµ –ú–∞—Ä–∂–∞ –ø–æ–∑–∏—Ü–∏–∏: ${position.positionMargin || "–ù/–î"} USDT\n`;
    message += `üìÖ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: ${new Date().toLocaleString()}\n`;

    if (position.takeProfit && Number(position.takeProfit) > 0) {
      message += `üéØ Take Profit: ${position.takeProfit}\n`;
    }

    if (position.stopLoss && Number(position.stopLoss) > 0) {
      message += `üõ°Ô∏è Stop Loss: ${position.stopLoss}\n`;
    }

    message += `\n‚è±Ô∏è –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –ø—Ä–∏–±—ã–ª–∏ > 300 –ø—É–Ω–∫—Ç–æ–≤`;

    return message;
  }

  private cleanupOldSignals(oldestCandleTimestamp: number): void {
    // –û—á–∏—â–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
    const MAX_SIGNAL_AGE = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    const now = Date.now();

    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö
    for (const timestamp of this.usedSignalTimestamps) {
      if (now - timestamp > MAX_SIGNAL_AGE) {
        this.usedSignalTimestamps.delete(timestamp);
      }
    }

    // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Å–∏–≥–Ω–∞–ª —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–π - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–≥–æ
    if (
      this.currentSignal &&
      now - this.currentSignal.candle.timestamp > MAX_SIGNAL_AGE
    ) {
      logger.info(
        `üßπ –°–±—Ä–æ—Å —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç ${new Date(
          this.currentSignal.candle.timestamp
        ).toLocaleTimeString()}`
      );
      this.currentSignal = null;
    }
  }

  public checkVolumeSpike(
    completedCandle: Candle,
    previousCandle: Candle
  ): void {
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–∏–≥–Ω–∞–ª—ã –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–æ–≤—ã—Ö
    this.cleanupOldSignals(
      Math.min(completedCandle.timestamp, previousCandle.timestamp)
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
    if (this.activePosition) {
      logger.info(
        `üîÑ –ü–†–û–ü–£–°–ö –ü–†–û–í–ï–†–ö–ò –û–ë–™–ï–ú–ê: –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è ${this.activePosition.side} –ø–æ–∑–∏—Ü–∏—è`
      );
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–µ —Å–≤–µ—á–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã
    if (!completedCandle.confirmed || !previousCandle.confirmed) {
      logger.info(`‚è≥ –ü–†–û–ü–£–°–ö –ü–†–û–í–ï–†–ö–ò –û–ë–™–ï–ú–ê: –ï—Å—Ç—å –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —Å–≤–µ—á–∏`);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–≤–µ—á–∏ –∏–¥—É—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    if (previousCandle.timestamp >= completedCandle.timestamp) {
      logger.info(`‚ö†Ô∏è –ü–†–û–ü–£–°–ö –ü–†–û–í–ï–†–ö–ò –û–ë–™–ï–ú–ê: –°–≤–µ—á–∏ –∏–¥—É—Ç –Ω–µ –ø–æ –ø–æ—Ä—è–¥–∫—É`);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–µ –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–≤–µ—á–∏
    const now = Date.now();
    const fourHours = 4 * 60 * 60 * 1000;
    if (now - completedCandle.timestamp > fourHours * 2) {
      logger.info(`‚ö†Ô∏è –ü–†–û–ü–£–°–ö –ü–†–û–í–ï–†–ö–ò –û–ë–™–ï–ú–ê: –°–≤–µ—á–∏ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–µ`);
      return;
    }

    logger.info(`üìä –ê–ù–ê–õ–ò–ó –û–ë–™–ï–ú–û–í –ó–ê–ö–†–´–¢–´–• –°–í–ï–ß–ï–ô:`);
    logger.info(
      `   üìà –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–∫—Ä—ã—Ç–∞—è (${new Date(
        completedCandle.timestamp
      ).toLocaleTimeString()}): V=${completedCandle.volume.toFixed(2)}, ${
        completedCandle.isGreen ? "üü¢" : "üî¥"
      }`
    );
    logger.info(
      `   üìà –ü—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–∫—Ä—ã—Ç–∞—è (${new Date(
        previousCandle.timestamp
      ).toLocaleTimeString()}): V=${previousCandle.volume.toFixed(2)}, ${
        previousCandle.isGreen ? "üü¢" : "üî¥"
      }`
    );
    logger.info(`   üéØ –ü–æ—Ä–æ–≥ –æ–±—ä–µ–º–∞: ${this.VOLUME_THRESHOLD}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –±—ã–ª –ª–∏ —ç—Ç–æ—Ç —Å–∏–≥–Ω–∞–ª —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
    if (this.usedSignalTimestamps.has(previousCandle.timestamp)) {
      logger.info(
        `‚ö†Ô∏è –ü–†–û–ü–£–°–ö: –°–∏–≥–Ω–∞–ª –æ—Ç ${new Date(
          previousCandle.timestamp
        ).toLocaleTimeString()} —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω`
      );
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–º –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–∫—Ä—ã—Ç–æ–π —Å–≤–µ—á–∏
    if (previousCandle.volume >= this.VOLUME_THRESHOLD) {
      logger.info(
        `üö® –û–ë–ù–ê–†–£–ñ–ï–ù –°–ò–ì–ù–ê–õ: –í–´–°–û–ö–ò–ô –û–ë–™–ï–ú (${previousCandle.volume.toFixed(
          2
        )}) –í –°–í–ï–ß–ï ${new Date(previousCandle.timestamp).toLocaleTimeString()}!`
      );
      logger.info(`üí∞ –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: ${previousCandle.close}`);
      logger.info(
        `üìä –¶–≤–µ—Ç —Å–≤–µ—á–∏: ${previousCandle.isGreen ? "üü¢ –ó–µ–ª–µ–Ω–∞—è" : "üî¥ –ö—Ä–∞—Å–Ω–∞—è"}`
      );

      this.currentSignal = {
        candle: previousCandle,
        isActive: true,
        waitingForLowerVolume: true
      };
      this.usedSignalTimestamps.add(previousCandle.timestamp);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–∫—Ä—ã—Ç—É—é —Å–≤–µ—á—É –∫–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â—É—é
      if (completedCandle.volume <= previousCandle.volume) {
        logger.info(
          `‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï: –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–∫—Ä—ã—Ç–∞—è —Å–≤–µ—á–∞ –∏–º–µ–µ—Ç –º–µ–Ω—å—à–∏–π –æ–±—ä–µ–º`
        );
        logger.info(
          `‚ö°Ô∏è –ì–û–¢–û–í–´ –ö –í–•–û–î–£ –í ${previousCandle.isGreen ? "–õ–û–ù–ì" : "–®–û–†–¢"}`
        );
      }
    }
  }

  public async processCompletedCandle(
    completedCandle: Candle,
    candleHistory: Candle[]
  ): Promise<void> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
    if (this.activePosition) {
      logger.info(
        `üîÑ –ü–†–û–ü–£–°–ö –û–ë–†–ê–ë–û–¢–ö–ò –°–í–ï–ß–ò: –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è ${this.activePosition.side} –ø–æ–∑–∏—Ü–∏—è`
      );
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π —á–µ—Ä–µ–∑ API
    try {
      const positionsResponse = await this.client.getPositionInfo({
        category: "linear",
        symbol: this.SYMBOL
      });

      if (positionsResponse.retCode === 0 && positionsResponse.result?.list) {
        const openPositions = positionsResponse.result.list.filter(
          pos => Number(pos.size) > 0
        );

        if (openPositions.length > 0) {
          logger.info(
            `üîÑ –ü–†–û–ü–£–°–ö –û–ë–†–ê–ë–û–¢–ö–ò –°–í–ï–ß–ò: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è —á–µ—Ä–µ–∑ API`
          );
          return;
        }
      }
    } catch (error) {
      logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π:", error);
      return;
    }

    if (!this.currentSignal?.isActive) {
      logger.info(`‚è≥ –ü–†–û–ü–£–°–ö –û–ë–†–ê–ë–û–¢–ö–ò: –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞`);
      return;
    }

    // –ù–û–í–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï - –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    logger.info(`\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –°–í–ï–ß–ò:`);
    logger.info(
      `   ‚è∞ –í—Ä–µ–º—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–π —Å–≤–µ—á–∏: ${new Date(
        completedCandle.timestamp
      ).toLocaleTimeString()}`
    );
    logger.info(
      `   ‚è∞ –í—Ä–µ–º—è —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π —Å–≤–µ—á–∏: ${new Date(
        this.currentSignal.candle.timestamp
      ).toLocaleTimeString()}`
    );
    logger.info(`   üìä –°–∏–≥–Ω–∞–ª –∞–∫—Ç–∏–≤–µ–Ω: ${this.currentSignal.isActive}`);
    logger.info(
      `   üìä –û–∂–∏–¥–∞–Ω–∏–µ –º–µ–Ω—å—à–µ–≥–æ –æ–±—ä–µ–º–∞: ${this.currentSignal.waitingForLowerVolume}`
    );
    logger.info(`   üìä –û–±—ä–µ–º —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏: ${completedCandle.volume}`);
    logger.info(
      `   üìä –û–±—ä–µ–º —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π —Å–≤–µ—á–∏: ${this.currentSignal.candle.volume}`
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∞—è —Å–≤–µ—á–∞ –Ω–æ–≤–µ–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π
    if (completedCandle.timestamp <= this.currentSignal.candle.timestamp) {
      logger.info(
        `‚ö†Ô∏è –ü–†–û–ü–£–°–ö –û–ë–†–ê–ë–û–¢–ö–ò: –¢–µ–∫—É—â–∞—è —Å–≤–µ—á–∞ (${new Date(
          completedCandle.timestamp
        ).toLocaleTimeString()}) —Å—Ç–∞—Ä—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π (${new Date(
          this.currentSignal.candle.timestamp
        ).toLocaleTimeString()})`
      );
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–≤–µ—á–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
    if (!completedCandle.confirmed) {
      logger.info(`‚è≥ –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏`);
      return;
    }

    logger.info(`üìä –ü–†–û–í–ï–†–ö–ê –ü–û–î–¢–í–ï–†–ñ–î–ê–Æ–©–ï–ô –°–í–ï–ß–ò:`);
    logger.info(`   üìà –û–±—ä–µ–º —Ç–µ–∫—É—â–µ–π: ${completedCandle.volume.toFixed(2)}`);
    logger.info(
      `   üìä –û–±—ä–µ–º —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π: ${this.currentSignal.candle.volume.toFixed(2)}`
    );

    // –ï—Å–ª–∏ –æ–±—ä–µ–º —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏ –±–æ–ª—å—à–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π - –æ–±–Ω–æ–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª
    if (completedCandle.volume > this.currentSignal.candle.volume) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —Å–∏–≥–Ω–∞–ª —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
      if (this.currentSignal.waitingForLowerVolume) {
        logger.info(`üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–ò–ì–ù–ê–õ–ê: –ù–∞–π–¥–µ–Ω–∞ —Å–≤–µ—á–∞ —Å –±–æ–ª—å—à–∏–º –æ–±—ä–µ–º–æ–º`);
        logger.info(
          `   üìä –°—Ç–∞—Ä—ã–π –æ–±—ä–µ–º: ${this.currentSignal.candle.volume.toFixed(2)}`
        );
        logger.info(`   üìä –ù–æ–≤—ã–π –æ–±—ä–µ–º: ${completedCandle.volume.toFixed(2)}`);

        this.currentSignal = {
          candle: completedCandle,
          isActive: true,
          waitingForLowerVolume: true
        };
        this.usedSignalTimestamps.add(completedCandle.timestamp);
      } else {
        logger.info(
          `‚è≥ –ü–†–û–ü–£–°–ö –û–ë–ù–û–í–õ–ï–ù–ò–Ø: –°–∏–≥–Ω–∞–ª —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –≤—Ö–æ–¥—É`
        );
      }
    }
    // –ï—Å–ª–∏ –æ–±—ä–µ–º —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏ –º–µ–Ω—å—à–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π - –≤—Ö–æ–¥–∏–º –≤ –ø–æ–∑–∏—Ü–∏—é
    else if (completedCandle.volume <= this.currentSignal.candle.volume) {
      logger.info(`‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï: –ù–∞–π–¥–µ–Ω–∞ —Å–≤–µ—á–∞ —Å –º–µ–Ω—å—à–∏–º –æ–±—ä–µ–º–æ–º`);
      logger.info(`üéØ –í–•–û–î–ò–ú –í –ü–û–ó–ò–¶–ò–Æ –°–†–ê–ó–£ –ü–û–°–õ–ï –ü–û–î–¢–í–ï–†–ñ–î–ê–Æ–©–ï–ô –°–í–ï–ß–ò`);
      logger.info(
        `   üìä –°–∏–≥–Ω–∞–ª—å–Ω–∞—è —Å–≤–µ—á–∞: ${new Date(
          this.currentSignal.candle.timestamp
        ).toLocaleTimeString()}, ${
          this.currentSignal.candle.isGreen ? "üü¢" : "üî¥"
        }`
      );
      logger.info(
        `   üìä –¢–µ–∫—É—â–∞—è —Å–≤–µ—á–∞: ${new Date(
          completedCandle.timestamp
        ).toLocaleTimeString()}`
      );

      // –ù–û–í–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï - –ü–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π –≤—Ö–æ–¥–∞
      logger.info(`\nüöÄ –ü–û–ü–´–¢–ö–ê –í–•–û–î–ê –í –ü–û–ó–ò–¶–ò–Æ:`);
      logger.info(`   üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º:`);
      logger.info(`   - isActive: ${this.currentSignal.isActive}`);
      logger.info(
        `   - waitingForLowerVolume: ${this.currentSignal.waitingForLowerVolume}`
      );
      logger.info(
        `   - –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${
          this.currentSignal.candle.isGreen ? "–®–û–†–¢" : "–õ–û–ù–ì"
        }`
      );

      // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —Å–∏–≥–Ω–∞–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –±–æ–ª—å—à–µ –Ω–µ –∂–¥–µ–º —Å–≤–µ—á—É —Å –º–µ–Ω—å—à–∏–º –æ–±—ä–µ–º–æ–º
      this.currentSignal.waitingForLowerVolume = false;

      // –ù–û–í–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï - –í—ã–∑–æ–≤ openPosition
      logger.info(`   üéØ –í—ã–∑—ã–≤–∞–µ–º openPosition...`);
      const positionOpened = await this.openPosition(
        this.currentSignal.candle,
        completedCandle
      );

      // –ù–û–í–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
      logger.info(
        `   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: ${
          positionOpened ? "‚úÖ –£–°–ü–ï–®–ù–û" : "‚ùå –ù–ï–£–î–ê–ß–ê"
        }`
      );

      // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞
      if (positionOpened && this.currentSignal) {
        this.currentSignal.isActive = false;
        logger.info("‚úÖ –°–∏–≥–Ω–∞–ª –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é.");
      } else {
        logger.info(
          "‚ö†Ô∏è –°–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º, —Ç.–∫. –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é."
        );
      }
    }
  }

  private async openPosition(
    signalCandle: Candle,
    currentCandle: Candle
  ): Promise<boolean> {
    logger.info(`\nüîç –ù–ê–ß–ê–õ–û –ü–†–û–¶–ï–°–°–ê –û–¢–ö–†–´–¢–ò–Ø –ü–û–ó–ò–¶–ò–ò:`);

    if (this.activePosition) {
      logger.warn(
        "‚ö†Ô∏è –£–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è. –û—Ç–º–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏."
      );
      return false;
    }

    if (this.isOpeningPosition) {
      logger.warn(
        "‚è≥ –£–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â—É—é –ø–æ–ø—ã—Ç–∫—É."
      );
      return false;
    }

    this.isOpeningPosition = true;
    logger.info("üîí –ë–ª–æ–∫–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏");

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –ø–æ–∑–∏—Ü–∏–∏
      logger.info("üí∞ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å USDT...");
      const balanceResponse = await this.client.getWalletBalance({
        accountType: "UNIFIED"
      });

      logger.info(`üìä –û—Ç–≤–µ—Ç –±–∞–ª–∞–Ω—Å–∞: ${JSON.stringify(balanceResponse)}`);

      if (balanceResponse.retCode !== 0) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: ${balanceResponse.retMsg}`);
        this.isOpeningPosition = false;
        return false;
      }

      if (!balanceResponse.result?.list?.[0]?.coin) {
        logger.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –±–∞–ª–∞–Ω—Å–∞");
        logger.info(
          `üìä –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –±–∞–ª–∞–Ω—Å–∞: ${JSON.stringify(balanceResponse, null, 2)}`
        );
        this.isOpeningPosition = false;
        return false;
      }

      const usdtBalance = balanceResponse.result.list[0].coin.find(
        c => c.coin === "USDT"
      );

      if (!usdtBalance) {
        logger.error("‚ùå –ë–∞–ª–∞–Ω—Å USDT –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ");
        logger.info(
          `üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–Ω–µ—Ç—ã: ${balanceResponse.result.list[0].coin
            .map(c => `${c.coin}: ${c.equity} (${c.walletBalance})`)
            .join(", ")}`
        );
        this.isOpeningPosition = false;
        return false;
      }

      const availableBalance = Number(usdtBalance.equity);
      logger.info(
        `üí∞ –ë–∞–ª–∞–Ω—Å USDT: –î–æ—Å—Ç—É–ø–Ω–æ=${availableBalance.toFixed(
          2
        )}, –í—Å–µ–≥–æ=${Number(usdtBalance.walletBalance).toFixed(2)}`
      );

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–µ—á–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –º–∞—Ä–∂–∏
      logger.info("üîß –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–µ—á–µ...");
      const instrumentResponse = await this.client.getInstrumentsInfo({
        category: "linear",
        symbol: this.SYMBOL
      });

      let requiredMargin = this.TRADE_SIZE_USD;
      if (
        instrumentResponse.retCode === 0 &&
        instrumentResponse.result?.list?.[0]
      ) {
        const leverage =
          Number(
            instrumentResponse.result.list[0].leverageFilter?.maxLeverage
          ) || 1;
        requiredMargin =
          this.TRADE_SIZE_USD / Math.min(leverage, this.LEVERAGE);
        logger.info(
          `üîß –î–æ—Å—Ç—É–ø–Ω–æ–µ –ø–ª–µ—á–æ: ${leverage}x, –ò—Å–ø–æ–ª—å–∑—É–µ–º: ${Math.min(
            leverage,
            this.LEVERAGE
          )}x`
        );
      }

      logger.info(
        `üí∞ –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å USDT: ${availableBalance.toFixed(
          2
        )}, –¢—Ä–µ–±—É–µ—Ç—Å—è –º–∞—Ä–∂–∏: ${requiredMargin.toFixed(2)}`
      );

      if (availableBalance < requiredMargin) {
        logger.error(
          `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –î–æ—Å—Ç—É–ø–Ω–æ: ${availableBalance.toFixed(
            2
          )} USDT, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${requiredMargin.toFixed(2)} USDT`
        );
        this.isOpeningPosition = false;
        return false;
      }

      // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø –°–î–ï–õ–ö–ò –î–õ–Ø VSA
      logger.info(`\nüîç –ê–ù–ê–õ–ò–ó –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø –°–î–ï–õ–ö–ò (VSA –ª–æ–≥–∏–∫–∞):`);
      logger.info(
        `   ‚è∞ –í—Ä–µ–º—è —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π —Å–≤–µ—á–∏: ${new Date(
          signalCandle.timestamp
        ).toLocaleTimeString()}`
      );
      logger.info(
        `   ‚è∞ –í—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–π —Å–≤–µ—á–∏: ${new Date(
          currentCandle.timestamp
        ).toLocaleTimeString()}`
      );
      logger.info(
        `   üìä –°–∏–≥–Ω–∞–ª—å–Ω–∞—è —Å–≤–µ—á–∞: Open=${signalCandle.open} ‚Üí Close=${
          signalCandle.close
        } (${signalCandle.isGreen ? "üü¢" : "üî¥"})`
      );
      logger.info(
        `   üìä –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∞—è —Å–≤–µ—á–∞: Open=${currentCandle.open} ‚Üí Close=${
          currentCandle.close
        } (${currentCandle.isGreen ? "üü¢" : "üî¥"})`
      );

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–≤–µ—Ç–∞ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π —Å–≤–µ—á–∏
      // –ö—Ä–∞—Å–Ω–∞—è —Å–≤–µ—á–∞ = Buy (–õ–û–ù–ì), –ó–µ–ª–µ–Ω–∞—è —Å–≤–µ—á–∞ = Sell (–®–û–†–¢)
      const side: OrderSideV5 = signalCandle.isGreen ? "Sell" : "Buy";
      logger.info(
        `   üéØ –í–´–ë–†–ê–ù–ù–û–ï –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï: ${side} (${
          side === "Buy" ? "–õ–û–ù–ì" : "–®–û–†–¢"
        })`
      );
      logger.info(
        `   üìä –ü—Ä–∏—á–∏–Ω–∞: ${
          signalCandle.isGreen ? "–ó–µ–ª–µ–Ω–∞—è" : "–ö—Ä–∞—Å–Ω–∞—è"
        } —Å–≤–µ—á–∞ = ${side === "Buy" ? "–õ–û–ù–ì" : "–®–û–†–¢"}`
      );

      // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è VSA –ª–æ–≥–∏–∫–∏
      const vsaLogicCheck = this.verifyVSALogic(signalCandle, side);
      if (!vsaLogicCheck.isValid) {
        logger.error(`üö´ –û–®–ò–ë–ö–ê VSA –õ–û–ì–ò–ö–ò: ${vsaLogicCheck.error}`);
        logger.error(`üö´ –°–î–ï–õ–ö–ê –û–¢–ú–ï–ù–ï–ù–ê –î–õ–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò!`);
        this.isOpeningPosition = false;
        return false;
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä—ã–Ω–æ—á–Ω—É—é —Ü–µ–Ω—É
      logger.info("üíπ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä—ã–Ω–æ—á–Ω—É—é —Ü–µ–Ω—É...");
      const tickerResponse = await this.client.getTickers({
        category: "linear",
        symbol: this.SYMBOL
      });

      let orderPrice = currentCandle.close;
      let currentMarketPrice = currentCandle.close;

      if (tickerResponse.retCode === 0 && tickerResponse.result?.list?.[0]) {
        currentMarketPrice = Number(tickerResponse.result.list[0].lastPrice);
        // –î–µ–ª–∞–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
        orderPrice =
          side === "Buy"
            ? currentMarketPrice + 0.01 // Buy –≤—ã—à–µ —Ä—ã–Ω–∫–∞ –Ω–∞ 1 –ø—É–Ω–∫—Ç
            : currentMarketPrice - 0.01; // Sell –Ω–∏–∂–µ —Ä—ã–Ω–∫–∞ –Ω–∞ 1 –ø—É–Ω–∫—Ç

        logger.info(
          `üìä –†—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞: ${currentMarketPrice}, –¶–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞: ${orderPrice}`
        );
      }

      const stopLossLevel =
        side === "Buy"
          ? Math.min(signalCandle.low, currentCandle.low)
          : Math.max(signalCandle.high, currentCandle.high);

      const stopLoss =
        side === "Buy"
          ? stopLossLevel - this.STOP_LOSS_POINTS
          : stopLossLevel + this.STOP_LOSS_POINTS;

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –æ—Ç —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω—ã
      const takeProfit =
        currentMarketPrice +
        (side === "Buy" ? this.TAKE_PROFIT_POINTS : -this.TAKE_PROFIT_POINTS);

      logger.info(`\nüìä –†–ê–°–ß–ï–¢ –£–†–û–í–ù–ï–ô:`);
      logger.info(`   üí∞ –†—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞: ${currentMarketPrice}`);
      logger.info(`   üí∞ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${orderPrice}`);
      logger.info(
        `   üéØ Take Profit: ${takeProfit.toFixed(2)} (${
          side === "Buy" ? "+" : "-"
        }${this.TAKE_PROFIT_POINTS} –ø—É–Ω–∫—Ç–æ–≤ –æ—Ç —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω—ã)`
      );
      logger.info(
        `   üõ°Ô∏è Stop Loss: ${stopLoss.toFixed(2)} (${
          this.STOP_LOSS_POINTS
        } –ø—É–Ω–∫—Ç–æ–≤ –æ—Ç ${side === "Buy" ? "–º–∏–Ω–∏–º—É–º–∞" : "–º–∞–∫—Å–∏–º—É–º–∞"} —Å–≤–µ—á–µ–π)`
      );

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —à–∞–≥–∞
      const rawSize = this.TRADE_SIZE_USD / orderPrice;
      const qtyStep = 0.1; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥ –¥–ª—è BTC
      const minQty = 0.1; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è BTC
      const steps = Math.floor(rawSize / qtyStep);
      const contractSize = Math.max(steps * qtyStep, minQty).toFixed(1);

      logger.info(
        `üí∞ –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏: $${this.TRADE_SIZE_USD} / ${orderPrice} = ${rawSize} ‚Üí ${contractSize}`
      );

      // –°–æ–∑–¥–∞–µ–º –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –≤—Ö–æ–¥
      logger.info("\nüöÄ –†–ê–ó–ú–ï–©–ê–ï–ú –í–•–û–î–ù–û–ô –û–†–î–ï–†:");
      const orderResponse = await this.client.submitOrder({
        category: "linear",
        symbol: this.SYMBOL,
        side: side,
        orderType: "Limit",
        qty: contractSize,
        price: orderPrice.toString(),
        timeInForce: "GTC",
        positionIdx: 0,
        orderLinkId: `entry_${Date.now()}`
      });

      logger.info(
        `üìä –û—Ç–≤–µ—Ç –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞: ${JSON.stringify(orderResponse)}`
      );

      if (orderResponse.retCode !== 0) {
        logger.error(
          `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤—Ö–æ–¥–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞: ${orderResponse.retMsg}`
        );
        this.isOpeningPosition = false;
        return false;
      }

      const orderId = orderResponse.result?.orderId;
      if (!orderId) {
        logger.error("‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω ID –æ—Ä–¥–µ—Ä–∞");
        this.isOpeningPosition = false;
        return false;
      }

      logger.info(
        `‚úÖ –†–∞–∑–º–µ—â–µ–Ω –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä ${orderId} –Ω–∞ ${side} –ø–æ —Ü–µ–Ω–µ ${orderPrice}`
      );

      // –ñ–¥–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
      let orderFilled = false;
      let attempts = 0;
      const maxAttempts = 10;
      const checkInterval = 1000; // 1 —Å–µ–∫—É–Ω–¥–∞

      logger.info("\n‚è≥ –û–ñ–ò–î–ê–ï–ú –ò–°–ü–û–õ–ù–ï–ù–ò–Ø –û–†–î–ï–†–ê:");
      while (!orderFilled && attempts < maxAttempts) {
        await new Promise(resolve => setTimeout(resolve, checkInterval));
        attempts++;

        const orderStatus = await this.client.getHistoricOrders({
          category: "linear",
          symbol: this.SYMBOL,
          orderId: orderId
        });

        logger.info(
          `   üìä –ü–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxAttempts}: ${JSON.stringify(
            orderStatus
          )}`
        );

        if (orderStatus.retCode === 0 && orderStatus.result?.list?.[0]) {
          const order = orderStatus.result.list[0];

          if (order.orderStatus === "Filled") {
            orderFilled = true;
            logger.info(
              `‚úÖ –û—Ä–¥–µ—Ä ${orderId} –∏—Å–ø–æ–ª–Ω–µ–Ω –ø–æ —Ü–µ–Ω–µ ${order.avgPrice}`
            );

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TP/SL —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Ö–æ–¥–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
            logger.info("\nüéØ –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú TP/SL:");
            const tpResponse = await this.client.submitOrder({
              category: "linear",
              symbol: this.SYMBOL,
              side: side === "Buy" ? "Sell" : "Buy",
              orderType: "Limit",
              qty: order.cumExecQty,
              price: takeProfit.toString(),
              triggerPrice: takeProfit.toString(),
              triggerDirection: side === "Buy" ? 1 : 2,
              timeInForce: "GTC",
              triggerBy: "MarkPrice",
              reduceOnly: true,
              orderLinkId: `tp_${Date.now()}`
            });

            const slResponse = await this.client.submitOrder({
              category: "linear",
              symbol: this.SYMBOL,
              side: side === "Buy" ? "Sell" : "Buy",
              orderType: "Limit",
              qty: order.cumExecQty,
              price: stopLoss.toString(),
              triggerPrice: stopLoss.toString(),
              triggerDirection: side === "Buy" ? 2 : 1,
              timeInForce: "GTC",
              triggerBy: "MarkPrice",
              reduceOnly: true,
              orderLinkId: `sl_${Date.now()}`
            });

            logger.info(
              `   üìä –û—Ç–≤–µ—Ç –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É TP: ${JSON.stringify(tpResponse)}`
            );
            logger.info(
              `   üìä –û—Ç–≤–µ—Ç –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É SL: ${JSON.stringify(slResponse)}`
            );

            if (tpResponse.retCode === 0 && slResponse.retCode === 0) {
              // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–∑–∏—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
              this.activePosition = {
                side: side,
                entryPrice: Number(order.avgPrice),
                entryTime: Date.now(),
                isTrailingActive: false,
                lastTrailingStopPrice: stopLoss,
                orderId: orderId,
                plannedTakeProfit: takeProfit,
                plannedStopLoss: stopLoss,
                executionNotificationSent: false
              };

              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏
              const openPositionMessage = this.notificationService.formatTradeOpenAlert(
                this.activePosition,
                takeProfit,
                stopLoss,
                signalCandle,
                currentCandle,
                false,
                side
              );
              await this.callbacks.onTradeOperation(openPositionMessage);

              // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
              this.lastPositionOpenTime = Date.now();

              // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞
              this.startTrailingStopCheck();

              this.isOpeningPosition = false;
              return true;
            } else {
              logger.error(
                `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ TP/SL: TP=${tpResponse.retMsg}, SL=${slResponse.retMsg}`
              );
            }
          } else if (
            order.orderStatus === "Cancelled" ||
            order.orderStatus === "Rejected"
          ) {
            logger.error(
              `‚ùå –û—Ä–¥–µ—Ä ${orderId} –æ—Ç–º–µ–Ω–µ–Ω/–æ—Ç–∫–ª–æ–Ω–µ–Ω: ${order.orderStatus}`
            );
            break;
          }
        }

        logger.info(
          `‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ ${orderId}, –ø–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxAttempts}`
        );
      }

      if (!orderFilled) {
        logger.error(
          `‚ùå –û—Ä–¥–µ—Ä ${orderId} –Ω–µ –∏—Å–ø–æ–ª–Ω–µ–Ω –ø–æ—Å–ª–µ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫, –æ—Ç–º–µ–Ω—è–µ–º`
        );
        await this.client.cancelOrder({
          category: "linear",
          symbol: this.SYMBOL,
          orderId: orderId
        });
      }

      this.isOpeningPosition = false;
      return orderFilled;
    } catch (error) {
      logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏:", error);
      this.isOpeningPosition = false;
      return false;
    }
  }

  private verifyVSALogic(
    signalCandle: Candle,
    side: OrderSideV5
  ): { isValid: boolean; error?: string } {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ VSA –ª–æ–≥–∏–∫–∏
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å —Ñ–ª–∞–≥–æ–º isValid –∏, –≤–æ–∑–º–æ–∂–Ω–æ, —Å—Ç—Ä–æ–∫–æ–π —Å –æ—à–∏–±–∫–æ–π
    return { isValid: true };
  }

  public finishInitialHistoryAnalysis(): void {
    // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç —Å–∏–≥–Ω–∞–ª–∞
    if (this.currentSignal?.isActive) {
      const signalAge = Date.now() - this.currentSignal.candle.timestamp;
      const MAX_INITIAL_SIGNAL_AGE = 8 * 60 * 60 * 1000; // 8 —á–∞—Å–æ–≤

      if (signalAge > MAX_INITIAL_SIGNAL_AGE) {
        logger.info(
          `üßπ –°–±—Ä–æ—Å —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç ${new Date(
            this.currentSignal.candle.timestamp
          ).toLocaleTimeString()}`
        );
        this.currentSignal = null;
      } else {
        logger.info(
          `üéØ –ù–∞—á–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∞–∫—Ç–∏–≤–Ω—ã–º —Å–∏–≥–Ω–∞–ª–æ–º –æ—Ç —Å–≤–µ—á–∏ ${new Date(
            this.currentSignal.candle.timestamp
          ).toLocaleTimeString()}`
        );
      }
    }
    logger.info(
      "‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω, —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ"
    );
  }

  private async startTrailingStopCheck(): Promise<void> {
    // –ï—Å–ª–∏ —Ç—Ä–µ–π–ª–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
    if (!this.USE_TRAILING_STOP) {
      return;
    }

    if (this.trailingStopCheckInterval) {
      clearInterval(this.trailingStopCheckInterval);
    }

    this.trailingStopCheckInterval = setInterval(async () => {
      await this.checkPositionState();
    }, this.TRAILING_STOP_INTERVAL_MS);
  }

  private async checkPositionState(): Promise<void> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
      const positionsResponse = await this.client.getPositionInfo({
        category: "linear",
        symbol: this.SYMBOL
      });

      if (positionsResponse.retCode === 0 && positionsResponse.result?.list) {
        const openPositions = positionsResponse.result.list.filter(
          pos => Number(pos.size) > 0
        );

        // –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π, –Ω–æ —É –Ω–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        if (openPositions.length === 0 && this.activePosition) {
          logger.info("üîÑ –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞, –æ—Ç–º–µ–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ—Ä–¥–µ—Ä–∞");

          // –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ—Ä–¥–µ—Ä–∞
          try {
            const activeOrders = await this.client.getActiveOrders({
              category: "linear",
              symbol: this.SYMBOL
            });

            if (activeOrders.retCode === 0 && activeOrders.result?.list) {
              for (const order of activeOrders.result.list) {
                if (order.reduceOnly) {
                  try {
                    await this.client.cancelOrder({
                      category: "linear",
                      symbol: this.SYMBOL,
                      orderId: order.orderId
                    });
                    logger.info(`‚úÖ –û—Ç–º–µ–Ω–µ–Ω –æ—Ä–¥–µ—Ä ${order.orderId}`);
                  } catch (cancelError) {
                    logger.error(
                      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ—Ä–¥–µ—Ä–∞ ${order.orderId}:`,
                      cancelError
                    );
                  }
                }
              }
            }
          } catch (error) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –æ—Ä–¥–µ—Ä–æ–≤:", error);
          }

          // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∑–∞–∫—Ä—ã—Ç–∏—è –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–¥–µ–ª–∫–∏
          const tradesResponse = await this.client.getClosedPnL({
            category: "linear",
            symbol: this.SYMBOL,
            limit: 1
          });

          let closePrice = 0;
          let closeReason = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";

          if (
            tradesResponse.retCode === 0 &&
            tradesResponse.result?.list?.[0]
          ) {
            closePrice = Number(tradesResponse.result.list[0].avgExitPrice);
            closeReason = "–ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞";
          }

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏
          const closePositionMessage = this.notificationService.formatTradeCloseAlert(
            this.activePosition,
            closePrice,
            closeReason
          );
          await this.callbacks.onTradeOperation(closePositionMessage);

          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          this.activePosition = null;
          this.stopTrailingStopCheck();
          logger.info(
            "‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å–±—Ä–æ—à–µ–Ω–æ, –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º —Å–∏–≥–Ω–∞–ª–∞–º"
          );
          return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é —Ç—Ä–µ–π–ª–∏–Ω–≥–∞ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
        if (openPositions.length > 0 && this.activePosition) {
          const position = openPositions[0];
          const currentPrice = Number(position.markPrice);
          const entryPrice = Number(position.avgPrice);

          // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏—Ç –≤ –ø—É–Ω–∫—Ç–∞—Ö
          const profitPoints =
            this.activePosition.side === "Buy"
              ? currentPrice - entryPrice
              : entryPrice - currentPrice;

          // –ï—Å–ª–∏ —Ç—Ä–µ–π–ª–∏–Ω–≥ –µ—â–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
          if (!this.activePosition.isTrailingActive) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Ç—Ä–µ–π–ª–∏–Ω–≥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
            if (!this.USE_TRAILING_STOP) {
              return;
            }

            logger.info(
              `üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–π–ª–∏–Ω–≥–∞: –ü—Ä–æ—Ñ–∏—Ç=${profitPoints.toFixed(
                2
              )} –ø—É–Ω–∫—Ç–æ–≤ (–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–∏ ${this.TRAILING_ACTIVATION_POINTS})`
            );

            if (profitPoints >= this.TRAILING_ACTIVATION_POINTS) {
              // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å
              const newStopLoss =
                this.activePosition.side === "Buy"
                  ? currentPrice - this.TRAILING_DISTANCE
                  : currentPrice + this.TRAILING_DISTANCE;

              try {
                // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç–æ–ø-–ª–æ—Å—Å –æ—Ä–¥–µ—Ä
                const activeOrders = await this.client.getActiveOrders({
                  category: "linear",
                  symbol: this.SYMBOL
                });

                if (activeOrders.retCode === 0 && activeOrders.result?.list) {
                  for (const order of activeOrders.result.list) {
                    if (order.reduceOnly) {
                      const orderPrice = Number(order.price);
                      const isSL =
                        this.activePosition.side === "Buy"
                          ? orderPrice < currentPrice
                          : orderPrice > currentPrice;

                      if (isSL) {
                        await this.client.cancelOrder({
                          category: "linear",
                          symbol: this.SYMBOL,
                          orderId: order.orderId
                        });
                        logger.info(
                          `‚úÖ –û—Ç–º–µ–Ω–µ–Ω —Å—Ç–∞—Ä—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${order.orderId} @ ${orderPrice}`
                        );
                      }
                    }
                  }
                }

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å
                const slResponse = await this.client.submitOrder({
                  category: "linear",
                  symbol: this.SYMBOL,
                  side: this.activePosition.side === "Buy" ? "Sell" : "Buy",
                  orderType: "Limit",
                  qty: position.size.toString(),
                  price: newStopLoss.toString(),
                  triggerPrice: newStopLoss.toString(),
                  triggerDirection: this.activePosition.side === "Buy" ? 2 : 1,
                  timeInForce: "GTC",
                  triggerBy: "MarkPrice",
                  reduceOnly: true,
                  orderLinkId: `sl_trailing_${Date.now()}`
                });

                if (slResponse.retCode === 0) {
                  this.activePosition.isTrailingActive = true;
                  this.activePosition.lastTrailingStopPrice = newStopLoss;
                  logger.info(
                    `üöÄ –ê–ö–¢–ò–í–ò–†–û–í–ê–ù –¢–†–ï–ô–õ–ò–ù–ì-–°–¢–û–ü –õ–ò–ú–ò–¢–ù–´–ú –û–†–î–ï–†–û–ú: SL=${newStopLoss.toFixed(
                      2
                    )}`
                  );

                  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞
                  const trailingActivationMessage = this.notificationService.formatTrailingStopActivation();
                  await this.callbacks.onTradeOperation(
                    trailingActivationMessage
                  );

                  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
                  const trailingUpdateMessage = this.notificationService.formatTrailingStopUpdate(
                    newStopLoss,
                    this.TRAILING_DISTANCE,
                    currentPrice
                  );
                  await this.callbacks.onTradeOperation(trailingUpdateMessage);
                } else {
                  logger.error(
                    `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ª–∏–º–∏—Ç–Ω–æ–≥–æ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞: ${slResponse.retMsg}`
                  );
                }
              } catch (error) {
                logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞:", error);
              }
            }
          }
          // –ï—Å–ª–∏ —Ç—Ä–µ–π–ª–∏–Ω–≥ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
          else if (this.activePosition.lastTrailingStopPrice !== null) {
            const optimalStopPrice =
              this.activePosition.side === "Buy"
                ? currentPrice - this.TRAILING_DISTANCE
                : currentPrice + this.TRAILING_DISTANCE;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–æ–ø
            const shouldUpdateStop =
              this.activePosition.side === "Buy"
                ? optimalStopPrice > this.activePosition.lastTrailingStopPrice
                : optimalStopPrice < this.activePosition.lastTrailingStopPrice;

            if (shouldUpdateStop) {
              try {
                // –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–æ–ø-–ª–æ—Å—Å
                const activeOrders = await this.client.getActiveOrders({
                  category: "linear",
                  symbol: this.SYMBOL
                });

                if (activeOrders.retCode === 0 && activeOrders.result?.list) {
                  for (const order of activeOrders.result.list) {
                    if (order.reduceOnly) {
                      const orderPrice = Number(order.price);
                      const isSL =
                        this.activePosition.side === "Buy"
                          ? orderPrice < currentPrice
                          : orderPrice > currentPrice;

                      if (isSL) {
                        await this.client.cancelOrder({
                          category: "linear",
                          symbol: this.SYMBOL,
                          orderId: order.orderId
                        });
                        logger.info(
                          `‚úÖ –û—Ç–º–µ–Ω–µ–Ω —Å—Ç–∞—Ä—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${order.orderId} @ ${orderPrice}`
                        );
                      }
                    }
                  }
                }

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å
                const slResponse = await this.client.submitOrder({
                  category: "linear",
                  symbol: this.SYMBOL,
                  side: this.activePosition.side === "Buy" ? "Sell" : "Buy",
                  orderType: "Limit",
                  qty: position.size.toString(),
                  price: optimalStopPrice.toString(),
                  triggerPrice: optimalStopPrice.toString(),
                  triggerDirection: this.activePosition.side === "Buy" ? 2 : 1,
                  timeInForce: "GTC",
                  triggerBy: "MarkPrice",
                  reduceOnly: true,
                  orderLinkId: `sl_trailing_${Date.now()}`
                });

                if (slResponse.retCode === 0) {
                  this.activePosition.lastTrailingStopPrice = optimalStopPrice;
                  logger.info(
                    `üîÑ –û–ë–ù–û–í–õ–ï–ù –¢–†–ï–ô–õ–ò–ù–ì-–°–¢–û–ü: ${optimalStopPrice.toFixed(
                      2
                    )} (–¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã: ${currentPrice.toFixed(2)})`
                  );

                  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞
                  const trailingUpdateMessage = this.notificationService.formatTrailingStopUpdate(
                    optimalStopPrice,
                    this.TRAILING_DISTANCE,
                    currentPrice
                  );
                  await this.callbacks.onTradeOperation(trailingUpdateMessage);
                } else {
                  logger.error(
                    `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞: ${slResponse.retMsg}`
                  );
                }
              } catch (error) {
                logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞:", error);
              }
            }
          }
        }
      }
    } catch (error) {
      logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏:", error);
    }
  }

  private stopTrailingStopCheck(): void {
    if (this.trailingStopCheckInterval) {
      clearInterval(this.trailingStopCheckInterval);
    }
  }

  public async performRestCheck(): Promise<void> {
    const currentTime = Date.now();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —Ä–∞–Ω–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    if (currentTime - this.lastRestCheckTime < this.REST_CHECK_INTERVAL) {
      return;
    }

    try {
      logger.info("üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ REST API...");

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏ —á–µ—Ä–µ–∑ REST API
      const klineResponse = await this.client.getKline({
        category: "linear",
        symbol: this.SYMBOL,
        interval: "240", // 4h
        limit: 5 // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–≤–µ—á–µ–π
      });

      if (klineResponse.retCode === 0 && klineResponse.result?.list) {
        const candles: Candle[] = klineResponse.result.list
          .map(item => ({
            timestamp: Number(item[0]),
            open: Number(item[1]),
            high: Number(item[2]),
            low: Number(item[3]),
            close: Number(item[4]),
            volume: Number(item[5]),
            turnover: Number(item[6]),
            confirmed: true,
            isGreen: Number(item[4]) >= Number(item[1])
          }))
          .reverse(); // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤, —á—Ç–æ–±—ã —Å–≤–µ—á–∏ —à–ª–∏ –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º

        logger.info(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${candles.length} —Å–≤–µ—á–µ–π —á–µ—Ä–µ–∑ REST API`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–≤–µ—á—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–∏–≥–Ω–∞–ª–∞
        for (let i = 1; i < candles.length; i++) {
          const currentCandle = candles[i];
          const previousCandle = candles[i - 1];

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–º
          this.checkVolumeSpike(currentCandle, previousCandle);

          // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Å–∏–≥–Ω–∞–ª, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å–≤–µ—á—É –∫–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â—É—é
          if (this.currentSignal?.isActive) {
            await this.processCompletedCandle(currentCandle, candles);
          }
        }

        this.lastRestCheckTime = currentTime;
        logger.info("‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ REST API –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
      }
    } catch (error) {
      logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ REST –ø—Ä–æ–≤–µ—Ä–∫–∏:", error);
    }
  }

  private async performRetrospectiveAnalysis(
    allCandles: Candle[]
  ): Promise<void> {
    logger.info(
      "üîç –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤..."
    );

    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    logger.info(`üìä –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ —Å–≤–µ—á–µ–π: ${allCandles.length}`);
    logger.info("üìä –°–ü–ò–°–û–ö –í–°–ï–• –ü–û–õ–£–ß–ï–ù–ù–´–• –°–í–ï–ß–ï–ô:");
    allCandles.forEach(candle => {
      logger.info(
        `   ${new Date(candle.timestamp).toLocaleTimeString()}: ${
          candle.confirmed ? "‚úÖ –ó–∞–∫—Ä—ã—Ç–∞" : "‚è≥ –§–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è"
        }, V=${candle.volume.toFixed(2)}, ${candle.isGreen ? "üü¢" : "üî¥"}`
      );
    });

    // –§–∏–ª—å—Ç—Ä—É–µ–º –¢–û–õ–¨–ö–û –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–≤–µ—á–∏ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    const completedCandles = allCandles
      .filter(candle => candle.confirmed === true)
      .sort((a, b) => a.timestamp - b.timestamp);

    if (completedCandles.length < 3) {
      logger.info(
        "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3)"
      );
      return;
    }

    // –ë–µ—Ä–µ–º —Ç—Ä–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ó–ê–ö–†–´–¢–´–ï —Å–≤–µ—á–∏
    const lastClosedCandle = completedCandles[completedCandles.length - 1];
    const middleClosedCandle = completedCandles[completedCandles.length - 2];
    const potentialSignalCandle = completedCandles[completedCandles.length - 3];

    logger.info(`\nüìä –ê–ù–ê–õ–ò–ó –ü–û–°–õ–ï–î–ù–ò–• –¢–†–ï–• –ó–ê–ö–†–´–¢–´–• –°–í–ï–ß–ï–ô:`);
    logger.info(
      `   1Ô∏è‚É£ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —Å–∏–≥–Ω–∞–ª—å–Ω–∞—è (${new Date(
        potentialSignalCandle.timestamp
      ).toLocaleTimeString()}): V=${potentialSignalCandle.volume.toFixed(2)}, ${
        potentialSignalCandle.isGreen ? "üü¢" : "üî¥"
      }, Open=${potentialSignalCandle.open}, Close=${
        potentialSignalCandle.close
      }`
    );
    logger.info(
      `   2Ô∏è‚É£ –°—Ä–µ–¥–Ω—è—è (${new Date(
        middleClosedCandle.timestamp
      ).toLocaleTimeString()}): V=${middleClosedCandle.volume.toFixed(2)}, ${
        middleClosedCandle.isGreen ? "üü¢" : "üî¥"
      }, Open=${middleClosedCandle.open}, Close=${middleClosedCandle.close}`
    );
    logger.info(
      `   3Ô∏è‚É£ –ü–æ—Å–ª–µ–¥–Ω—è—è (${new Date(
        lastClosedCandle.timestamp
      ).toLocaleTimeString()}): V=${lastClosedCandle.volume.toFixed(2)}, ${
        lastClosedCandle.isGreen ? "üü¢" : "üî¥"
      }, Open=${lastClosedCandle.open}, Close=${lastClosedCandle.close}`
    );
    logger.info(`   üéØ –ü–æ—Ä–æ–≥ –æ–±—ä–µ–º–∞: ${this.VOLUME_THRESHOLD}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π —Å–≤–µ—á–∏
    if (potentialSignalCandle.volume >= this.VOLUME_THRESHOLD) {
      logger.info(
        `üö® –û–ë–ù–ê–†–£–ñ–ï–ù –°–ò–ì–ù–ê–õ: –í–´–°–û–ö–ò–ô –û–ë–™–ï–ú (${potentialSignalCandle.volume.toFixed(
          2
        )}) –í –°–í–ï–ß–ï ${new Date(
          potentialSignalCandle.timestamp
        ).toLocaleTimeString()}!`
      );
      logger.info(
        `üí∞ –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π: ${potentialSignalCandle.close}`
      );
      logger.info(
        `üìä –¶–≤–µ—Ç —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π —Å–≤–µ—á–∏: ${
          potentialSignalCandle.isGreen ? "üü¢ –ó–µ–ª–µ–Ω–∞—è" : "üî¥ –ö—Ä–∞—Å–Ω–∞—è"
        }`
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–µ–¥—É—é—â–∏–µ –¥–≤–µ —Å–≤–µ—á–∏ –∏–º–µ—é—Ç –º–µ–Ω—å—à–∏–π –æ–±—ä–µ–º
      if (
        middleClosedCandle.volume <= potentialSignalCandle.volume &&
        lastClosedCandle.volume <= potentialSignalCandle.volume
      ) {
        // –°–æ–∑–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π —Å–≤–µ—á–∏
        this.currentSignal = {
          candle: potentialSignalCandle,
          isActive: true,
          waitingForLowerVolume: true
        };
        this.usedSignalTimestamps.add(potentialSignalCandle.timestamp);

        logger.info(
          `‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï: –û–±–µ —Å–ª–µ–¥—É—é—â–∏–µ —Å–≤–µ—á–∏ –∏–º–µ—é—Ç –º–µ–Ω—å—à–∏–π –æ–±—ä–µ–º`
        );
        logger.info(
          `‚ö°Ô∏è –ì–û–¢–û–í–´ –ö –í–•–û–î–£ –í ${
            potentialSignalCandle.isGreen ? "–®–û–†–¢" : "–õ–û–ù–ì"
          }`
        );

        // –Ø–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–∫—Ä—ã—Ç–æ–π —Å–≤–µ—á–∏
        logger.info(
          "üéØ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–∫—Ä—ã—Ç–æ–π —Å–≤–µ—á–∏ –¥–ª—è –≤—Ö–æ–¥–∞..."
        );
        await this.processCompletedCandle(lastClosedCandle, completedCandles);
      } else {
        logger.info(
          `‚ö†Ô∏è –ü–†–û–ü–£–°–ö: –ù–µ –≤—Å–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ —Å–≤–µ—á–∏ –∏–º–µ—é—Ç –º–µ–Ω—å—à–∏–π –æ–±—ä–µ–º (${middleClosedCandle.volume.toFixed(
            2
          )}, ${lastClosedCandle.volume.toFixed(2)})`
        );
      }
    } else {
      logger.info(
        `‚ÑπÔ∏è –û–±—ä–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π —Å–≤–µ—á–∏ (${potentialSignalCandle.volume.toFixed(
          2
        )}) –º–µ–Ω—å—à–µ –ø–æ—Ä–æ–≥–∞ ${this.VOLUME_THRESHOLD}`
      );
    }
  }

  private async analyzeLastCandle(): Promise<void> {
    // –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å–≤–µ—á–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ
    const completedCandles = this.candleHistory
      .filter(candle => candle.confirmed)
      .sort((a, b) => a.timestamp - b.timestamp);

    if (completedCandles.length < 2) {
      logger.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞");
      return;
    }

    logger.info(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–≤–µ—á–µ–π –Ω–∞ –≥–æ—Ç–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã...`);

    // –ù–∞—Ö–æ–¥–∏–º —Å–≤–µ—á—É —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –æ–±—ä–µ–º–æ–º —Å—Ä–µ–¥–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π
    const maxVolumeCandle = completedCandles.reduce(
      (max, current) => (current.volume > max.volume ? current : max),
      completedCandles[0]
    );

    // –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â—É—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—É—é —Å–≤–µ—á—É –ø–æ—Å–ª–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–æ –æ–±—ä–µ–º—É
    const maxVolumeCandleIndex = completedCandles.findIndex(
      c => c.timestamp === maxVolumeCandle.timestamp
    );
    const confirmingCandle = completedCandles[maxVolumeCandleIndex + 1];

    if (!confirmingCandle) {
      logger.info("–ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–π —Å–≤–µ—á–∏ –ø–æ—Å–ª–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π");
      return;
    }

    logger.info(`üìä –ê–ù–ê–õ–ò–ó –ü–û–°–õ–ï–î–ù–ò–• –î–í–£–• –ó–ê–ö–†–´–¢–´–• –°–í–ï–ß–ï–ô:`);
    logger.info(
      `   üìà –°–∏–≥–Ω–∞–ª—å–Ω–∞—è (${new Date(
        maxVolumeCandle.timestamp
      ).toLocaleTimeString()}): V=${maxVolumeCandle.volume.toFixed(2)}, ${
        maxVolumeCandle.isGreen ? "üü¢" : "üî¥"
      }, Open=${maxVolumeCandle.open}, Close=${maxVolumeCandle.close}`
    );
    logger.info(
      `   üìà –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∞—è (${new Date(
        confirmingCandle.timestamp
      ).toLocaleTimeString()}): V=${confirmingCandle.volume.toFixed(2)}, ${
        confirmingCandle.isGreen ? "üü¢" : "üî¥"
      }, Open=${confirmingCandle.open}, Close=${confirmingCandle.close}`
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–º —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π —Å–≤–µ—á–∏
    if (maxVolumeCandle.volume >= this.VOLUME_THRESHOLD) {
      logger.info(
        `üö® –û–ë–ù–ê–†–£–ñ–ï–ù –°–ò–ì–ù–ê–õ: –í–´–°–û–ö–ò–ô –û–ë–™–ï–ú (${maxVolumeCandle.volume.toFixed(
          2
        )}) –í –°–í–ï–ß–ï ${new Date(
          maxVolumeCandle.timestamp
        ).toLocaleTimeString()}!`
      );
      logger.info(`üí∞ –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: ${maxVolumeCandle.close}`);
      logger.info(
        `üìä –¶–≤–µ—Ç —Å–≤–µ—á–∏: ${
          maxVolumeCandle.isGreen ? "üü¢ –ó–µ–ª–µ–Ω–∞—è" : "üî¥ –ö—Ä–∞—Å–Ω–∞—è"
        }`
      );

      // –°–æ–∑–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª
      this.currentSignal = {
        candle: maxVolumeCandle,
        isActive: true,
        waitingForLowerVolume: true
      };
      this.usedSignalTimestamps.add(maxVolumeCandle.timestamp);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â—É—é —Å–≤–µ—á—É
      if (confirmingCandle.volume <= maxVolumeCandle.volume) {
        logger.info(
          `‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∞—è —Å–≤–µ—á–∞ –∏–º–µ–µ—Ç –º–µ–Ω—å—à–∏–π –æ–±—ä–µ–º`
        );
        logger.info(
          `‚ö°Ô∏è –ì–û–¢–û–í–´ –ö –í–•–û–î–£ –í ${maxVolumeCandle.isGreen ? "–®–û–†–¢" : "–õ–û–ù–ì"}`
        );
        await this.processCompletedCandle(confirmingCandle, completedCandles);
      }
    }
  }
}
