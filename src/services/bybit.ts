import { RestClientV5, WebsocketClient, WsKey, WS_KEY_MAP } from "bybit-api";
import { logger } from "../utils/logger";
import { Candle } from "./bybit.types";
import { NotificationService } from "./notificationService";
import {
  TradingLogicService,
  TradingLogicCallbacks
} from "./tradingLogicService";

export class BybitService {
  private wsClient!: WebsocketClient;
  private readonly client: RestClientV5;
  private candleHistory: Candle[] = [];
  private lastLogTime: number = 0;
  private restCheckInterval: NodeJS.Timeout | null = null;
  private readonly REST_CHECK_INTERVAL = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

  private readonly apiKey: string;
  private readonly apiSecret: string;

  private readonly SYMBOL = "SOLUSDT";
  private readonly CANDLE_INTERVAL: string = "60";
  private readonly CANDLE_HISTORY_SIZE = 6;
  private readonly INITIAL_HISTORY_HOURS = 48;
  private readonly LOG_INTERVAL = 15 * 60 * 1000;
  private readonly RETROSPECTIVE_ANALYSIS_SIZE = 12;

  private readonly TRADE_SIZE_USD = 5000;
  private readonly TAKE_PROFIT_POINTS = 3;
  private readonly STOP_LOSS_POINTS = 3;
  private readonly TRAILING_ACTIVATION_POINTS = 1;
  private readonly TRAILING_DISTANCE = 0.5;
  private readonly VOLUME_THRESHOLD = 600000;
  private readonly USE_TRAILING_STOP: boolean = false; // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø boolean

  private onTradeUpdate: (message: string) => void;
  private onSignalUpdate: (message: string) => void;

  private notificationService: NotificationService;
  private tradingLogicService: TradingLogicService;

  constructor(
    apiKey: string,
    apiSecret: string,
    onTradeUpdate: (message: string) => void,
    onSignalUpdate: (message: string) => void,
    volumeMultiplierParam?: number,
    useTrailingStop: boolean = false // –ù–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
  ) {
    this.apiKey = apiKey;
    this.apiSecret = apiSecret;
    this.client = new RestClientV5({
      key: apiKey,
      secret: apiSecret,
      recv_window: 5000
    });
    this.onTradeUpdate = onTradeUpdate;
    this.onSignalUpdate = onSignalUpdate;
    this.USE_TRAILING_STOP = useTrailingStop;

    this.notificationService = new NotificationService(
      this.SYMBOL,
      this.TRADE_SIZE_USD,
      this.STOP_LOSS_POINTS
    );

    const tradingLogicCallbacks: TradingLogicCallbacks = {
      onTradeOperation: this.onTradeUpdate,
      onSignalDetected: this.onSignalUpdate
    };

    this.tradingLogicService = new TradingLogicService(
      this.client,
      this.notificationService,
      tradingLogicCallbacks,
      {
        symbol: this.SYMBOL,
        tradeSizeUsd: this.TRADE_SIZE_USD,
        takeProfitPoints: this.TAKE_PROFIT_POINTS,
        stopLossPoints: this.STOP_LOSS_POINTS,
        trailingActivationPoints: this.TRAILING_ACTIVATION_POINTS,
        trailingDistance: this.TRAILING_DISTANCE,
        volumeThreshold: this.VOLUME_THRESHOLD,
        useTrailingStop: this.USE_TRAILING_STOP // –ü–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä
      }
    );
  }

  public async start(): Promise<void> {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∏–Ω–∏–º—É–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –æ–±—ä–µ–º–æ–≤
      const allCandles = await this.loadInitialCandleHistory();

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
      await this.performRetrospectiveAnalysis(allCandles);

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
      await this.tradingLogicService.syncPositionState(allCandles);

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ü–û–°–õ–ï–î–ù–Æ–Æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Å–≤–µ—á—É –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      await this.analyzeLastCandle();

      // –ó–∞–≤–µ—Ä—à–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
      this.tradingLogicService.finishInitialHistoryAnalysis();

      this.subscribeToCandleUpdates();
      const startMessage =
        `ü§ñ –ë–û–¢ –ó–ê–ü–£–©–ï–ù\n\n` +
        `üìä –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞: ${this.SYMBOL}\n` +
        `üí∞ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: $${this.TRADE_SIZE_USD}\n` +
        `‚è±Ô∏è –¢–∞–π–º—Ñ—Ä–µ–π–º: ${this.CANDLE_INTERVAL}h\n` +
        `üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: ${this.candleHistory.length}\n` +
        `üö´ –†–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω`;
      this.onTradeUpdate(startMessage);
      logger.info(
        "–°–µ—Ä–≤–∏—Å Bybit –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤–µ—á–µ–π –∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ."
      );
    } catch (error) {
      logger.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ Bybit:", error);
      throw error;
    }
  }

  public stop(): void {
    if (this.wsClient) {
      this.wsClient.close(WS_KEY_MAP.linearPublic);
    }
    if (this.restCheckInterval) {
      clearInterval(this.restCheckInterval);
      this.restCheckInterval = null;
    }
    logger.info("–°–µ—Ä–≤–∏—Å Bybit –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
  }

  private async loadInitialCandleHistory(): Promise<Candle[]> {
    try {
      const limit = 3; // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º 3 —Å–≤–µ—á–∏ (2 –∑–∞–∫—Ä—ã—Ç—ã–µ + 1 —Ç–µ–∫—É—â–∞—è)
      const endTime = Date.now();
      const startTime = endTime - this.INITIAL_HISTORY_HOURS * 60 * 60 * 1000;

      const response = await this.client.getKline({
        category: "linear",
        symbol: this.SYMBOL,
        interval: this.CANDLE_INTERVAL as any,
        start: startTime,
        end: endTime,
        limit: limit
      });

      if (response.retCode === 0 && response.result && response.result.list) {
        const allCandles = response.result.list
          .map(k => {
            const timestamp = Number(k[0]);
            const open = Number(k[1]);
            const high = Number(k[2]);
            const low = Number(k[3]);
            const close = Number(k[4]);
            const volume = Number(k[5]);
            const turnover = Number(k[6]);
            const isGreen = close >= open;

            return {
              timestamp,
              open,
              high,
              low,
              close,
              volume,
              turnover,
              confirmed: true,
              isGreen
            };
          })
          .sort((a, b) => a.timestamp - b.timestamp);

        if (allCandles.length < 3) {
          logger.error(
            `‚ùå –ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–µ—á–µ–π: ${allCandles.length}, –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3`
          );
          throw new Error("Insufficient candles received");
        }

        // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–≤–µ—á–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        logger.info(`üîç –ö–û–ù–¢–ï–ö–°–¢ –ê–ù–ê–õ–ò–ó–ê - –í—Å–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–≤–µ—á–∏:`);
        allCandles.forEach(candle => {
          logger.info(
            `   ${new Date(candle.timestamp).toLocaleTimeString()}: ${
              candle.isGreen ? "üü¢" : "üî¥"
            } Open=${candle.open} Close=${
              candle.close
            } Vol=${candle.volume.toFixed(2)}`
          );
        });

        // –ë–µ—Ä–µ–º –¥–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ó–ê–ö–†–´–¢–´–ï —Å–≤–µ—á–∏ (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â—É—é —Ñ–æ—Ä–º–∏—Ä—É—é—â—É—é—Å—è)
        const lastTwoClosedCandles = allCandles.slice(-3, -1);

        logger.info(`üîç –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–µ—Ä–µ–º –¥–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ó–ê–ö–†–´–¢–´–ï —Å–≤–µ—á–∏:`);
        lastTwoClosedCandles.forEach(candle => {
          logger.info(
            `   ${new Date(candle.timestamp).toLocaleTimeString()}: ${
              candle.isGreen ? "üü¢" : "üî¥"
            } Open=${candle.open} Close=${
              candle.close
            } Vol=${candle.volume.toFixed(2)}`
          );
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ 3 —Å–≤–µ—á–∏ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
        this.candleHistory = allCandles;

        logger.info(
          `–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allCandles.length} —Å–≤–µ—á–µ–π, –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º 2 –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç—ã–µ`
        );
        return allCandles;
      } else {
        logger.error(
          "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —Å–≤–µ—á–µ–π:",
          response.retMsg
        );
        throw new Error(
          "Failed to load initial candle history: " + response.retMsg
        );
      }
    } catch (error) {
      logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–≤–µ—á–µ–π:", error);
      throw error;
    }
  }

  private async performRetrospectiveAnalysis(
    allCandles: Candle[]
  ): Promise<void> {
    logger.info(
      "üîç –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤..."
    );

    if (allCandles.length < 3) {
      logger.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–µ—á–µ–π –¥–ª—è —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞");
      return;
    }

    // –ë–µ—Ä–µ–º –¥–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ó–ê–ö–†–´–¢–´–ï —Å–≤–µ—á–∏ (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â—É—é —Ñ–æ—Ä–º–∏—Ä—É—é—â—É—é—Å—è)
    const lastClosedCandle = allCandles[allCandles.length - 2];
    const previousClosedCandle = allCandles[allCandles.length - 3];

    if (!lastClosedCandle.confirmed || !previousClosedCandle.confirmed) {
      logger.info(`‚è≥ –ü—Ä–æ–ø—É—Å–∫ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Å–≤–µ—á–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏`);
      return;
    }

    logger.info("üìä –ê–ù–ê–õ–ò–ó –û–ë–™–ï–ú–û–í –ó–ê–ö–†–´–¢–´–• –°–í–ï–ß–ï–ô:");
    logger.info(
      `   üìà –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–∫—Ä—ã—Ç–∞—è (${new Date(
        lastClosedCandle.timestamp
      ).toLocaleTimeString()}): V=${lastClosedCandle.volume.toFixed(2)}, ${
        lastClosedCandle.isGreen ? "üü¢" : "üî¥"
      }`
    );
    logger.info(
      `   üìà –ü—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞–∫—Ä—ã—Ç–∞—è (${new Date(
        previousClosedCandle.timestamp
      ).toLocaleTimeString()}): V=${previousClosedCandle.volume.toFixed(2)}, ${
        previousClosedCandle.isGreen ? "üü¢" : "üî¥"
      }`
    );
    logger.info(`   üéØ –ü–æ—Ä–æ–≥ –æ–±—ä–µ–º–∞: ${this.VOLUME_THRESHOLD}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–º –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
    this.tradingLogicService.checkVolumeSpike(
      lastClosedCandle,
      previousClosedCandle
    );

    // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Å–∏–≥–Ω–∞–ª, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å–≤–µ—á—É –∫–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â—É—é
    if (this.tradingLogicService.getCurrentSignal()?.isActive) {
      await this.tradingLogicService.processCompletedCandle(
        lastClosedCandle,
        [previousClosedCandle, lastClosedCandle] // –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–≤–µ –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–≤–µ—á–∏
      );
    }
  }

  private subscribeToCandleUpdates(): void {
    this.wsClient = new WebsocketClient({
      key: this.apiKey,
      secret: this.apiSecret,
      market: "v5",

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–æ 30 —Å–µ–∫—É–Ω–¥
      pingInterval: 30000,

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è pong –¥–æ 10 —Å–µ–∫—É–Ω–¥
      pongTimeout: 10000,

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –¥–æ 3 —Å–µ–∫—É–Ω–¥
      reconnectTimeout: 3000
    });

    this.wsClient.subscribeV5(
      [`kline.${this.CANDLE_INTERVAL}.${this.SYMBOL}`],
      "linear"
    );

    this.wsClient.on("update", (data: any) => {
      if (data.topic && data.topic.startsWith("kline")) {
        const candleData = data.data[0];
        this.updateCandleHistory({
          timestamp: Number(candleData.start),
          open: Number(candleData.open),
          high: Number(candleData.high),
          low: Number(candleData.low),
          close: Number(candleData.close),
          volume: Number(candleData.volume),
          turnover: Number(candleData.turnover),
          confirmed: candleData.confirm === true,
          isGreen: Number(candleData.close) >= Number(candleData.open)
        });
      }
    });

    this.wsClient.on("close", () => {
      logger.info(
        "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ WebSocket –∑–∞–∫—Ä—ã—Ç–æ. –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥..."
      );
      setTimeout(() => {
        logger.info("–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket...");
        this.subscribeToCandleUpdates();
      }, 5000);
    });

    this.wsClient.on("open", (evt: { wsKey: WsKey; event: any }) => {
      logger.info(`–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ WebSocket –æ—Ç–∫—Ä—ã—Ç–æ. wsKey: ${evt.wsKey}`);
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    this.wsClient.on("reconnect", ({ wsKey }: { wsKey: string }) => {
      logger.info(`WebSocket –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è... wsKey: ${wsKey}`);
    });

    this.wsClient.on("reconnected", (data: any) => {
      logger.info(`WebSocket –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω. wsKey: ${data?.wsKey}`);
    });
  }

  private updateCandleHistory(newCandle: Candle): void {
    const currentTime = Date.now();
    if (currentTime - this.lastLogTime > this.LOG_INTERVAL) {
      logger.info(
        `–¢–µ–∫—É—â–∏–π –æ–±—ä–µ–º —Ñ–æ—Ä–º–∏—Ä—É—é—â–µ–π—Å—è —Å–≤–µ—á–∏ (${new Date(
          newCandle.timestamp
        ).toLocaleTimeString()}): ${newCandle.volume.toFixed(2)}, –ó–∞–∫—Ä—ã—Ç–∏–µ: ${
          newCandle.close
        }`
      );
      this.lastLogTime = currentTime;
    }

    const existingCandleIndex = this.candleHistory.findIndex(
      c => c.timestamp === newCandle.timestamp
    );

    if (existingCandleIndex !== -1) {
      this.candleHistory[existingCandleIndex] = newCandle;
    } else {
      logger.info(
        `üÜï –ü–û–õ–£–ß–ï–ù–ê –ù–û–í–ê–Ø –°–í–ï–ß–ê (${new Date(
          newCandle.timestamp
        ).toLocaleTimeString()}): O=${newCandle.open} H=${newCandle.high} L=${
          newCandle.low
        } C=${newCandle.close} V=${newCandle.volume.toFixed(2)}`
      );
      this.candleHistory.push(newCandle);
      if (this.candleHistory.length > this.CANDLE_HISTORY_SIZE) {
        this.candleHistory.shift();
      }
    }

    this.candleHistory.sort((a, b) => a.timestamp - b.timestamp);

    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–∞—è —Å–≤–µ—á–∞ (–Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π)
    if (existingCandleIndex === -1) {
      logger.info(`üìä –ò–°–¢–û–†–ò–Ø –°–í–ï–ß–ï–ô –ü–û–°–õ–ï –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ù–û–í–û–ô:`);
      this.candleHistory.forEach((candle, index) => {
        logger.info(
          `   ${index}: ${new Date(
            candle.timestamp
          ).toLocaleTimeString()} V=${candle.volume.toFixed(2)} ${
            candle.confirmed ? "‚úÖ" : "‚è≥"
          }`
        );
      });

      logger.info(
        `üîÑ –ü–µ—Ä–µ–¥–∞–µ–º –Ω–æ–≤—É—é —Å–≤–µ—á—É –≤ TradingLogicService –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π –≤—Ö–æ–¥–∞...`
      );
      this.tradingLogicService.processCompletedCandle(newCandle, [
        ...this.candleHistory
      ]);
    }

    if (newCandle.confirmed) {
      logger.info(
        `üïØÔ∏è –ó–ê–í–ï–†–®–ï–ù–ù–ê–Ø —Å–≤–µ—á–∞ (${new Date(
          newCandle.timestamp
        ).toLocaleTimeString()}): O=${newCandle.open} H=${newCandle.high} L=${
          newCandle.low
        } C=${newCandle.close} V=${newCandle.volume.toFixed(2)}`
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å–≤–µ—á–∞ —Ç–æ–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
      const previousCandle = this.candleHistory[this.candleHistory.length - 2];
      if (!previousCandle?.confirmed) {
        logger.info(
          `‚è≥ –ü–†–û–ü–£–°–ö –û–ë–†–ê–ë–û–¢–ö–ò: –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å–≤–µ—á–∞ (${new Date(
            previousCandle?.timestamp
          ).toLocaleTimeString()}) –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞`
        );
        return;
      }

      this.processCompletedCandle(newCandle);
    }
  }

  private processCompletedCandle(completedCandle: Candle): void {
    if (this.candleHistory.length < 2) {
      return;
    }

    const completedCandleActualIndex = this.candleHistory.findIndex(
      c => c.timestamp === completedCandle.timestamp
    );
    if (completedCandleActualIndex < 1) {
      logger.warn(
        `–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å–≤–µ—á–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Å–≤–µ—á–∏ ${new Date(
          completedCandle.timestamp
        ).toLocaleTimeString()}`
      );
      return;
    }
    const previousCandle = this.candleHistory[completedCandleActualIndex - 1];

    this.tradingLogicService.checkVolumeSpike(completedCandle, previousCandle);
    this.tradingLogicService.processCompletedCandle(completedCandle, [
      ...this.candleHistory
    ]);
  }

  public async getAccountBalance(): Promise<any> {
    try {
      const response = await this.client.getWalletBalance({
        accountType: "UNIFIED"
      });
      if (
        response.retCode === 0 &&
        response.result.list &&
        response.result.list.length > 0
      ) {
        return response.result.list[0];
      }
      logger.error(
        "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫:",
        response.retMsg
      );
      return null;
    } catch (error) {
      logger.error("–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:", error);
      return null;
    }
  }

  private async analyzeLastCandle(): Promise<void> {
    if (this.candleHistory.length >= 3) {
      logger.info(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π –Ω–∞ –≥–æ—Ç–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã...`);

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç –ù–û–í–´–• –∫ –°–¢–ê–†–´–ú
      for (let i = this.candleHistory.length - 1; i > 0; i--) {
        const currentCandle = this.candleHistory[i];
        const previousCandle = this.candleHistory[i - 1];

        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —Å–≤–µ—á–∏
        if (!currentCandle.confirmed || !previousCandle.confirmed) {
          logger.info(
            `‚è≥ –ü—Ä–æ–ø—É—Å–∫ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π: ${new Date(
              currentCandle.timestamp
            ).toLocaleTimeString()} –∏ ${new Date(
              previousCandle.timestamp
            ).toLocaleTimeString()}`
          );
          continue;
        }

        logger.info(
          `   –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ—á–∏ ${new Date(
            currentCandle.timestamp
          ).toLocaleTimeString()}: V=${currentCandle.volume.toFixed(2)}`
        );

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–º –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
        this.tradingLogicService.checkVolumeSpike(
          currentCandle,
          previousCandle
        );

        // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Å–∏–≥–Ω–∞–ª, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å–≤–µ—á—É –∫–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â—É—é
        if (this.tradingLogicService.getCurrentSignal()?.isActive) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å–≤–µ—á—É –ø–æ—Å–ª–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π
          if (i + 1 < this.candleHistory.length) {
            const confirmingCandle = this.candleHistory[i + 1];
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—É—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â—É—é —Å–≤–µ—á—É
            if (!confirmingCandle.confirmed) {
              logger.info(
                `‚è≥ –ü—Ä–æ–ø—É—Å–∫ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–π —Å–≤–µ—á–∏: ${new Date(
                  confirmingCandle.timestamp
                ).toLocaleTimeString()}`
              );
              continue;
            }
            await this.tradingLogicService.processCompletedCandle(
              confirmingCandle,
              this.candleHistory
            );
          }
        }
      }
    }
  }
}
