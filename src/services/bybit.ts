import { RestClientV5, WebsocketClient, WSClientConfigurableOptions, OrderSideV5 } from 'bybit-api';
import { logger } from '../utils/logger';
import { Candle, VolumeSignal } from '../types/candle';

const CANDLE_HISTORY_SIZE = 4;
const INITIAL_HISTORY_HOURS = 1;
const CANDLE_INTERVAL = '15';
const WS_MARKET = 'v5';
const CATEGORY = 'linear';

type WSEventHandler = (data: any) => void;
type WSErrorHandler = (error: unknown) => void;
type WSCloseHandler = () => void;

export class BybitService {
    private wsClient!: WebsocketClient;
    private readonly client: RestClientV5;
    private readonly SYMBOL = 'BTCUSDT';
    private readonly TRADE_SIZE_USD = 10000;
    private readonly TAKE_PROFIT_POINTS = 150;
    private readonly STOP_LOSS_POINTS = 170;
    private readonly TRAILING_ACTIVATION_POINTS = 150;  // –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ç—Ä–µ–π–ª–∏–Ω–≥–∞ –ø—Ä–∏ –ø—Ä–∏–±—ã–ª–∏ 150 –ø—É–Ω–∫—Ç–æ–≤
    private readonly TRAILING_DISTANCE = 50;           // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–µ–π–ª–∏–Ω–≥–∞ –æ—Ç —Ü–µ–Ω—ã
    private candleHistory: Candle[] = [];
    private currentSignal: VolumeSignal | null = null;
    private readonly volumeMultiplier: number;
    private readonly apiKey: string;
    private readonly apiSecret: string;
    private lastLogTime: number = 0;
    private readonly LOG_INTERVAL = 5 * 60 * 1000;
    private trailingStopInterval: NodeJS.Timeout | null = null;
    private activePosition: {
        side: OrderSideV5;
        entryPrice: number;
        entryTime: number;
        isTrailingActive: boolean;
        lastTrailingStopPrice: number | null;
    } | null = null;

    constructor(
        apiKey: string,
        apiSecret: string,
        volumeMultiplier: number = 4
    ) {
        if (!apiKey || !apiSecret) {
            throw new Error('API –∫–ª—é—á–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã');
        }

        this.volumeMultiplier = volumeMultiplier;
        this.apiKey = apiKey;
        this.apiSecret = apiSecret;

        this.client = new RestClientV5({
            key: apiKey,
            secret: apiSecret,
            testnet: false
        });

        this.initializeWebSocket();
    }

    private initializeWebSocket(): void {
        const wsConfig: WSClientConfigurableOptions = {
            key: this.apiKey,
            secret: this.apiSecret,
            market: WS_MARKET,
            testnet: false
        };

        this.wsClient = new WebsocketClient(wsConfig);
        this.setupWebSocketHandlers();
    }

    private setupWebSocketHandlers(): void {
        (this.wsClient as any).on('update', ((data: any) => {
            if (data.topic?.startsWith('kline')) {
                this.handleKlineUpdate(data);
            }
        }) as WSEventHandler);

        (this.wsClient as any).on('error', ((error: unknown) => {
            logger.error('WebSocket error:', error);
        }) as WSErrorHandler);

        (this.wsClient as any).on('close', (() => {
            logger.warn('WebSocket connection closed');
            this.reconnect();
        }) as WSCloseHandler);
    }

    private async reconnect(): Promise<void> {
        logger.info('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
        try {
            await this.wsClient.closeAll();
            await new Promise(resolve => setTimeout(resolve, 1000));
            this.initializeWebSocket();
            await this.subscribeToSymbol();
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
            setTimeout(() => this.reconnect(), 5000);
        }
    }

    private async initializeCandleHistory(): Promise<void> {
        try {
            logger.info(`üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —Å–≤–µ—á–µ–π –¥–ª—è ${this.SYMBOL}`);
            
            const endTime = Date.now();
            const startTime = endTime - (INITIAL_HISTORY_HOURS * 60 * 60 * 1000);

            const response = await this.client.getKline({
                category: CATEGORY,
                symbol: this.SYMBOL,
                interval: CANDLE_INTERVAL,
                start: Math.floor(startTime),
                end: Math.floor(endTime),
                limit: CANDLE_HISTORY_SIZE
            });

            if (response.retCode === 0 && response.result.list) {
                const candles: Candle[] = response.result.list.reverse().map((item) => this.mapKlineToCandle(item));
                this.candleHistory = candles;
                this.logInitialCandles(candles);
            }
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–≤–µ—á–µ–π:', error);
            throw error;
        }
    }

    private mapKlineToCandle(item: any[]): Candle {
        return {
            timestamp: Number(item[0]),
            open: Number(item[1]),
            high: Number(item[2]),
            low: Number(item[3]),
            close: Number(item[4]),
            volume: Number(item[5]),
            symbol: this.SYMBOL,
            isGreen: Number(item[4]) >= Number(item[1]),
            confirmed: true
        };
    }

    private logInitialCandles(candles: Candle[]): void {
        logger.info(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${candles.length} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π`);
        
        const lastCandle = candles[candles.length - 1];
        const previousCandle = candles[candles.length - 2];
        
        if (lastCandle && previousCandle) {
            logger.info('üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏:');
            logger.info(`–ü—Ä–µ–¥—ã–¥—É—â–∞—è (${new Date(previousCandle.timestamp).toLocaleTimeString()}): –æ–±—ä–µ–º ${previousCandle.volume.toFixed(2)}`);
            logger.info(`–¢–µ–∫—É—â–∞—è (${new Date(lastCandle.timestamp).toLocaleTimeString()}): –æ–±—ä–µ–º ${lastCandle.volume.toFixed(2)}`);
        }
    }

    private handleKlineUpdate(data: any): void {
        try {
            const kline = data.data[0];
            const symbol = data.topic.split('.')[2];

            if (symbol !== this.SYMBOL) return;
            
            const candle = this.createCandleFromKline(kline);
            this.updateCandleHistory(candle);
            this.checkAndLogState(candle);
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤–µ—á–∏:', error);
        }
    }

    private createCandleFromKline(kline: any): Candle {
        const isConfirmed = kline.confirm === true || kline.confirm === 'true';
        if (isConfirmed) {
            logger.info(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–≤–µ—á–∏ ${new Date(Number(kline.start)).toLocaleTimeString()}`);
        }
        
        return {
            timestamp: Number(kline.start),
            open: Number(kline.open),
            high: Number(kline.high),
            low: Number(kline.low),
            close: Number(kline.close),
            volume: Number(kline.volume),
            symbol: this.SYMBOL,
            isGreen: Number(kline.close) >= Number(kline.open),
            confirmed: isConfirmed
        };
    }

    private updateCandleHistory(candle: Candle): void {
        const isNewCandle = this.candleHistory.length === 0 || 
                          this.candleHistory[this.candleHistory.length - 1].timestamp !== candle.timestamp;

        if (isNewCandle) {
            if (this.candleHistory.length > 0) {
                const lastCandle = this.candleHistory[this.candleHistory.length - 1];
                if (!lastCandle.confirmed) {
                    logger.warn(`‚ö†Ô∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å–≤–µ—á–∞ –Ω–µ –±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: ${new Date(lastCandle.timestamp).toLocaleTimeString()}`);
                }
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–º —Ç–æ–ª—å–∫–æ —É –∑–∞–∫—Ä—ã—Ç–æ–π —Å–≤–µ—á–∏
                if (lastCandle.confirmed && this.candleHistory.length >= 2) {
                    const previousCandle = this.candleHistory[this.candleHistory.length - 2];
                    this.checkVolumeSpike(lastCandle, previousCandle);
                }
                this.processCompletedCandle(lastCandle, candle);
            }
            this.candleHistory.push(candle);
            if (this.candleHistory.length > CANDLE_HISTORY_SIZE) {
                this.candleHistory.shift();
            }
        } else {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å–≤–µ—á—É
            this.candleHistory[this.candleHistory.length - 1] = candle;
            
            // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±—ä–µ–º–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏
            // –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–∏
        }

        // –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.checkAndLogState(candle);
    }

    private checkAndLogState(currentCandle: Candle): void {
        const currentTime = Date.now();
        if (currentTime - this.lastLogTime >= this.LOG_INTERVAL) {
            this.logCurrentState(currentCandle);
            this.lastLogTime = currentTime;
        }
    }

    private logCurrentState(currentCandle: Candle): void {
        const previousCandle = this.candleHistory.length >= 2 ? 
            this.candleHistory[this.candleHistory.length - 2] : null;
        
        if (this.currentSignal?.isActive) {
            logger.info('üìä –°–¢–ê–¢–£–° –ê–ö–¢–ò–í–ù–û–ì–û –°–ò–ì–ù–ê–õ–ê:');
            logger.info(`üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: $${currentCandle.close}`);
            logger.info(`üìà –¢–µ–∫—É—â–∏–π –æ–±—ä–µ–º: ${currentCandle.volume.toFixed(2)}`);
            
            if (previousCandle) {
                const volumeRatio = currentCandle.volume / previousCandle.volume;
                logger.info(`üìä –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –æ–±—ä–µ–º–æ–º: ${volumeRatio.toFixed(2)}x`);
            }

            logger.info(`‚è±Ô∏è –í—Ä–µ–º—è —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π —Å–≤–µ—á–∏: ${new Date(this.currentSignal.candle.timestamp).toLocaleTimeString()}`);
            logger.info(`üéØ –û–∂–∏–¥–∞–µ–º —Å–≤–µ—á—É —Å –º–µ–Ω—å—à–∏–º –æ–±—ä–µ–º–æ–º –¥–ª—è –≤—Ö–æ–¥–∞`);
            logger.info('‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ');
        }
    }

    private async processCompletedCandle(completedCandle: Candle, newCandle: Candle): Promise<void> {
        if (!this.currentSignal?.isActive) {
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Ç–∞ –∂–µ —Å–∞–º–∞—è —Å–≤–µ—á–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –±—ã–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω —Å–∏–≥–Ω–∞–ª
        if (completedCandle.timestamp === this.currentSignal.candle.timestamp) {
            logger.info(`‚è≥ –û–∂–∏–¥–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å–≤–µ—á—É –ø–æ—Å–ª–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π (${new Date(completedCandle.timestamp).toLocaleTimeString()})`);
            return;
        }

        if (this.currentSignal.waitingForLowerVolume && completedCandle.confirmed) {
            logger.info(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Å–≤–µ—á–∏:`);
            logger.info(`üìä –û–±—ä–µ–º —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π —Å–≤–µ—á–∏ (C0): ${this.currentSignal.candle.volume.toFixed(2)}`);
            logger.info(`üìä –û–±—ä–µ–º —Å–ª–µ–¥—É—é—â–µ–π —Å–≤–µ—á–∏ (C+1): ${completedCandle.volume.toFixed(2)}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–º, –±–µ–∑ —É—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
            if (completedCandle.confirmed && completedCandle.volume <= this.currentSignal.candle.volume) {
                logger.info(`‚úÖ –£–°–õ–û–í–ò–Ø –î–õ–Ø –í–•–û–î–ê –í–´–ü–û–õ–ù–ï–ù–´:`);
                logger.info(`üìä –û–±—ä–µ–º —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π —Å–≤–µ—á–∏ (C0): ${this.currentSignal.candle.volume.toFixed(2)}`);
                logger.info(`üìä –û–±—ä–µ–º —Å–ª–µ–¥—É—é—â–µ–π —Å–≤–µ—á–∏ (C+1): ${completedCandle.volume.toFixed(2)}`);
                logger.info(`üìà –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –æ–±—ä–µ–º–æ–≤: ${(completedCandle.volume / this.currentSignal.candle.volume).toFixed(2)}x`);
                
                try {
                    await this.openPosition(this.currentSignal.candle, completedCandle);
                    this.currentSignal.isActive = false;
                    this.currentSignal.waitingForLowerVolume = false;
                } catch (error) {
                    logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏:`, error);
                }
            } else if (!completedCandle.confirmed) {
                logger.info(`‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–≤–µ—á–∏`);
            } else if (completedCandle.volume > this.currentSignal.candle.volume) {
                logger.info(`‚ö†Ô∏è –û–±—ä–µ–º —Å–ª–µ–¥—É—é—â–µ–π —Å–≤–µ—á–∏ (${completedCandle.volume.toFixed(2)}) –≤—ã—à–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π (${this.currentSignal.candle.volume.toFixed(2)}), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Ö–æ–¥`);
                // –ù–ï –æ—Ç–º–µ–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å —Å–≤–µ—á—É —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º –æ–±—ä–µ–º–æ–º
            }
            logger.info('‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ');
        }
    }

    private async openPosition(signalCandle: Candle, currentCandle: Candle): Promise<void> {
        try {
            const side: OrderSideV5 = signalCandle.isGreen ? 'Sell' : 'Buy';
            
            const stopLossLevel = side === 'Buy' ? 
                Math.min(signalCandle.low, currentCandle.low) :    
                Math.max(signalCandle.high, currentCandle.high);   

            const stopLoss = side === 'Buy' ? 
                stopLossLevel - this.STOP_LOSS_POINTS :   
                stopLossLevel + this.STOP_LOSS_POINTS;    

            const takeProfit = currentCandle.close + (side === 'Buy' ? 
                this.TAKE_PROFIT_POINTS : 
                -this.TAKE_PROFIT_POINTS);

            const contractSize = (this.TRADE_SIZE_USD / currentCandle.close).toFixed(3);
            const orderPrice = currentCandle.close.toString(); // –¶–µ–Ω–∞ –¥–ª—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞

            logger.info(`üéØ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ (–õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä PostOnly):`);
            logger.info(`üìà –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${side} (—Å–∏–≥–Ω–∞–ª—å–Ω–∞—è —Å–≤–µ—á–∞ ${signalCandle.isGreen ? '–∑–µ–ª–µ–Ω–∞—è' : '–∫—Ä–∞—Å–Ω–∞—è'})`);
            logger.info(`üí∞ –¶–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞: ${orderPrice}`);
            logger.info(`üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: ${takeProfit}`);
            logger.info(`üõë –°—Ç–æ–ø-–ª–æ—Å—Å: ${stopLoss}`);
            logger.info(`üìä –≠–∫—Å—Ç—Ä–µ–º—É–º—ã —Å–≤–µ—á–µ–π:`);
            logger.info(`  –°–∏–≥–Ω–∞–ª—å–Ω–∞—è (${signalCandle.isGreen ? '–∑–µ–ª–µ–Ω–∞—è' : '–∫—Ä–∞—Å–Ω–∞—è'}): High=${signalCandle.high}, Low=${signalCandle.low}`);
            logger.info(`  –¢–µ–∫—É—â–∞—è: High=${currentCandle.high}, Low=${currentCandle.low}`);
            logger.info(`  –í—ã–±—Ä–∞–Ω ${side === 'Buy' ? '–º–∏–Ω–∏–º—É–º' : '–º–∞–∫—Å–∏–º—É–º'}: ${stopLossLevel}`);
            logger.info(`  –°—Ç–æ–ø —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${Math.abs(this.STOP_LOSS_POINTS)} –ø—É–Ω–∫—Ç–æ–≤ ${side === 'Buy' ? '–Ω–∏–∂–µ' : '–≤—ã—à–µ'}`);
            logger.info(`üìä –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: $${this.TRADE_SIZE_USD} (${contractSize} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤)`);

            const response = await this.client.submitOrder({
                category: 'linear',
                symbol: this.SYMBOL,
                side: side,
                orderType: 'Limit', // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ Limit
                qty: contractSize,
                price: orderPrice, // –£–∫–∞–∑–∞–Ω–∞ —Ü–µ–Ω–∞ –¥–ª—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
                timeInForce: 'PostOnly', // –û—Ä–¥–µ—Ä –±—É–¥–µ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω —Ç–æ–ª—å–∫–æ –∫–∞–∫ maker
            });

            logger.info(`üì° –û—Ç–≤–µ—Ç –æ—Ç API –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ª–∏–º–∏—Ç–Ω–æ–π PostOnly –ø–æ–∑–∏—Ü–∏–∏:`, response);

            if (response.retCode === 0 && response.result && response.result.orderId) {
                logger.info(`‚úÖ –õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä PostOnly —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω (orderId: ${response.result.orderId}). –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${currentCandle.close}`);
                logger.info(`üïí –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å—Ç–æ–ø-–ª–æ—Å—Å –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç`);
                
                this.activePosition = {
                    side: side,
                    entryPrice: currentCandle.close, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—É –æ—Ä–¥–µ—Ä–∞ –∫–∞–∫ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—É—é —Ü–µ–Ω—É –≤—Ö–æ–¥–∞
                    entryTime: currentCandle.timestamp,
                    isTrailingActive: false,
                    lastTrailingStopPrice: null
                };

                const tpSlResponse = await this.client.setTradingStop({
                    category: 'linear',
                    symbol: this.SYMBOL,
                    takeProfit: takeProfit.toString(),
                    stopLoss: stopLoss.toString(),
                    positionIdx: 0,
                    tpTriggerBy: 'MarkPrice',
                    slTriggerBy: 'MarkPrice'
                });

                this.startTrailingStopCheck();

                const message = this.formatTradeAlert(side, currentCandle.close, takeProfit, stopLoss, signalCandle, currentCandle, true);
                this.onTradeOpen(message);
                logger.info(`‚úÖ –°–¥–µ–ª–∫–∞ (–ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä) –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
            } else {
                logger.error(`‚ùå –õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä PostOnly –Ω–µ –±—ã–ª —Ä–∞–∑–º–µ—â–µ–Ω –∏–ª–∏ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω. –ö–æ–¥: ${response.retCode}, —Å–æ–æ–±—â–µ–Ω–∏–µ: ${response.retMsg}`);
                // –ü–æ–∑–∏—Ü–∏—è –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞, –Ω–∏–∫–∞–∫–∏—Ö –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            }
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ª–∏–º–∏—Ç–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏:', error);
            if (error instanceof Error) {
                logger.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.message);
                logger.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
            }
        }
    }

    private formatTradeAlert(side: OrderSideV5, entry: number, takeProfit: number, stopLoss: number, signalCandle: Candle, currentCandle: Candle, isLimitOrder: boolean = false): string {
        const contractSize = (this.TRADE_SIZE_USD / entry).toFixed(3);
        const stopLossLevel = signalCandle.isGreen ? 
            Math.max(signalCandle.high, currentCandle.high) :
            Math.min(signalCandle.low, currentCandle.low);
            
        return `üéØ ${isLimitOrder ? '–õ–ò–ú–ò–¢–ù–´–ô –û–†–î–ï–† –†–ê–ó–ú–ï–©–ï–ù' : '–û–¢–ö–†–´–¢–ê –ù–û–í–ê–Ø –°–î–ï–õ–ö–ê'} ${this.SYMBOL}\n\n` +
               `${side === 'Buy' ? 'üìà –õ–û–ù–ì' : 'üìâ –®–û–†–¢'}\n` +
               `üíµ ${isLimitOrder ? '–¶–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞' : '–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞'}: ${entry}\n` +
               `üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: ${takeProfit}\n` +
               `üõë –°—Ç–æ–ø-–ª–æ—Å—Å: ${stopLoss}\n` +
               `üìä –†–∞—Å—á–µ—Ç —Å—Ç–æ–ø–∞:\n` +
               `  ‚Ä¢ –°–∏–≥–Ω–∞–ª—å–Ω–∞—è —Å–≤–µ—á–∞ (${signalCandle.isGreen ? 'üü¢' : 'üî¥'}): ${signalCandle.isGreen ? `High=${signalCandle.high}` : `Low=${signalCandle.low}`}\n` +
               `  ‚Ä¢ –¢–µ–∫—É—â–∞—è —Å–≤–µ—á–∞: ${signalCandle.isGreen ? `High=${currentCandle.high}` : `Low=${currentCandle.low}`}\n` +
               `  ‚Ä¢ –í—ã–±—Ä–∞–Ω ${signalCandle.isGreen ? '–º–∞–∫—Å–∏–º—É–º' : '–º–∏–Ω–∏–º—É–º'}: ${stopLossLevel}\n` +
               `  ‚Ä¢ –°—Ç–æ–ø: ${Math.abs(this.STOP_LOSS_POINTS)} –ø—É–Ω–∫—Ç–æ–≤ ${signalCandle.isGreen ? '–≤—ã—à–µ' : '–Ω–∏–∂–µ'}\n` +
               `üí∞ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: $${this.TRADE_SIZE_USD} (${contractSize} BTC)\n` +
               `üìä –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: $${((Math.abs(takeProfit - entry) / entry) * this.TRADE_SIZE_USD).toFixed(2)}\n` +
               `‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫: $${((Math.abs(stopLoss - entry) / entry) * this.TRADE_SIZE_USD).toFixed(2)}`;
    }

    private async closePosition(candle: Candle, reason: string): Promise<void> {
        if (!this.activePosition) return;

        try {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞
            this.stopTrailingStopCheck();
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–º –æ—Ä–¥–µ—Ä–æ–º
            const closeSide: OrderSideV5 = this.activePosition.side === 'Buy' ? 'Sell' : 'Buy';
            const contractSize = (this.TRADE_SIZE_USD / candle.close).toFixed(3);

            logger.info(`üö® –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –ø—Ä–∏—á–∏–Ω–µ: ${reason}`);
            logger.info(`üìä –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è: ${closeSide}`);
            logger.info(`üí∞ –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: ${candle.close}`);

            const response = await this.client.submitOrder({
                category: 'linear',
                symbol: this.SYMBOL,
                side: closeSide,
                orderType: 'Market',
                qty: contractSize,
                timeInForce: 'GTC'
            });

            if (response.retCode === 0) {
                const profit = this.activePosition.side === 'Buy' ? 
                    candle.close - this.activePosition.entryPrice :
                    this.activePosition.entryPrice - candle.close;
                
                const profitPercent = (profit / this.activePosition.entryPrice) * 100;
                const profitUSD = (profit / this.activePosition.entryPrice) * this.TRADE_SIZE_USD;

                const message = `üîÑ –ü–û–ó–ò–¶–ò–Ø –ó–ê–ö–†–´–¢–ê ${this.SYMBOL}\n\n` +
                    `${this.activePosition.side === 'Buy' ? 'üìà –õ–û–ù–ì' : 'üìâ –®–û–†–¢'}\n` +
                    `üíµ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${this.activePosition.entryPrice}\n` +
                    `üí∞ –¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞: ${candle.close}\n` +
                    `üìä –ü—Ä–∏–±—ã–ª—å/–£–±—ã—Ç–æ–∫: $${profitUSD.toFixed(2)} (${profitPercent.toFixed(2)}%)\n` +
                    `‚ö†Ô∏è –ü—Ä–∏—á–∏–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: ${reason}`;

                this.onTradeOpen(message);
                logger.info(`‚úÖ –ü–æ–∑–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞`);
                this.activePosition = null;
            } else {
                logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏, –∫–æ–¥: ${response.retCode}, —Å–æ–æ–±—â–µ–Ω–∏–µ: ${response.retMsg}`);
            }
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏:', error);
            if (error instanceof Error) {
                logger.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.message);
                logger.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
            }
        }
    }

    private checkVolumeSpike(completedCandle: Candle, previousCandle: Candle): void {
        if (!completedCandle.confirmed) {
            return;
        }

        const volumeRatio = completedCandle.volume / previousCandle.volume;
        const VOLUME_THRESHOLD = 2000; // –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—ä–µ–º–∞
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –∞–Ω–æ–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º - –∑–∞–∫—Ä—ã–≤–∞–µ–º
        if (volumeRatio >= this.volumeMultiplier && this.activePosition) {
            const timeSinceEntry = completedCandle.timestamp - this.activePosition.entryTime;
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Ç–∞ –∂–µ —Å–≤–µ—á–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –º—ã –≤–æ—à–ª–∏
            if (timeSinceEntry > 0) {
                logger.info(`üö® –û–ë–ù–ê–†–£–ñ–ï–ù –ê–ù–û–ú–ê–õ–¨–ù–´–ô –û–ë–™–ï–ú –ü–û–°–õ–ï –í–•–û–î–ê –í –ü–û–ó–ò–¶–ò–Æ!`);
                logger.info(`üìä –û–±—ä–µ–º –≤—ã—Ä–æ—Å –≤ ${volumeRatio.toFixed(2)}x —Ä–∞–∑`);
                this.closePosition(completedCandle, '–ê–Ω–æ–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞');
                return;
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        const isVolumeSpike = volumeRatio >= this.volumeMultiplier;
        const isHighVolume = completedCandle.volume >= VOLUME_THRESHOLD;

        if (!this.currentSignal?.isActive && (isVolumeSpike || isHighVolume)) {
            // –ï—Å–ª–∏ –æ–±—ä–µ–º —ç—Ç–æ–π —Å–≤–µ—á–∏ –±–æ–ª—å—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤ N —Ä–∞–∑ –ò–õ–ò –±–æ–ª—å—à–µ 2000
            logger.info(`üö® –û–ë–ù–ê–†–£–ñ–ï–ù ${isHighVolume ? '–í–´–°–û–ö–ò–ô –û–ë–™–ï–ú' : '–í–°–ü–õ–ï–°–ö –û–ë–™–ï–ú–ê'} –í –ó–ê–ö–†–´–¢–û–ô –°–í–ï–ß–ï!`);
            if (isVolumeSpike) {
                logger.info(`üìä –û–±—ä–µ–º –≤—ã—Ä–æ—Å –≤ ${volumeRatio.toFixed(2)}x —Ä–∞–∑`);
            }
            if (isHighVolume) {
                logger.info(`üìä –û–±—ä–µ–º –ø—Ä–µ–≤—ã—Å–∏–ª –ø–æ—Ä–æ–≥ ${VOLUME_THRESHOLD}: ${completedCandle.volume.toFixed(2)}`);
            }
            logger.info(`üí∞ –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: ${completedCandle.close}`);
            logger.info(`üìà –î–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã: ${((completedCandle.close - completedCandle.open) / completedCandle.open * 100).toFixed(2)}%`);
            
            const message = this.formatVolumeAlert(completedCandle, previousCandle);
            this.onVolumeSpike(message);

            this.currentSignal = {
                candle: completedCandle,
                isActive: true,
                waitingForLowerVolume: true
            };
            
            logger.info(`‚úÖ –°–∏–≥–Ω–∞–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –æ–∂–∏–¥–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å–≤–µ—á—É —Å –º–µ–Ω—å—à–∏–º –æ–±—ä–µ–º–æ–º`);
            logger.info('‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ');
        } else if (this.currentSignal?.isActive && completedCandle.volume > previousCandle.volume) {
            // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª –∏ —Ç–µ–∫—É—â–∞—è —Å–≤–µ—á–∞ –±–æ–ª—å—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π - –æ–Ω–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π
            logger.info(`üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–ò–ì–ù–ê–õ–ê:`);
            logger.info(`üìä –ù–æ–≤—ã–π –æ–±—ä–µ–º –≤—ã—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ`);
            logger.info(`üìä –ü—Ä–µ–¥—ã–¥—É—â–∏–π –æ–±—ä–µ–º: ${previousCandle.volume.toFixed(2)}`);
            logger.info(`üìä –ù–æ–≤—ã–π –æ–±—ä–µ–º: ${completedCandle.volume.toFixed(2)}`);
            
            this.currentSignal = {
                candle: completedCandle,
                isActive: true,
                waitingForLowerVolume: true
            };
            
            logger.info(`‚úÖ –°–∏–≥–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å–≤–µ—á—É —Å –º–µ–Ω—å—à–∏–º –æ–±—ä–µ–º–æ–º`);
            logger.info('‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ');
        } else if (volumeRatio >= this.volumeMultiplier * 0.8 || completedCandle.volume >= VOLUME_THRESHOLD * 0.8) {
            // –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            logger.info(`üîç –ü–†–û–í–ï–†–ö–ê –û–ë–™–ï–ú–û–í –ó–ê–ö–†–´–¢–û–ô –°–í–ï–ß–ò:`);
            logger.info(`üìä –û–±—ä–µ–º –∑–∞–∫—Ä—ã—Ç–æ–π —Å–≤–µ—á–∏: ${completedCandle.volume.toFixed(2)}`);
            logger.info(`üìä –û–±—ä–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–≤–µ—á–∏: ${previousCandle.volume.toFixed(2)}`);
            if (volumeRatio >= this.volumeMultiplier * 0.8) {
                logger.info(`üìà –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: ${volumeRatio.toFixed(2)}x (—Ü–µ–ª—å: ${this.volumeMultiplier}x)`);
            }
            if (completedCandle.volume >= VOLUME_THRESHOLD * 0.8) {
                logger.info(`üìà –ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ –ø–æ—Ä–æ–≥–æ–≤–æ–º—É –æ–±—ä–µ–º—É: ${completedCandle.volume.toFixed(2)} (—Ü–µ–ª—å: ${VOLUME_THRESHOLD})`);
            }
            logger.info(`‚è±Ô∏è –í—Ä–µ–º—è —Å–≤–µ—á–∏: ${new Date(completedCandle.timestamp).toLocaleTimeString()}`);
            logger.info(`üìä –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: ${completedCandle.close}`);
            logger.info('‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ');
        }
    }

    private formatVolumeAlert(currentCandle: Candle, previousCandle: Candle): string {
        return `üîç –û–ë–ù–ê–†–£–ñ–ï–ù–û –ê–ù–û–ú–ê–õ–¨–ù–û–ï –£–í–ï–õ–ò–ß–ï–ù–ò–ï –û–ë–™–ï–ú–ê ${this.SYMBOL}:\n\n` +
               `üìä –¢–µ–∫—É—â–∏–π –æ–±—ä–µ–º: ${currentCandle.volume.toFixed(2)}\n` +
               `üìà –ü—Ä–µ–¥—ã–¥—É—â–∏–π –æ–±—ä–µ–º: ${previousCandle.volume.toFixed(2)}\n` +
               `üíπ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ: ${((currentCandle.volume - previousCandle.volume) / previousCandle.volume * 100).toFixed(2)}%\n` +
               `${currentCandle.isGreen ? 'üü¢' : 'üî¥'} –¶–≤–µ—Ç —Å–≤–µ—á–∏: ${currentCandle.isGreen ? '–ó–ï–õ–ï–ù–´–ô' : '–ö–†–ê–°–ù–´–ô'}\n` +
               `üìâ –î–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã: ${((currentCandle.close - currentCandle.open) / currentCandle.open * 100).toFixed(2)}%\n` +
               `üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${currentCandle.close}`;
    }

    public onVolumeSpike: (message: string) => void = () => {};
    public onTradeOpen: (message: string) => void = () => {};

    public async subscribeToSymbol(): Promise<void> {
        try {
            await this.initializeCandleHistory();
            await this.wsClient.subscribeV5([`kline.${CANDLE_INTERVAL}.${this.SYMBOL}`], CATEGORY as 'linear');
            
            const startMessage = `ü§ñ –ë–û–¢ –ó–ê–ü–£–©–ï–ù\n\n` +
                               `üìä –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞: ${this.SYMBOL}\n` +
                               `üí∞ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: $${this.TRADE_SIZE_USD}\n` +
                               `üìà –ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ–±—ä–µ–º–∞: ${this.volumeMultiplier}x\n` +
                               `‚è±Ô∏è –¢–∞–π–º—Ñ—Ä–µ–π–º: ${CANDLE_INTERVAL}m\n` +
                               `üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–≤–µ—á–µ–π: ${this.candleHistory.length}`;
            this.onTradeOpen(startMessage);
            logger.info(`‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${this.SYMBOL} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞`);
        } catch (error) {
            logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:`, error);
            throw error;
        }
    }

    private startTrailingStopCheck(): void {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        this.stopTrailingStopCheck();

        // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        this.trailingStopInterval = setInterval(async () => {
            if (!this.activePosition) {
                this.stopTrailingStopCheck();
                return;
            }

            try {
                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                const response = await this.client.getTickers({
                    category: 'linear',
                    symbol: this.SYMBOL
                });

                if (response.retCode === 0 && response.result.list && response.result.list[0]) {
                    const currentPrice = Number(response.result.list[0].lastPrice);
                    const entryPrice = this.activePosition.entryPrice;
                    const side = this.activePosition.side;

                    // –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø—Ä–∏–±—ã–ª—å –≤ –ø—É–Ω–∫—Ç–∞—Ö
                    const profitPoints = side === 'Buy' ? 
                        currentPrice - entryPrice : 
                        entryPrice - currentPrice;

                    // –ï—Å–ª–∏ –ø—Ä–∏–±—ã–ª—å –¥–æ—Å—Ç–∏–≥–ª–∞ —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç—Ä–µ–π–ª–∏–Ω–≥–∞
                    if (profitPoints >= this.TRAILING_ACTIVATION_POINTS) {
                        // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —Å—Ç–æ–ø–∞
                        const newStopPrice = side === 'Buy' ? 
                            currentPrice - this.TRAILING_DISTANCE : 
                            currentPrice + this.TRAILING_DISTANCE;

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å—Ç–æ–ø
                        if (!this.activePosition.isTrailingActive || 
                            (side === 'Buy' && newStopPrice > (this.activePosition.lastTrailingStopPrice || 0)) ||
                            (side === 'Sell' && newStopPrice < (this.activePosition.lastTrailingStopPrice || Infinity))) {
                            
                            // –ï—Å–ª–∏ —Ç—Ä–µ–π–ª–∏–Ω–≥ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –≤–ø–µ—Ä–≤—ã–µ, –æ—Ç–º–µ–Ω—è–µ–º —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
                            if (!this.activePosition.isTrailingActive) {
                                logger.info(`üéØ –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞! –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç`);
                                await this.client.setTradingStop({
                                    category: 'linear',
                                    symbol: this.SYMBOL,
                                    takeProfit: '0',
                                    stopLoss: newStopPrice.toString(),
                                    positionIdx: 0,
                                    slTriggerBy: 'MarkPrice'
                                });
                                this.activePosition.isTrailingActive = true;
                            } else {
                                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–æ–ø-–ª–æ—Å—Å
                                await this.client.setTradingStop({
                                    category: 'linear',
                                    symbol: this.SYMBOL,
                                    stopLoss: newStopPrice.toString(),
                                    positionIdx: 0,
                                    slTriggerBy: 'MarkPrice'
                                });
                            }

                            this.activePosition.lastTrailingStopPrice = newStopPrice;
                            logger.info(`üìà –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –ø–µ—Ä–µ–¥–≤–∏–Ω—É—Ç: ${newStopPrice.toFixed(1)} (${this.TRAILING_DISTANCE} –ø—É–Ω–∫—Ç–æ–≤ –æ—Ç —Ü–µ–Ω—ã ${currentPrice})`);
                        }
                    }
                }
            } catch (error) {
                logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞:', error);
            }
        }, 10000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    }

    private stopTrailingStopCheck(): void {
        if (this.trailingStopInterval) {
            clearInterval(this.trailingStopInterval);
            this.trailingStopInterval = null;
        }
    }
}