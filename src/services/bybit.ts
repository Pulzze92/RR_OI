import { RestClientV5, WebsocketClient, WsKey } from "bybit-api";
import { logger } from "../utils/logger";
import { Candle } from "./bybit.types";
import { NotificationService } from "./notificationService";
import {
  TradingLogicService,
  TradingLogicCallbacks
} from "./tradingLogicService";

export class BybitService {
  private wsClient!: WebsocketClient;
  private readonly client: RestClientV5;
  private candleHistory: Candle[] = [];
  private lastLogTime: number = 0;

  private readonly apiKey: string;
  private readonly apiSecret: string;

  private readonly SYMBOL = "BTCUSDT";
  private readonly CANDLE_INTERVAL: string = "60";
  private readonly CANDLE_HISTORY_SIZE = 6;
  private readonly INITIAL_HISTORY_HOURS = 12;
  private readonly LOG_INTERVAL = 15 * 60 * 1000;
  private readonly RETROSPECTIVE_ANALYSIS_SIZE = 6;

  private readonly TRADE_SIZE_USD = 10000;
  private readonly TAKE_PROFIT_POINTS = 600;
  private readonly STOP_LOSS_POINTS = 450;
  private readonly TRAILING_ACTIVATION_POINTS = 400;
  private readonly TRAILING_DISTANCE = 50;
  private readonly VOLUME_THRESHOLD = 2000;
  private VOLUME_MULTIPLIER: number = 3;

  private onTradeUpdate: (message: string) => void;
  private onSignalUpdate: (message: string) => void;

  private notificationService: NotificationService;
  private tradingLogicService: TradingLogicService;

  constructor(
    apiKey: string,
    apiSecret: string,
    onTradeUpdate: (message: string) => void,
    onSignalUpdate: (message: string) => void,
    volumeMultiplierParam?: number
  ) {
    this.apiKey = apiKey;
    this.apiSecret = apiSecret;
    this.client = new RestClientV5({
      key: apiKey,
      secret: apiSecret,
      recv_window: 5000
    });
    this.onTradeUpdate = onTradeUpdate;
    this.onSignalUpdate = onSignalUpdate;

    if (typeof volumeMultiplierParam === "number") {
      this.VOLUME_MULTIPLIER = volumeMultiplierParam;
    }

    this.notificationService = new NotificationService(
      this.SYMBOL,
      this.TRADE_SIZE_USD,
      this.STOP_LOSS_POINTS
    );

    const tradingLogicCallbacks: TradingLogicCallbacks = {
      onTradeOperation: this.onTradeUpdate,
      onSignalDetected: this.onSignalUpdate
    };

    this.tradingLogicService = new TradingLogicService(
      this.client,
      this.notificationService,
      tradingLogicCallbacks,
      {
        symbol: this.SYMBOL,
        tradeSizeUsd: this.TRADE_SIZE_USD,
        takeProfitPoints: this.TAKE_PROFIT_POINTS,
        stopLossPoints: this.STOP_LOSS_POINTS,
        trailingActivationPoints: this.TRAILING_ACTIVATION_POINTS,
        trailingDistance: this.TRAILING_DISTANCE,
        volumeThreshold: this.VOLUME_THRESHOLD,
        volumeMultiplier: this.VOLUME_MULTIPLIER
      }
    );
  }

  public async initialize(): Promise<void> {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∏–Ω–∏–º—É–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –æ–±—ä–µ–º–æ–≤
      await this.loadInitialCandleHistory();

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
      await this.tradingLogicService.syncPositionState();

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ü–û–°–õ–ï–î–ù–Æ–Æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Å–≤–µ—á—É –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      await this.analyzeLastCandle();

      this.subscribeToCandleUpdates();
      const startMessage =
        `ü§ñ –ë–û–¢ –ó–ê–ü–£–©–ï–ù\n\n` +
        `üìä –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞: ${this.SYMBOL}\n` +
        `üí∞ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: $${this.TRADE_SIZE_USD}\n` +
        `üìà –ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ–±—ä–µ–º–∞: ${this.VOLUME_MULTIPLIER}x\n` +
        `‚è±Ô∏è –¢–∞–π–º—Ñ—Ä–µ–π–º: ${this.CANDLE_INTERVAL}h\n` +
        `üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: ${this.candleHistory.length}\n` +
        `üö´ –†–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω`;
      this.onTradeUpdate(startMessage);
      logger.info(
        "–°–µ—Ä–≤–∏—Å Bybit –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤–µ—á–µ–π –∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ."
      );
    } catch (error) {
      logger.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ Bybit:", error);
      throw error;
    }
  }

  private async loadInitialCandleHistory(): Promise<Candle[]> {
    try {
      const limit = Math.min(this.RETROSPECTIVE_ANALYSIS_SIZE, 200);
      const endTime = Date.now();
      const startTime = endTime - this.INITIAL_HISTORY_HOURS * 60 * 60 * 1000;

      const response = await this.client.getKline({
        category: "linear",
        symbol: this.SYMBOL,
        interval: this.CANDLE_INTERVAL as any,
        start: startTime,
        end: endTime,
        limit: limit
      });

      if (response.retCode === 0 && response.result && response.result.list) {
        const allCandles = response.result.list
          .map(k => {
            const timestamp = Number(k[0]);
            const open = Number(k[1]);
            const high = Number(k[2]);
            const low = Number(k[3]);
            const close = Number(k[4]);
            const volume = Number(k[5]);
            const turnover = Number(k[6]);
            const isGreen = close >= open;

            return {
              timestamp,
              open,
              high,
              low,
              close,
              volume,
              turnover,
              confirmed: true,
              isGreen
            };
          })
          .sort((a, b) => a.timestamp - b.timestamp);

        // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–≤–µ—á–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        logger.info(
          `üîç –ö–û–ù–¢–ï–ö–°–¢ –ê–ù–ê–õ–ò–ó–ê - –ü–æ—Å–ª–µ–¥–Ω–∏–µ ${Math.min(
            3,
            allCandles.length
          )} —Å–≤–µ—á–∏:`
        );
        allCandles.slice(-3).forEach(candle => {
          logger.info(
            `   ${new Date(candle.timestamp).toISOString()}: ${
              candle.isGreen ? "üü¢" : "üî¥"
            } Open=${candle.open} Close=${
              candle.close
            } Vol=${candle.volume.toFixed(2)}`
          );
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ CANDLE_HISTORY_SIZE —Å–≤–µ—á–µ–π –¥–ª—è —Ä–∞–±–æ—á–µ–π –∏—Å—Ç–æ—Ä–∏–∏
        this.candleHistory = allCandles.slice(-this.CANDLE_HISTORY_SIZE);

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Å–≤–µ—á–∏ –¥–ª—è —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        logger.info(
          `–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allCandles.length} —Å–≤–µ—á–µ–π –¥–ª—è —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞, —Ä–∞–±–æ—á–∞—è –∏—Å—Ç–æ—Ä–∏—è: ${this.candleHistory.length} —Å–≤–µ—á–µ–π`
        );
        return allCandles;
      } else {
        logger.error(
          "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —Å–≤–µ—á–µ–π:",
          response.retMsg
        );
        throw new Error(
          "Failed to load initial candle history: " + response.retMsg
        );
      }
    } catch (error) {
      logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–≤–µ—á–µ–π:", error);
      throw error;
    }
  }

  private async performRetrospectiveAnalysis(
    allCandles: Candle[]
  ): Promise<void> {
    logger.info(
      "üîç –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤..."
    );

    if (allCandles.length < 2) {
      logger.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–µ—á–µ–π –¥–ª—è —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞");
      return;
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≤–µ—á–∏, –Ω–∞—á–∏–Ω–∞—è —Å–æ –≤—Ç–æ—Ä–æ–π (–Ω—É–∂–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
    for (let i = 1; i < allCandles.length; i++) {
      const currentCandle = allCandles[i];
      const previousCandle = allCandles[i - 1];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–º –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
      this.tradingLogicService.checkVolumeSpike(currentCandle, previousCandle);

      // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ —Å–≤–µ—á–∏ –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞
      const currentSignal = this.tradingLogicService.getCurrentSignal();
      if (currentSignal?.isActive) {
        logger.info(
          `üìä –ù–∞–π–¥–µ–Ω —Å–∏–≥–Ω–∞–ª –≤ –∏—Å—Ç–æ—Ä–∏–∏: ${new Date(
            currentSignal.candle.timestamp
          ).toLocaleTimeString()}, –æ–±—ä–µ–º: ${currentSignal.candle.volume.toFixed(
            2
          )}`
        );

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ —Å–≤–µ—á–∏ –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞
        for (let j = i + 1; j < allCandles.length; j++) {
          const laterCandle = allCandles[j];
          this.tradingLogicService.processCompletedCandle(
            laterCandle,
            allCandles.slice(0, j + 1)
          );

          // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –∞–Ω–∞–ª–∏–∑
          if (this.tradingLogicService.getActivePosition()) {
            logger.info(
              "‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞ –≤ —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ, –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞"
            );
            return;
          }

          // –ï—Å–ª–∏ —Å–∏–≥–Ω–∞–ª –±—ã–ª —Å–±—Ä–æ—à–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
          const updatedSignal = this.tradingLogicService.getCurrentSignal();
          if (!updatedSignal?.isActive) {
            break;
          }
        }
      }
    }

    const finalSignal = this.tradingLogicService.getCurrentSignal();
    if (finalSignal?.isActive) {
      logger.info(
        `‚è≥ –†–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ê–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª –Ω–∞–π–¥–µ–Ω (${new Date(
          finalSignal.candle.timestamp
        ).toLocaleTimeString()}), –æ–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ`
      );
    } else {
      logger.info(
        "üîç –†–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
      );
    }
  }

  private subscribeToCandleUpdates(): void {
    this.wsClient = new WebsocketClient({
      key: this.apiKey,
      secret: this.apiSecret,
      market: "v5"
    });

    this.wsClient.subscribeV5(
      [`kline.${this.CANDLE_INTERVAL}.${this.SYMBOL}`],
      "linear"
    );

    this.wsClient.on("update", (data: any) => {
      if (data.topic && data.topic.startsWith("kline")) {
        const candleData = data.data[0];
        this.updateCandleHistory({
          timestamp: Number(candleData.start),
          open: Number(candleData.open),
          high: Number(candleData.high),
          low: Number(candleData.low),
          close: Number(candleData.close),
          volume: Number(candleData.volume),
          turnover: Number(candleData.turnover),
          confirmed: candleData.confirm,
          isGreen: Number(candleData.close) >= Number(candleData.open)
        });
      }
    });

    this.wsClient.on("close", () => {
      logger.info(
        "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ WebSocket –∑–∞–∫—Ä—ã—Ç–æ. –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥..."
      );
      setTimeout(() => {
        logger.info("–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket...");
        this.subscribeToCandleUpdates();
      }, 5000);
    });

    this.wsClient.on("open", (evt: { wsKey: WsKey; event: any }) => {
      logger.info(`–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ WebSocket –æ—Ç–∫—Ä—ã—Ç–æ. wsKey: ${evt.wsKey}`);
    });
  }

  private updateCandleHistory(newCandle: Candle): void {
    const currentTime = Date.now();
    if (currentTime - this.lastLogTime > this.LOG_INTERVAL) {
      logger.info(
        `–¢–µ–∫—É—â–∏–π –æ–±—ä–µ–º —Ñ–æ—Ä–º–∏—Ä—É—é—â–µ–π—Å—è —Å–≤–µ—á–∏ (${new Date(
          newCandle.timestamp
        ).toLocaleTimeString()}): ${newCandle.volume.toFixed(2)}, –ó–∞–∫—Ä—ã—Ç–∏–µ: ${
          newCandle.close
        }`
      );
      this.lastLogTime = currentTime;
    }

    const existingCandleIndex = this.candleHistory.findIndex(
      c => c.timestamp === newCandle.timestamp
    );

    if (existingCandleIndex !== -1) {
      this.candleHistory[existingCandleIndex] = newCandle;
    } else {
      this.candleHistory.push(newCandle);
      if (this.candleHistory.length > this.CANDLE_HISTORY_SIZE) {
        this.candleHistory.shift();
      }
    }

    this.candleHistory.sort((a, b) => a.timestamp - b.timestamp);

    if (newCandle.confirmed) {
      logger.info(
        `üïØÔ∏è –ù–æ–≤–∞—è –ó–ê–í–ï–†–®–ï–ù–ù–ê–Ø —Å–≤–µ—á–∞ (${new Date(
          newCandle.timestamp
        ).toLocaleTimeString()}): O=${newCandle.open} H=${newCandle.high} L=${
          newCandle.low
        } C=${newCandle.close} V=${newCandle.volume.toFixed(2)}`
      );
      this.processCompletedCandle(newCandle);
    }
  }

  private processCompletedCandle(completedCandle: Candle): void {
    if (this.candleHistory.length < 2) {
      return;
    }

    const completedCandleActualIndex = this.candleHistory.findIndex(
      c => c.timestamp === completedCandle.timestamp
    );
    if (completedCandleActualIndex < 1) {
      logger.warn(
        `–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å–≤–µ—á–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Å–≤–µ—á–∏ ${new Date(
          completedCandle.timestamp
        ).toLocaleTimeString()}`
      );
      return;
    }
    const previousCandle = this.candleHistory[completedCandleActualIndex - 1];

    this.tradingLogicService.checkVolumeSpike(completedCandle, previousCandle);
    this.tradingLogicService.processCompletedCandle(completedCandle, [
      ...this.candleHistory
    ]);
  }

  public async getAccountBalance(): Promise<any> {
    try {
      const response = await this.client.getWalletBalance({
        accountType: "UNIFIED"
      });
      if (
        response.retCode === 0 &&
        response.result.list &&
        response.result.list.length > 0
      ) {
        return response.result.list[0];
      }
      logger.error(
        "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫:",
        response.retMsg
      );
      return null;
    } catch (error) {
      logger.error("–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:", error);
      return null;
    }
  }

  private async analyzeLastCandle(): Promise<void> {
    if (this.candleHistory.length >= 3) {
      logger.info(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π –Ω–∞ –≥–æ—Ç–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã...`);

      let latestActiveSignal: any = null;
      let latestSignalIndex = -1;

      // –í–ê–ñ–ù–û: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç –ù–û–í–´–• –∫ –°–¢–ê–†–´–ú —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª
      for (let i = this.candleHistory.length - 1; i >= 1; i--) {
        const currentCandle = this.candleHistory[i];
        const previousCandle = this.candleHistory[i - 1];

        logger.info(
          `   ${new Date(
            currentCandle.timestamp
          ).toLocaleTimeString()}: V=${currentCandle.volume.toFixed(
            2
          )} vs –ø—Ä–µ–¥—ã–¥—É—â–∞—è V=${previousCandle.volume.toFixed(2)}`
        );

        // –í—Ä–µ–º–µ–Ω–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–∏–≥–Ω–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        const originalSignal = this.tradingLogicService.getCurrentSignal();
        this.tradingLogicService.resetSignal();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤—Å–ø–ª–µ—Å–∫ –æ–±—ä–µ–º–∞ –≤ —ç—Ç–æ–π —Å–≤–µ—á–µ
        this.tradingLogicService.checkVolumeSpike(
          currentCandle,
          previousCandle
        );

        // –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω —Å–∏–≥–Ω–∞–ª, –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –µ–≥–æ –∫–∞–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        const detectedSignal = this.tradingLogicService.getCurrentSignal();
        if (detectedSignal?.isActive && !latestActiveSignal) {
          latestActiveSignal = detectedSignal;
          latestSignalIndex = i;
          logger.info(
            `üìä –ù–∞–π–¥–µ–Ω —Å–∏–≥–Ω–∞–ª-–∫–∞–Ω–¥–∏–¥–∞—Ç: ${new Date(
              detectedSignal.candle.timestamp
            ).toLocaleTimeString()}, V=${detectedSignal.candle.volume.toFixed(
              2
            )}`
          );
        }

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
        this.tradingLogicService.setSignal(originalSignal);
      }

      // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      if (latestActiveSignal && latestSignalIndex >= 0) {
        logger.info(
          `üéØ –°–ê–ú–´–ô –°–í–ï–ñ–ò–ô –°–ò–ì–ù–ê–õ: ${new Date(
            latestActiveSignal.candle.timestamp
          ).toLocaleTimeString()}, V=${latestActiveSignal.candle.volume.toFixed(
            2
          )}`
        );

        this.tradingLogicService.setSignal(latestActiveSignal);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ —Å–≤–µ—á–∏ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        for (
          let j = latestSignalIndex + 1;
          j < this.candleHistory.length;
          j++
        ) {
          const laterCandle = this.candleHistory[j];

          logger.info(
            `   –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${new Date(
              laterCandle.timestamp
            ).toLocaleTimeString()}, V=${laterCandle.volume.toFixed(
              2
            )} vs —Å–∏–≥–Ω–∞–ª V=${latestActiveSignal.candle.volume.toFixed(2)}`
          );

          this.tradingLogicService.processCompletedCandle(
            laterCandle,
            this.candleHistory.slice(0, j + 1)
          );

          // –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º –∞–Ω–∞–ª–∏–∑
          if (this.tradingLogicService.getActivePosition()) {
            logger.info("‚úÖ –ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞ –ø–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–º—É —Å–∏–≥–Ω–∞–ª—É");
            return;
          }

          // –ï—Å–ª–∏ —Å–∏–≥–Ω–∞–ª –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω/—Å–±—Ä–æ—à–µ–Ω, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
          const updatedSignal = this.tradingLogicService.getCurrentSignal();
          if (!updatedSignal?.isActive) {
            logger.info("‚èπÔ∏è –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω");
            break;
          }
        }

        // –ï—Å–ª–∏ —Å–∏–≥–Ω–∞–ª –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Å–≤–µ—á–µ–π
        const finalSignal = this.tradingLogicService.getCurrentSignal();
        if (finalSignal?.isActive) {
          logger.info(
            `‚è≥ –°–∞–º—ã–π —Å–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º (${new Date(
              finalSignal.candle.timestamp
            ).toLocaleTimeString()}), –æ–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è`
          );
          return;
        }
      }

      logger.info(
        "‚úÖ –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω. –ì–æ—Ç–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ–∂–∏–¥–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ..."
      );
    } else {
      logger.warn("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏");
    }
  }
}
