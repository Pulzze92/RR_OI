import { RestClientV5, WebsocketClient, WSClientConfigurableOptions, OrderSideV5 } from 'bybit-api';
import { logger } from '../utils/logger';
import { Candle, VolumeSignal } from '../types/candle';

const CANDLE_HISTORY_SIZE = 4;
const INITIAL_HISTORY_HOURS = 1;
const CANDLE_INTERVAL = '15';
const WS_MARKET = 'v5';
const CATEGORY = 'linear';

type WSEventHandler = (data: any) => void;
type WSErrorHandler = (error: unknown) => void;
type WSCloseHandler = () => void;

export class BybitService {
    private wsClient!: WebsocketClient;
    private readonly client: RestClientV5;
    private readonly SYMBOL = 'BTCUSDT';
    private readonly TRADE_SIZE = 10000;
    private readonly TAKE_PROFIT_POINTS = 300;
    private readonly STOP_LOSS_POINTS = 300;
    private candleHistory: Candle[] = [];
    private currentSignal: VolumeSignal | null = null;
    private readonly volumeMultiplier: number;
    private readonly apiKey: string;
    private readonly apiSecret: string;
    private lastLogTime: number = 0;
    private readonly LOG_INTERVAL = 2 * 60 * 1000;

    constructor(
        apiKey: string,
        apiSecret: string,
        volumeMultiplier: number = 4
    ) {
        if (!apiKey || !apiSecret) {
            throw new Error('API –∫–ª—é—á–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã');
        }

        this.volumeMultiplier = volumeMultiplier;
        this.apiKey = apiKey;
        this.apiSecret = apiSecret;

        this.client = new RestClientV5({
            key: apiKey,
            secret: apiSecret,
            testnet: false
        });

        this.initializeWebSocket();
    }

    private initializeWebSocket(): void {
        const wsConfig: WSClientConfigurableOptions = {
            key: this.apiKey,
            secret: this.apiSecret,
            market: WS_MARKET,
            testnet: false
        };

        this.wsClient = new WebsocketClient(wsConfig);
        this.setupWebSocketHandlers();
    }

    private setupWebSocketHandlers(): void {
        (this.wsClient as any).on('update', ((data: any) => {
            if (data.topic?.startsWith('kline')) {
                this.handleKlineUpdate(data);
            }
        }) as WSEventHandler);

        (this.wsClient as any).on('error', ((error: unknown) => {
            logger.error('WebSocket error:', error);
        }) as WSErrorHandler);

        (this.wsClient as any).on('close', (() => {
            logger.warn('WebSocket connection closed');
            this.reconnect();
        }) as WSCloseHandler);
    }

    private async reconnect(): Promise<void> {
        logger.info('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
        try {
            await this.wsClient.closeAll();
            await new Promise(resolve => setTimeout(resolve, 1000));
            this.initializeWebSocket();
            await this.subscribeToSymbol();
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
            setTimeout(() => this.reconnect(), 5000);
        }
    }

    private async initializeCandleHistory(): Promise<void> {
        try {
            logger.info(`üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —Å–≤–µ—á–µ–π –¥–ª—è ${this.SYMBOL}`);
            
            const endTime = Date.now();
            const startTime = endTime - (INITIAL_HISTORY_HOURS * 60 * 60 * 1000);

            const response = await this.client.getKline({
                category: CATEGORY,
                symbol: this.SYMBOL,
                interval: CANDLE_INTERVAL,
                start: Math.floor(startTime),
                end: Math.floor(endTime),
                limit: CANDLE_HISTORY_SIZE
            });

            if (response.retCode === 0 && response.result.list) {
                const candles: Candle[] = response.result.list.reverse().map((item) => this.mapKlineToCandle(item));
                this.candleHistory = candles;
                this.logInitialCandles(candles);
            }
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–≤–µ—á–µ–π:', error);
            throw error;
        }
    }

    private mapKlineToCandle(item: any[]): Candle {
        return {
            timestamp: Number(item[0]),
            open: Number(item[1]),
            high: Number(item[2]),
            low: Number(item[3]),
            close: Number(item[4]),
            volume: Number(item[5]),
            symbol: this.SYMBOL,
            isGreen: Number(item[4]) >= Number(item[1]),
            confirmed: true
        };
    }

    private logInitialCandles(candles: Candle[]): void {
        logger.info(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${candles.length} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π`);
        
        const lastCandle = candles[candles.length - 1];
        const previousCandle = candles[candles.length - 2];
        
        if (lastCandle && previousCandle) {
            logger.info('üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏:');
            logger.info(`–ü—Ä–µ–¥—ã–¥—É—â–∞—è (${new Date(previousCandle.timestamp).toLocaleTimeString()}): –æ–±—ä–µ–º ${previousCandle.volume.toFixed(2)}`);
            logger.info(`–¢–µ–∫—É—â–∞—è (${new Date(lastCandle.timestamp).toLocaleTimeString()}): –æ–±—ä–µ–º ${lastCandle.volume.toFixed(2)}`);
        }
    }

    private handleKlineUpdate(data: any): void {
        try {
            const kline = data.data[0];
            const symbol = data.topic.split('.')[2];

            if (symbol !== this.SYMBOL) return;
            
            const candle = this.createCandleFromKline(kline);
            this.updateCandleHistory(candle);
            this.checkAndLogState(candle);
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤–µ—á–∏:', error);
        }
    }

    private createCandleFromKline(kline: any): Candle {
        return {
            timestamp: Number(kline.start),
            open: Number(kline.open),
            high: Number(kline.high),
            low: Number(kline.low),
            close: Number(kline.close),
            volume: Number(kline.volume),
            symbol: this.SYMBOL,
            isGreen: Number(kline.close) >= Number(kline.open),
            confirmed: kline.confirm || false
        };
    }

    private updateCandleHistory(candle: Candle): void {
        const isNewCandle = this.candleHistory.length === 0 || 
                          this.candleHistory[this.candleHistory.length - 1].timestamp !== candle.timestamp;

        if (isNewCandle) {
            if (this.candleHistory.length > 0) {
                const lastCandle = this.candleHistory[this.candleHistory.length - 1];
                if (!lastCandle.confirmed) {
                    logger.warn(`‚ö†Ô∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å–≤–µ—á–∞ –Ω–µ –±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: ${new Date(lastCandle.timestamp).toLocaleTimeString()}`);
                }
                this.processCompletedCandle(lastCandle, candle);
            }
            this.candleHistory.push(candle);
            if (this.candleHistory.length > CANDLE_HISTORY_SIZE) {
                this.candleHistory.shift();
            }
        } else {
            this.candleHistory[this.candleHistory.length - 1] = candle;
        }

        if (isNewCandle && this.candleHistory.length >= 2) {
            const previousCandle = this.candleHistory[this.candleHistory.length - 2];
            this.checkVolumeSpike(candle, previousCandle);
        }
    }

    private checkAndLogState(currentCandle: Candle): void {
        const currentTime = Date.now();
        if (currentTime - this.lastLogTime >= this.LOG_INTERVAL) {
            this.logCurrentState(currentCandle);
            this.lastLogTime = currentTime;
        }
    }

    private logCurrentState(currentCandle: Candle): void {
        const previousCandle = this.candleHistory.length >= 2 ? 
            this.candleHistory[this.candleHistory.length - 2] : null;
        
        logger.info('üìä –°–¢–ê–¢–£–° –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê:');
        logger.info(`üïí –í—Ä–µ–º—è: ${new Date().toLocaleTimeString()}`);
        logger.info(`üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: $${currentCandle.close}`);
        logger.info(`üìà –¢–µ–∫—É—â–∏–π –æ–±—ä–µ–º: ${currentCandle.volume.toFixed(2)}`);
        
        if (previousCandle) {
            const volumeRatio = currentCandle.volume / previousCandle.volume;
            logger.info(`üìä –ü—Ä–µ–¥—ã–¥—É—â–∏–π –æ–±—ä–µ–º: ${previousCandle.volume.toFixed(2)}`);
            logger.info(`üìä –¢–µ–∫—É—â–µ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –æ–±—ä–µ–º–æ–≤: ${volumeRatio.toFixed(2)}x (—Ü–µ–ª—å: ${this.volumeMultiplier}x)`);
            logger.info(`üéØ –ù—É–∂–Ω–æ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ –µ—â–µ –≤ ${Math.max(0, this.volumeMultiplier - volumeRatio).toFixed(2)}x —Ä–∞–∑`);
            logger.info(`üîí –¢–µ–∫—É—â–∞—è —Å–≤–µ—á–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: ${currentCandle.confirmed ? '–î–∞' : '–ù–µ—Ç'}`);
            logger.info(`‚è±Ô∏è –í—Ä–µ–º—è —Å–≤–µ—á–∏: ${new Date(currentCandle.timestamp).toLocaleTimeString()}`);
        } else {
            logger.info(`‚ö†Ô∏è –û–∂–∏–¥–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–≤–µ—á–µ–π (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —Å–≤–µ—á–∏)`);
        }

        if (this.currentSignal?.isActive) {
            logger.info('‚ö†Ô∏è –ê–ö–¢–ò–í–ù–´–ô –°–ò–ì–ù–ê–õ:');
            logger.info(`üìä –û–±—ä–µ–º —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π —Å–≤–µ—á–∏: ${this.currentSignal.candle.volume.toFixed(2)}`);
            logger.info(`üéØ –û–∂–∏–¥–∞–µ–º —Å–≤–µ—á—É —Å –º–µ–Ω—å—à–∏–º –æ–±—ä–µ–º–æ–º –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é`);
        }

        logger.info('‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ');
    }

    private async processCompletedCandle(completedCandle: Candle, newCandle: Candle): Promise<void> {
        if (!this.currentSignal?.isActive) return;

        if (this.currentSignal.waitingForLowerVolume && completedCandle.confirmed) {
            if (completedCandle.volume < this.currentSignal.candle.volume) {
                logger.info(`üîí –°–≤–µ—á–∞ –∑–∞–∫—Ä—ã—Ç–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞`);
                logger.info(`üìä –û–±—ä–µ–º —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π —Å–≤–µ—á–∏: ${this.currentSignal.candle.volume.toFixed(2)}`);
                logger.info(`üìä –û–±—ä–µ–º –≤—Ö–æ–¥–Ω–æ–π —Å–≤–µ—á–∏: ${completedCandle.volume.toFixed(2)}`);
                await this.openPosition(this.currentSignal.candle, completedCandle);
                this.currentSignal.isActive = false;
                this.currentSignal.waitingForLowerVolume = false;
            }
        } else if (!completedCandle.confirmed && this.currentSignal.waitingForLowerVolume) {
            logger.info(`‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–∏`);
        }
    }

    private async openPosition(signalCandle: Candle, currentCandle: Candle): Promise<void> {
        try {
            const side: OrderSideV5 = signalCandle.isGreen ? 'Sell' : 'Buy';
            
            const stopLoss = signalCandle.isGreen ? 
                signalCandle.high + this.STOP_LOSS_POINTS :
                signalCandle.low - this.STOP_LOSS_POINTS;

            const takeProfit = currentCandle.close + (side === 'Buy' ? 
                this.TAKE_PROFIT_POINTS : 
                -this.TAKE_PROFIT_POINTS);

            const response = await this.client.submitOrder({
                category: 'linear',
                symbol: this.SYMBOL,
                side: side,
                orderType: 'Market',
                qty: this.TRADE_SIZE.toString(),
                timeInForce: 'GTC'
            });

            if (response.retCode === 0) {
                await this.client.setTradingStop({
                    category: 'linear',
                    symbol: this.SYMBOL,
                    takeProfit: takeProfit.toString(),
                    stopLoss: stopLoss.toString(),
                    positionIdx: 0,
                    tpTriggerBy: 'MarkPrice',
                    slTriggerBy: 'MarkPrice'
                });

                const message = this.formatTradeAlert(side, currentCandle.close, takeProfit, stopLoss);
                this.onTradeOpen(message);
            }
        } catch (error) {
            logger.error('Failed to open position:', error);
        }
    }

    private checkVolumeSpike(currentCandle: Candle, previousCandle: Candle): void {
        if (currentCandle.volume >= previousCandle.volume * this.volumeMultiplier) {
            const message = this.formatVolumeAlert(currentCandle, previousCandle);
            this.onVolumeSpike(message);

            this.currentSignal = {
                candle: currentCandle,
                isActive: true,
                waitingForLowerVolume: true
            };
        }
    }

    private formatVolumeAlert(currentCandle: Candle, previousCandle: Candle): string {
        return `üîç –û–ë–ù–ê–†–£–ñ–ï–ù–û –ê–ù–û–ú–ê–õ–¨–ù–û–ï –£–í–ï–õ–ò–ß–ï–ù–ò–ï –û–ë–™–ï–ú–ê ${this.SYMBOL}:\n\n` +
               `üìä –¢–µ–∫—É—â–∏–π –æ–±—ä–µ–º: ${currentCandle.volume.toFixed(2)}\n` +
               `üìà –ü—Ä–µ–¥—ã–¥—É—â–∏–π –æ–±—ä–µ–º: ${previousCandle.volume.toFixed(2)}\n` +
               `üíπ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ: ${((currentCandle.volume - previousCandle.volume) / previousCandle.volume * 100).toFixed(2)}%\n` +
               `${currentCandle.isGreen ? 'üü¢' : 'üî¥'} –¶–≤–µ—Ç —Å–≤–µ—á–∏: ${currentCandle.isGreen ? '–ó–ï–õ–ï–ù–´–ô' : '–ö–†–ê–°–ù–´–ô'}\n` +
               `üìâ –î–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã: ${((currentCandle.close - currentCandle.open) / currentCandle.open * 100).toFixed(2)}%\n` +
               `üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${currentCandle.close}`;
    }

    private formatTradeAlert(side: OrderSideV5, entry: number, takeProfit: number, stopLoss: number): string {
        return `üéØ –û–¢–ö–†–´–¢–ê –ù–û–í–ê–Ø –°–î–ï–õ–ö–ê ${this.SYMBOL}\n\n` +
               `${side === 'Buy' ? 'üìà –õ–û–ù–ì' : 'üìâ –®–û–†–¢'}\n` +
               `üíµ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${entry}\n` +
               `üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: ${takeProfit}\n` +
               `üõë –°—Ç–æ–ø-–ª–æ—Å—Å: ${stopLoss}\n` +
               `üí∞ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: $${this.TRADE_SIZE}\n` +
               `üìä –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: $${((Math.abs(takeProfit - entry) / entry) * this.TRADE_SIZE).toFixed(2)}\n` +
               `‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫: $${((Math.abs(stopLoss - entry) / entry) * this.TRADE_SIZE).toFixed(2)}`;
    }

    public onVolumeSpike: (message: string) => void = () => {};
    public onTradeOpen: (message: string) => void = () => {};

    public async subscribeToSymbol(): Promise<void> {
        try {
            await this.initializeCandleHistory();
            await this.wsClient.subscribeV5([`kline.${CANDLE_INTERVAL}.${this.SYMBOL}`], CATEGORY as 'linear');
            
            const startMessage = `ü§ñ –ë–û–¢ –ó–ê–ü–£–©–ï–ù\n\n` +
                               `üìä –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞: ${this.SYMBOL}\n` +
                               `üí∞ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: $${this.TRADE_SIZE}\n` +
                               `üìà –ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ–±—ä–µ–º–∞: ${this.volumeMultiplier}x\n` +
                               `‚è±Ô∏è –¢–∞–π–º—Ñ—Ä–µ–π–º: ${CANDLE_INTERVAL}m\n` +
                               `üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–≤–µ—á–µ–π: ${this.candleHistory.length}`;
            this.onTradeOpen(startMessage);
            logger.info(`‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${this.SYMBOL} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞`);
        } catch (error) {
            logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:`, error);
            throw error;
        }
    }
}