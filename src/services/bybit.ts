import { RestClientV5, WebsocketClient, WSClientConfigurableOptions, OrderSideV5 } from 'bybit-api';
import { logger } from '../utils/logger';

interface Candle {
    timestamp: number;
    open: number;
    high: number;
    low: number;
    close: number;
    volume: number;
    symbol: string;
    isGreen: boolean;
}

interface VolumeSignal {
    candle: Candle;
    isActive: boolean;
    waitingForLowerVolume: boolean;
}

export class BybitService {
    private wsClient: WebsocketClient;
    private readonly client: RestClientV5;
    private readonly SYMBOL = 'BTCUSDT';
    private readonly TRADE_SIZE = 1000;
    private readonly TAKE_PROFIT_POINTS = 300;
    private readonly STOP_LOSS_POINTS = 300;
    private candleHistory: Candle[] = [];
    private currentSignal: VolumeSignal | null = null;
    private readonly volumeMultiplier: number;
    private readonly apiKey: string;
    private readonly apiSecret: string;
    private lastLogTime: number = 0;
    private readonly LOG_INTERVAL = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

    constructor(
        apiKey: string,
        apiSecret: string,
        volumeMultiplier: number = 4
    ) {
        this.volumeMultiplier = volumeMultiplier;
        this.apiKey = apiKey;
        this.apiSecret = apiSecret;

        this.client = new RestClientV5({
            key: apiKey,
            secret: apiSecret,
            testnet: false
        });

        const wsConfig: WSClientConfigurableOptions = {
            key: apiKey,
            secret: apiSecret,
            market: 'v5',
            testnet: false
        };

        this.wsClient = new WebsocketClient(wsConfig);
        this.setupWebSocketHandlers();
    }

    private setupWebSocketHandlers(): void {
        (this.wsClient as any).on('update', (data: any) => {
            if (data.topic?.startsWith('kline')) {
                this.handleKlineUpdate(data);
            }
        });

        (this.wsClient as any).on('error', (error: any) => {
            logger.error('WebSocket error:', error);
        });

        (this.wsClient as any).on('close', () => {
            logger.warn('WebSocket connection closed');
            this.reconnect();
        });
    }

    private async reconnect(): Promise<void> {
        logger.info('Attempting to reconnect...');
        try {
            await this.wsClient.closeAll();
            
            const wsConfig: WSClientConfigurableOptions = {
                key: this.apiKey,
                secret: this.apiSecret,
                market: 'v5',
                testnet: false
            };

            this.wsClient = new WebsocketClient(wsConfig);
            this.setupWebSocketHandlers();
            await this.subscribeToSymbol();
        } catch (error) {
            logger.error('Failed to reconnect:', error);
            setTimeout(() => this.reconnect(), 5000);
        }
    }

    private handleKlineUpdate(data: any): void {
        try {
            const kline = data.data[0];
            const symbol = data.topic.split('.')[2];

            if (symbol !== this.SYMBOL) return;
            
            const candle: Candle = {
                timestamp: Number(kline.start),
                open: Number(kline.open),
                high: Number(kline.high),
                low: Number(kline.low),
                close: Number(kline.close),
                volume: Number(kline.volume),
                symbol,
                isGreen: Number(kline.close) >= Number(kline.open)
            };

            const currentTime = Date.now();
            if (currentTime - this.lastLogTime >= this.LOG_INTERVAL) {
                this.logCurrentState(candle);
                this.lastLogTime = currentTime;
            }

            const isNewCandle = this.candleHistory.length === 0 || 
                              this.candleHistory[this.candleHistory.length - 1].timestamp !== candle.timestamp;

            if (isNewCandle) {
                if (this.candleHistory.length > 0) {
                    this.processCompletedCandle(this.candleHistory[this.candleHistory.length - 1], candle);
                }
                this.candleHistory.push(candle);
                if (this.candleHistory.length > 10) {
                    this.candleHistory.shift();
                }
            } else {
                this.candleHistory[this.candleHistory.length - 1] = candle;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö —Å–≤–µ—á–µ–π
            if (isNewCandle && this.candleHistory.length >= 2) {
                const previousCandle = this.candleHistory[this.candleHistory.length - 2];
                this.checkVolumeSpike(candle, previousCandle);
            }
        } catch (error) {
            logger.error('Error handling kline update:', error);
        }
    }

    private logCurrentState(currentCandle: Candle): void {
        const previousCandle = this.candleHistory[this.candleHistory.length - 2];
        const requiredVolume = previousCandle ? previousCandle.volume * this.volumeMultiplier : 0;
        
        logger.info('üìä –°–¢–ê–¢–£–° –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê:');
        logger.info(`üïí –í—Ä–µ–º—è: ${new Date().toLocaleTimeString()}`);
        logger.info(`üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: $${currentCandle.close}`);
        logger.info(`üìà –¢–µ–∫—É—â–∏–π –æ–±—ä–µ–º: ${currentCandle.volume.toFixed(2)}`);
        
        if (previousCandle) {
            logger.info(`üìä –ü—Ä–µ–¥—ã–¥—É—â–∏–π –æ–±—ä–µ–º: ${previousCandle.volume.toFixed(2)}`);
            logger.info(`üéØ –¢—Ä–µ–±—É–µ–º—ã–π –æ–±—ä–µ–º –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞: ${requiredVolume.toFixed(2)}`);
            logger.info(`üìâ –î–æ —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–ª–æ—Å—å: ${Math.max(0, requiredVolume - currentCandle.volume).toFixed(2)}`);
        }

        if (this.currentSignal?.isActive) {
            logger.info('‚ö†Ô∏è –ê–ö–¢–ò–í–ù–´–ô –°–ò–ì–ù–ê–õ:');
            logger.info(`üìä –û–±—ä–µ–º —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π —Å–≤–µ—á–∏: ${this.currentSignal.candle.volume.toFixed(2)}`);
            logger.info(`üéØ –û–∂–∏–¥–∞–µ–º —Å–≤–µ—á—É —Å –º–µ–Ω—å—à–∏–º –æ–±—ä–µ–º–æ–º –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é`);
        }

        logger.info('‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ');
    }

    private async processCompletedCandle(completedCandle: Candle, newCandle: Candle): Promise<void> {
        if (!this.currentSignal?.isActive) return;

        if (this.currentSignal.waitingForLowerVolume) {
            if (newCandle.volume < this.currentSignal.candle.volume) {
                // –ù–∞—à–ª–∏ —Å–≤–µ—á—É —Å –º–µ–Ω—å—à–∏–º –æ–±—ä–µ–º–æ–º, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                await this.openPosition(this.currentSignal.candle, newCandle);
                this.currentSignal.isActive = false;
                this.currentSignal.waitingForLowerVolume = false;
            }
        }
    }

    private async openPosition(signalCandle: Candle, currentCandle: Candle): Promise<void> {
        try {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ (–ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π —Å–≤–µ—á–∏)
            const side: OrderSideV5 = signalCandle.isGreen ? 'Sell' : 'Buy';
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å
            const stopLoss = signalCandle.isGreen ? 
                signalCandle.high + this.STOP_LOSS_POINTS :
                signalCandle.low - this.STOP_LOSS_POINTS;

            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
            const takeProfit = currentCandle.close + (side === 'Buy' ? 
                this.TAKE_PROFIT_POINTS : 
                -this.TAKE_PROFIT_POINTS);

            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
            const response = await this.client.submitOrder({
                category: 'linear',
                symbol: this.SYMBOL,
                side: side,
                orderType: 'Market',
                qty: this.TRADE_SIZE.toString(),
                timeInForce: 'GTC'
            });

            if (response.retCode === 0) {
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TP/SL
                await this.client.setTradingStop({
                    category: 'linear',
                    symbol: this.SYMBOL,
                    takeProfit: takeProfit.toString(),
                    stopLoss: stopLoss.toString(),
                    positionIdx: 0,
                    tpTriggerBy: 'MarkPrice',
                    slTriggerBy: 'MarkPrice'
                });

                const message = this.formatTradeAlert(side, currentCandle.close, takeProfit, stopLoss);
                this.onTradeOpen(message);
            }
        } catch (error) {
            logger.error('Failed to open position:', error);
        }
    }

    private checkVolumeSpike(currentCandle: Candle, previousCandle: Candle): void {
        if (currentCandle.volume >= previousCandle.volume * this.volumeMultiplier) {
            const message = this.formatVolumeAlert(currentCandle, previousCandle);
            this.onVolumeSpike(message);

            this.currentSignal = {
                candle: currentCandle,
                isActive: true,
                waitingForLowerVolume: true
            };
        }
    }

    private formatVolumeAlert(currentCandle: Candle, previousCandle: Candle): string {
        return `üîç –û–ë–ù–ê–†–£–ñ–ï–ù–û –ê–ù–û–ú–ê–õ–¨–ù–û–ï –£–í–ï–õ–ò–ß–ï–ù–ò–ï –û–ë–™–ï–ú–ê ${this.SYMBOL}:\n\n` +
               `üìä –¢–µ–∫—É—â–∏–π –æ–±—ä–µ–º: ${currentCandle.volume.toFixed(2)}\n` +
               `üìà –ü—Ä–µ–¥—ã–¥—É—â–∏–π –æ–±—ä–µ–º: ${previousCandle.volume.toFixed(2)}\n` +
               `üíπ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ: ${((currentCandle.volume - previousCandle.volume) / previousCandle.volume * 100).toFixed(2)}%\n` +
               `${currentCandle.isGreen ? 'üü¢' : 'üî¥'} –¶–≤–µ—Ç —Å–≤–µ—á–∏: ${currentCandle.isGreen ? '–ó–ï–õ–ï–ù–´–ô' : '–ö–†–ê–°–ù–´–ô'}\n` +
               `üìâ –î–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã: ${((currentCandle.close - currentCandle.open) / currentCandle.open * 100).toFixed(2)}%\n` +
               `üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${currentCandle.close}`;
    }

    private formatTradeAlert(side: OrderSideV5, entry: number, takeProfit: number, stopLoss: number): string {
        return `üéØ –û–¢–ö–†–´–¢–ê –ù–û–í–ê–Ø –°–î–ï–õ–ö–ê ${this.SYMBOL}\n\n` +
               `${side === 'Buy' ? 'üìà –õ–û–ù–ì' : 'üìâ –®–û–†–¢'}\n` +
               `üíµ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${entry}\n` +
               `üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: ${takeProfit}\n` +
               `üõë –°—Ç–æ–ø-–ª–æ—Å—Å: ${stopLoss}\n` +
               `üí∞ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: $${this.TRADE_SIZE}\n` +
               `üìä –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: $${((Math.abs(takeProfit - entry) / entry) * this.TRADE_SIZE).toFixed(2)}\n` +
               `‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫: $${((Math.abs(stopLoss - entry) / entry) * this.TRADE_SIZE).toFixed(2)}`;
    }

    public onVolumeSpike: (message: string) => void = () => {};
    public onTradeOpen: (message: string) => void = () => {};

    public async subscribeToSymbol(): Promise<void> {
        try {
            await this.wsClient.subscribeV5([`kline.15.${this.SYMBOL}`], 'linear');
            const startMessage = `ü§ñ –ë–û–¢ –ó–ê–ü–£–©–ï–ù\n\n` +
                               `üìä –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞: ${this.SYMBOL}\n` +
                               `üí∞ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: $${this.TRADE_SIZE}\n` +
                               `üìà –ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ–±—ä–µ–º–∞: ${this.volumeMultiplier}x\n` +
                               `‚è±Ô∏è –¢–∞–π–º—Ñ—Ä–µ–π–º: 15m`;
            this.onTradeOpen(startMessage);
            logger.info(`Subscribed to ${this.SYMBOL} klines`);
        } catch (error) {
            logger.error(`Failed to subscribe to ${this.SYMBOL}:`, error);
        }
    }
} 