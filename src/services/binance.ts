import Binance, { CandleChartInterval } from "binance-api-node";
import { Candle } from "./binance.types";
import { logger } from "../utils/logger";

export class BinanceService {
  private client;
  private wsClient: any = null;

  constructor(apiKey: string, apiSecret: string, testnet: boolean) {
    this.client = Binance({
      apiKey: apiKey,
      apiSecret: apiSecret
      // API URL-—ã –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      // futures: testnet ? 'https://testnet.binancefuture.com' : 'https://fapi.binance.com',
    });
  }

  public getClient() {
    return this.client;
  }

  // WebSocket –¥–ª—è —Å–¥–µ–ª–æ–∫ (trades)
  public startTradesWebSocket(
    symbol: string,
    onTradeUpdate: (trade: any) => void
  ) {
    try {
      logger.info(`üì° –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket —Å–¥–µ–ª–æ–∫ –¥–ª—è ${symbol}...`);

      const tradesStream = this.client.ws.trades(symbol, (trade: any) => {
        onTradeUpdate(trade);
      });

      logger.info(`‚úÖ WebSocket —Å–¥–µ–ª–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è ${symbol}`);
      return tradesStream;
    } catch (error) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket —Å–¥–µ–ª–æ–∫:`, error);
      return null;
    }
  }

  public async startWebSocket(
    symbol: string,
    onCandleUpdate: (candle: Candle) => void
  ) {
    const connectWebSocket = () => {
      try {
        logger.info(`üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket –¥–ª—è ${symbol}...`);

        let lastLoggedVolume = 0;
        let lastLoggedTime = 0;

        // –°–æ–∑–¥–∞–µ–º WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤
        this.wsClient = this.client.ws.futuresCandles(
          symbol,
          "1h",
          (candle: any) => {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º confirmed –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ
            const isConfirmed = candle.isFinal === true || candle.isFinal === 1;
            const currentTime = Date.now();
            const candleEndTime =
              (candle.openTime || candle.startTime) + 60 * 60 * 1000; // +1 —á–∞—Å –¥–ª—è —á–∞—Å–æ–≤–æ–π —Å–≤–µ—á–∏

            // –ï—Å–ª–∏ —Å–≤–µ—á–∞ —É–∂–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏, —Å—á–∏—Ç–∞–µ–º –µ—ë confirmed
            const shouldBeConfirmed = currentTime > candleEndTime;

            const formattedCandle: Candle = {
              timestamp: candle.openTime || candle.startTime,
              open: parseFloat(candle.open),
              high: parseFloat(candle.high),
              low: parseFloat(candle.low),
              close: parseFloat(candle.close),
              volume: parseFloat(candle.volume),
              turnover: parseFloat(candle.quoteVolume || "0"),
              confirmed: isConfirmed || shouldBeConfirmed,
              isGreen: parseFloat(candle.close) >= parseFloat(candle.open)
            };

            if (formattedCandle.timestamp) {
              const currentTime = Date.now();
              const timeSinceLastLog = currentTime - lastLoggedTime;

              if (formattedCandle.confirmed) {
                logger.info(
                  `üìä WebSocket: ${new Date(
                    formattedCandle.timestamp
                  ).toLocaleString()} - V=${formattedCandle.volume.toFixed(
                    2
                  )} ‚úÖ`
                );
                lastLoggedTime = currentTime;
              } else {
                // –ù–ï –ª–æ–≥–∏—Ä—É–µ–º –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —Å–≤–µ—á–∏ (—É–±–∏—Ä–∞–µ–º —Å–ø–∞–º)
                // if (timeSinceLastLog >= 60000) {
                //   logger.info(
                //     `üìä WebSocket: ${new Date(
                //       formattedCandle.timestamp
                //     ).toLocaleString()} - V=${formattedCandle.volume.toFixed(
                //       2
                //     )} ‚è≥`
                //   );
                //   lastLoggedTime = currentTime;
                // }
              }
            }

            onCandleUpdate(formattedCandle);
          }
        );

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ –∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if (this.wsClient && typeof this.wsClient.on === "function") {
          this.wsClient.on("error", (error: any) => {
            logger.error("‚ùå WebSocket –æ—à–∏–±–∫–∞:", error);
            setTimeout(() => {
              logger.info("üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º WebSocket —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...");
              connectWebSocket();
            }, 5000);
          });

          this.wsClient.on("close", () => {
            logger.warn(
              "‚ö†Ô∏è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã..."
            );
            setTimeout(() => {
              connectWebSocket();
            }, 3000);
          });
        }

        logger.info(`‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è ${symbol}`);
      } catch (error) {
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ WebSocket:", error);
        setTimeout(() => {
          logger.info("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...");
          connectWebSocket();
        }, 10000);
      }
    };

    connectWebSocket();
  }

  public stopWebSocket() {
    if (this.wsClient) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø WebSocket –∫–ª–∏–µ–Ω—Ç–∞ –∏ –≤—ã–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        if (typeof this.wsClient.close === "function") {
          this.wsClient.close();
        } else if (typeof this.wsClient.closeAll === "function") {
          this.wsClient.closeAll();
        } else if (typeof this.wsClient === "function") {
          // –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
          this.wsClient();
        }
        logger.info("üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω");
      } catch (error) {
        logger.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ WebSocket:", error);
      }
      this.wsClient = null;
    }
  }

  public async getUSDTBalance(): Promise<number> {
    try {
      const balances = await this.client.futuresAccountBalance();
      const usdtBalance = balances.find(b => b.asset === "USDT");
      if (usdtBalance) {
        const available = parseFloat(usdtBalance.availableBalance);
        logger.info(`üí∞ –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${available.toFixed(2)} USDT`);
        return available;
      }
      logger.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –±–∞–ª–∞–Ω—Å USDT.");
      return 0;
    } catch (error) {
      logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:", error);
      return 0;
    }
  }

  public async getHistoricalCandles(
    symbol: string,
    interval: CandleChartInterval,
    limit: number
  ): Promise<Candle[]> {
    try {
      logger.info(
        `üìä –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: ${symbol}, ${interval}, ${limit} —Å–≤–µ—á–µ–π...`
      );

      const candles = await this.client.futuresCandles({
        symbol: symbol,
        interval: interval,
        limit: limit
      });

      // –í–∞–∂–Ω–æ: –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–µ—á—É –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—É—é.
      // –≠—Ç–æ –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç –≤—Ö–æ–¥–∞ –Ω–∞ –Ω–µ–∑–∞–∫—Ä—ã—Ç–æ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–π –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ,
      // –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—è –≤—Ä–µ–º—è. –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ isFinal –ø–æ WebSocket —Å—Ç–∞—Ç—É—Å –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω.
      const formattedCandles: Candle[] = candles.map((c, idx) => ({
        timestamp: c.openTime,
        open: parseFloat(c.open),
        high: parseFloat(c.high),
        low: parseFloat(c.low),
        close: parseFloat(c.close),
        volume: parseFloat(c.volume),
        turnover: parseFloat(c.quoteVolume),
        confirmed: idx < candles.length - 1, // –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—á–∏—Ç–∞–µ—Ç—Å—è –µ—â–µ –Ω–µ–∑–∞–∫—Ä—ã—Ç–æ–π
        isGreen: parseFloat(c.close) >= parseFloat(c.open)
      }));

      logger.info(
        `‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${formattedCandles.length} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π.`
      );
      return formattedCandles;
    } catch (error) {
      logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:", error);
      return [];
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  public async disconnect(): Promise<void> {
    try {
      if (this.wsClient) {
        logger.info("üîå –û—Ç–∫–ª—é—á–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø WebSocket –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥
        if (typeof this.wsClient.close === "function") {
          this.wsClient.close();
        } else if (typeof this.wsClient.destroy === "function") {
          this.wsClient.destroy();
        } else if (typeof this.wsClient.end === "function") {
          this.wsClient.end();
        } else {
          // –ï—Å–ª–∏ –Ω–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –∑–∞–∫—Ä—ã—Ç–∏—è, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω—É–ª—è–µ–º
          logger.warn(
            "‚ö†Ô∏è WebSocket –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ –∑–∞–∫—Ä—ã—Ç–∏—è, –æ–±–Ω—É–ª—è–µ–º —Å—Å—ã–ª–∫—É"
          );
        }

        this.wsClient = null;
        logger.info("‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã");
      } else {
        logger.info("‚ÑπÔ∏è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã");
      }
    } catch (error) {
      logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ WebSocket:", error);
      // –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –æ–±–Ω—É–ª—è–µ–º —Å—Å—ã–ª–∫—É
      this.wsClient = null;
    }
  }
}
