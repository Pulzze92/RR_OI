import dotenv from "dotenv";
import { BinanceService } from "./services/binance";
import { TelegramService } from "./services/telegram";
import { logger } from "./utils/logger";
import { Candle } from "./services/binance.types";
import {
  TradingLogicService,
  TradingLogicCallbacks,
  TradingLogicOptions
} from "./services/tradingLogicService";
import { NotificationService } from "./services/notificationService";

dotenv.config();

type Side = "Buy" | "Sell";

interface ActiveTracker {
  id: string;
  side: Side;
  entryPrice: number;
  tpPrice: number;
  slPrice: number;
  notionalUsd: number;
  quantityAsset: number;
  createdAt: number;
  resolved: boolean;
}

const { TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, BINANCE_TESTNET } = process.env;

if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
  throw new Error("Missing TELEGRAM_BOT_TOKEN or TELEGRAM_CHAT_ID");
}

async function main() {
  const symbol = "SOLUSDT";
  const baseCapitalUsd = 3000; // –∫–∞–ø–∏—Ç–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const leverage = 6; // –ø–ª–µ—á–æ 1:6
  const notionalUsd = baseCapitalUsd * leverage; // —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
  const volumeThreshold = 100000; // –ø–æ—Ä–æ–≥ –æ–±—ä–µ–º–∞ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞
  const takeProfitPoints = 1.0; // TP = $1
  const stopLossPoints = 0.5; // SL = $0.5

  const telegram = new TelegramService(
    TELEGRAM_BOT_TOKEN as string,
    TELEGRAM_CHAT_ID as string
  );
  const binance = new BinanceService(
    process.env.BINANCE_API_KEY || "",
    process.env.BINANCE_API_SECRET || "",
    BINANCE_TESTNET === "true"
  );

  // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä TradingLogicService, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 1-–≤-1 –∞–Ω–∞–ª–∏–∑ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –∏ OI
  const callbacks: TradingLogicCallbacks = {
    onTradeOperation: async () => {},
    onSignalDetected: async () => {}
  };
  const options: TradingLogicOptions = {
    symbol,
    tradeSizeUsd: notionalUsd,
    takeProfitPoints: takeProfitPoints,
    stopLossPoints: stopLossPoints,
    trailingActivationPoints: 1,
    trailingDistance: 1.5,
    volumeThreshold: volumeThreshold,
    useTrailingStop: false,
    leverage
  };
  const analysisService = new TradingLogicService(
    binance.getClient(),
    new NotificationService(symbol, notionalUsd, stopLossPoints),
    callbacks,
    options
  );

  logger.info(
    `üöÄ –°–∏–≥–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º (–±–µ–∑ —Ç–æ—Ä–≥–æ–≤–ª–∏) –∑–∞–ø—É—â–µ–Ω: ${symbol}, –∫–∞–ø–∏—Ç–∞–ª=$${baseCapitalUsd}, –ø–ª–µ—á–æ=${leverage}x, TP=$${takeProfitPoints}, SL=$${stopLossPoints}`
  );

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  let candleHistory: Candle[] = [];
  let currentSignal: { candle: Candle } | null = null;
  let latestTradePrice = 0;
  const trackers: ActiveTracker[] = [];

  // –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–≥–æ–Ω–∞
  const initial = await binance.getHistoricalCandles(symbol, "1h" as any, 5);
  candleHistory = initial.slice(-5);

  // –°—Ç—Ä–∏–º —Å–¥–µ–ª–æ–∫ –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è TP/SL
  try {
    binance.startTradesWebSocket(symbol, trade => {
      const price = parseFloat(trade.price);
      if (!Number.isFinite(price)) return;
      latestTradePrice = price;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–∫–µ—Ä—ã –Ω–∞ –ø–µ—Ä–≤–æ–µ –∫–∞—Å–∞–Ω–∏–µ TP/SL
      for (const tr of trackers) {
        if (tr.resolved) continue;

        if (tr.side === "Buy") {
          if (price >= tr.tpPrice) {
            resolveTracker(tr, price, telegram);
          } else if (price <= tr.slPrice) {
            resolveTracker(tr, price, telegram);
          }
        } else {
          if (price <= tr.tpPrice) {
            resolveTracker(tr, price, telegram);
          } else if (price >= tr.slPrice) {
            resolveTracker(tr, price, telegram);
          }
        }
      }
    });
  } catch (e) {
    logger.warn(
      "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ—Ç–æ–∫ —Å–¥–µ–ª–æ–∫, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ TP/SL –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Ç–æ—á–Ω—ã–º",
      e
    );
  }

  // WebSocket —Å–≤–µ—á–µ–π (1h), –¥–µ—Ç–µ–∫—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  await binance.startWebSocket(symbol, async (candle: Candle) => {
    try {
      if (!candle.confirmed) return;

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–µ—á—É –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
      candleHistory.push(candle);
      if (candleHistory.length > 6) candleHistory = candleHistory.slice(-6);

      const prev = findPreviousConfirmed(candleHistory, candle.timestamp);
      if (!prev) return;

      // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª—å–Ω—ã–π –±–∞—Ä ‚Äî –∂–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–æ–±—ä–µ–º –Ω–∏–∂–µ)
      if (currentSignal) {
        if (candle.volume < currentSignal.candle.volume) {
          // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ ‚Äî —Ñ–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–µ–º —Ç—Ä–µ–∫–µ—Ä
          const signalCandle = currentSignal.candle;
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 1-–≤-1 –ø–æ –ª–æ–≥–∏–∫–µ TradingLogicService (–∫–ª–∞—Å—Ç–µ—Ä—ã + OI)
          let side: Side = signalCandle.isGreen ? "Buy" : "Sell";
          try {
            const clusterAnalysis = await analysisService.analyzeVolumeClusters(
              signalCandle,
              prev
            );
            try {
              const oiZones = await analysisService.analyzeOpenInterestZones(
                signalCandle
              );
              if (oiZones) {
                const comparedZone =
                  clusterAnalysis.upperClusterVolume >=
                  clusterAnalysis.lowerClusterVolume
                    ? "upper"
                    : "lower";
                const zoneDelta =
                  comparedZone === "upper"
                    ? oiZones.upperDelta
                    : oiZones.lowerDelta;
                side =
                  comparedZone === "lower"
                    ? zoneDelta < 0
                      ? "Buy"
                      : "Sell"
                    : zoneDelta < 0
                    ? "Sell"
                    : "Buy";
              }
            } catch (e) {
              // –ï—Å–ª–∏ OI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –æ—Å—Ç–∞–µ–º—Å—è –Ω–∞ –±–∞–∑–æ–≤–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ —Ü–≤–µ—Ç—É —Å–≤–µ—á–∏
            }
          } catch (e) {
            // –ï—Å–ª–∏ –∫–ª–∞—Å—Ç–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã ‚Äî –æ—Å—Ç–∞–µ–º—Å—è –Ω–∞ –±–∞–∑–æ–≤–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ —Ü–≤–µ—Ç—É —Å–≤–µ—á–∏
          }

          const entry = latestTradePrice > 0 ? latestTradePrice : candle.close;
          const { tp, sl } = calcTpSl(
            entry,
            side,
            takeProfitPoints,
            stopLossPoints
          );
          const qty = notionalUsd / entry;

          const tracker: ActiveTracker = {
            id: `${signalCandle.timestamp}`,
            side,
            entryPrice: entry,
            tpPrice: tp,
            slPrice: sl,
            notionalUsd,
            quantityAsset: qty,
            createdAt: Date.now(),
            resolved: false
          };
          trackers.push(tracker);

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –≤ Telegram
          // –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–∫–ª–∞—Å—Ç–µ—Ä—ã –∏ OI) –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
          let clusterInfo = "";
          let oiInfo = "";
          try {
            const clusterAnalysis = await analysisService.analyzeVolumeClusters(
              signalCandle,
              prev
            );
            const upperPercent = (
              (clusterAnalysis.upperClusterVolume / signalCandle.volume) *
              100
            ).toFixed(1);
            const middlePercent = (
              (clusterAnalysis.middleClusterVolume / signalCandle.volume) *
              100
            ).toFixed(1);
            const lowerPercent = (
              (clusterAnalysis.lowerClusterVolume / signalCandle.volume) *
              100
            ).toFixed(1);
            clusterInfo = `\nüìä –ö–õ–ê–°–¢–ï–†–´: –í–µ—Ä—Ö ${upperPercent}% | –°—Ä–µ–¥ ${middlePercent}% | –ù–∏–∑ ${lowerPercent}%`;
            try {
              const oiZones = await analysisService.analyzeOpenInterestZones(
                signalCandle
              );
              if (oiZones) {
                const comparedZone =
                  clusterAnalysis.upperClusterVolume >=
                  clusterAnalysis.lowerClusterVolume
                    ? "upper"
                    : "lower";
                const zoneDelta =
                  comparedZone === "upper"
                    ? oiZones.upperDelta
                    : oiZones.lowerDelta;
                const oiTrend = zoneDelta >= 0 ? "—Ä–æ—Å—Ç" : "–ø–∞–¥–µ–Ω–∏–µ";
                oiInfo = `\nüìà OI(5–º/—á–∞—Å): low=${oiZones.lowerDelta.toFixed(
                  2
                )} | mid=${oiZones.middleDelta.toFixed(
                  2
                )} | up=${oiZones.upperDelta.toFixed(
                  2
                )} ‚Üí –∑–æ–Ω–∞=${comparedZone}, –≤ –∑–æ–Ω–µ ${oiTrend}`;
              }
            } catch (e) {}
          } catch (e) {}

          await telegram.sendMessage(
            formatSignalMessage({
              symbol,
              side,
              entry,
              tp,
              sl,
              baseCapitalUsd,
              leverage,
              notionalUsd
            }) +
              clusterInfo +
              oiInfo
          );

          logger.info(
            `üéØ –°–∏–≥–Ω–∞–ª: ${side} @ ${entry.toFixed(3)} | TP ${tp.toFixed(
              3
            )} | SL ${sl.toFixed(3)} | notional $${notionalUsd}`
          );

          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–∏–≥–Ω–∞–ª ‚Äî –æ–Ω –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω
          currentSignal = null;
          return;
        }
        // –ï—Å–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏—à–ª–æ ‚Äì –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å
      }

      // –ò–Ω–∞—á–µ –∏—â–µ–º –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª—å–Ω—ã–π –±–∞—Ä: –æ–±—ä–µ–º > –ø–æ—Ä–æ–≥–∞ –∏ > –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–≤–µ—á–∏
      if (candle.volume > volumeThreshold && candle.volume > prev.volume) {
        currentSignal = { candle };
        logger.info(
          `üì¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–∏–≥–Ω–∞–ª—å–Ω—ã–π –±–∞—Ä: ${new Date(
            candle.timestamp
          ).toLocaleString()} V=${candle.volume.toFixed(
            2
          )} (–ø–æ—Ä–æ–≥=${volumeThreshold})`
        );
      }
    } catch (error) {
      logger.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–≤–µ—á–µ–π —Å–∏–≥–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞:", error);
    }
  });
}

function findPreviousConfirmed(history: Candle[], ts: number): Candle | null {
  for (let i = history.length - 2; i >= 0; i--) {
    if (history[i].timestamp < ts && history[i].confirmed) return history[i];
  }
  return null;
}

function calcTpSl(entry: number, side: Side, tpPts: number, slPts: number) {
  if (side === "Buy") {
    return { tp: entry + tpPts, sl: entry - slPts };
  }
  return { tp: entry - tpPts, sl: entry + slPts };
}

function resolveTracker(
  tr: ActiveTracker,
  exitPrice: number,
  telegram: TelegramService
) {
  if (tr.resolved) return;
  tr.resolved = true;

  const delta =
    tr.side === "Buy" ? exitPrice - tr.entryPrice : tr.entryPrice - exitPrice;
  const pnlUsd = delta * tr.quantityAsset; // –ª–∏–Ω–µ–π–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç USDT
  const result = pnlUsd >= 0 ? "‚úÖ TP" : "‚ùå SL";

  telegram
    .sendMessage(
      formatResolutionMessage({
        symbol: "SOLUSDT",
        side: tr.side,
        entry: tr.entryPrice,
        exit: exitPrice,
        delta,
        notionalUsd: tr.notionalUsd,
        qty: tr.quantityAsset,
        pnlUsd
      })
    )
    .catch(err =>
      logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–≥–Ω–∞–ª–∞ –≤ Telegram:", err)
    );

  logger.info(
    `${result} ${tr.side} | entry ${tr.entryPrice.toFixed(
      3
    )} ‚Üí exit ${exitPrice.toFixed(3)} | PnL $${pnlUsd.toFixed(2)}`
  );
}

function formatSignalMessage(args: {
  symbol: string;
  side: Side;
  entry: number;
  tp: number;
  sl: number;
  baseCapitalUsd: number;
  leverage: number;
  notionalUsd: number;
}): string {
  const dir = args.side === "Buy" ? "–õ–û–ù–ì" : "–®–û–†–¢";
  return (
    `üì¢ –°–ò–ì–ù–ê–õ (—Å–∏–º—É–ª—è—Ü–∏—è) ${args.symbol}\n\n` +
    `–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${dir}\n` +
    `–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: ${args.entry.toFixed(3)}\n` +
    `TP: ${args.tp.toFixed(3)} (+$1.0)\n` +
    `SL: ${args.sl.toFixed(3)} (-$0.5)\n\n` +
    `–ö–∞–ø–∏—Ç–∞–ª: $${args.baseCapitalUsd} | –ü–ª–µ—á–æ: ${args.leverage}x\n` +
    `–ù–æ—Ç–∏–æ–Ω–∞–ª: $${args.notionalUsd}`
  );
}

function formatResolutionMessage(args: {
  symbol: string;
  side: Side;
  entry: number;
  exit: number;
  delta: number;
  notionalUsd: number;
  qty: number;
  pnlUsd: number;
}): string {
  const dir = args.side === "Buy" ? "–õ–û–ù–ì" : "–®–û–†–¢";
  const outcome = args.pnlUsd >= 0 ? "‚úÖ TP" : "‚ùå SL";
  const sign = args.pnlUsd >= 0 ? "+" : "";
  return (
    `${outcome} ${args.symbol}\n\n` +
    `${dir}\n` +
    `–í—Ö–æ–¥: ${args.entry.toFixed(3)}\n` +
    `–í—ã—Ö–æ–¥: ${args.exit.toFixed(3)}\n` +
    `Œî: ${args.delta >= 0 ? "+" : ""}${args.delta.toFixed(3)}\n\n` +
    `–ù–æ—Ç–∏–æ–Ω–∞–ª: $${args.notionalUsd} | –ö–æ–ª-–≤–æ: ${args.qty.toFixed(4)}\n` +
    `–†–µ–∑—É–ª—å—Ç–∞—Ç: ${sign}$${args.pnlUsd.toFixed(2)}`
  );
}

main().catch(e => {
  logger.error("–°–∏–≥–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:", e);
  process.exit(1);
});
