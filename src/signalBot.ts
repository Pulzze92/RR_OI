import dotenv from "dotenv";
import { BinanceService } from "./services/binance";
import { TelegramService } from "./services/telegram";
import { logger } from "./utils/logger";
import { Candle } from "./services/binance.types";
import {
  TradingLogicService,
  TradingLogicCallbacks,
  TradingLogicOptions
} from "./services/tradingLogicService";
import { NotificationService } from "./services/notificationService";

dotenv.config();

type Side = "Buy" | "Sell";

interface ActiveTracker {
  id: string;
  side: Side;
  entryPrice: number;
  tpPrice: number;
  slPrice: number;
  notionalUsd: number;
  quantityAsset: number;
  createdAt: number;
  resolved: boolean;
}

const { TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, BINANCE_TESTNET } = process.env;

if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
  throw new Error("Missing TELEGRAM_BOT_TOKEN or TELEGRAM_CHAT_ID");
}

async function main() {
  const symbol = "SOLUSDT";
  const baseCapitalUsd = 3000; // –∫–∞–ø–∏—Ç–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const leverage = 6; // –ø–ª–µ—á–æ 1:6
  const notionalUsd = baseCapitalUsd * leverage; // —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
  const volumeThreshold = 100000; // –ø–æ—Ä–æ–≥ –æ–±—ä–µ–º–∞ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ (15m)
  const takeProfitPoints = 1.0; // TP = $1
  const stopLossPoints = 0.5; // –±—É—Ñ–µ—Ä –∫ —ç–∫—Å—Ç—Ä–µ–º—É–º—É –¥–ª—è SL

  const telegram = new TelegramService(
    TELEGRAM_BOT_TOKEN as string,
    TELEGRAM_CHAT_ID as string
  );
  const binance = new BinanceService(
    process.env.BINANCE_API_KEY || "",
    process.env.BINANCE_API_SECRET || "",
    BINANCE_TESTNET === "true"
  );

  // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä TradingLogicService, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 1-–≤-1 –∞–Ω–∞–ª–∏–∑ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –∏ OI
  const callbacks: TradingLogicCallbacks = {
    onTradeOperation: async () => {},
    onSignalDetected: async () => {}
  };
  const options: TradingLogicOptions = {
    symbol,
    tradeSizeUsd: notionalUsd,
    takeProfitPoints: takeProfitPoints,
    stopLossPoints: stopLossPoints,
    trailingActivationPoints: 1,
    trailingDistance: 1.5,
    volumeThreshold: volumeThreshold,
    useTrailingStop: false,
    leverage,
    disableBrokerSideEffects: true
  };
  const analysisService = new TradingLogicService(
    binance.getClient(),
    new NotificationService(symbol, notionalUsd, stopLossPoints),
    callbacks,
    options
  );

  logger.info(
    `üöÄ –°–∏–≥–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º (–±–µ–∑ —Ç–æ—Ä–≥–æ–≤–ª–∏) –∑–∞–ø—É—â–µ–Ω: ${symbol}, –∫–∞–ø–∏—Ç–∞–ª=$${baseCapitalUsd}, –ø–ª–µ—á–æ=${leverage}x, TP=$${takeProfitPoints}, SL=$${stopLossPoints}`
  );

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  let candleHistory: Candle[] = [];
  let currentSignal: {
    candle: Candle;
    expectedConfirmTs: number;
  } | null = null;
  let latestTradePrice = 0;
  const trackers: ActiveTracker[] = [];

  // –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–≥–æ–Ω–∞
  const initial = await binance.getHistoricalCandles(symbol, "15m" as any, 5);
  candleHistory = initial.slice(-5);
  // –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ç–∏–ª–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ (–ø–æ–∏—Å–∫ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–π)
  if (candleHistory.length >= 5) {
    const lastCandles = candleHistory.slice(-5);
    logger.info(`üìä –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 —Å–≤–µ—á–µ–π:`);
    lastCandles.forEach((c, i) =>
      logger.info(
        `   ${i + 1}. ${new Date(
          c.timestamp
        ).toLocaleString()} - V=${c.volume.toFixed(2)} ${
          c.isGreen ? "üü¢" : "üî¥"
        }`
      )
    );
    logger.info(`   –ü–æ—Ä–æ–≥ –æ–±—ä–µ–º–∞: ${volumeThreshold}`);

    for (let i = 0; i < lastCandles.length - 1; i++) {
      const curr = lastCandles[i];
      const prev = i > 0 ? lastCandles[i - 1] : null;
      if (
        curr.volume > volumeThreshold &&
        (!prev || curr.volume > prev.volume)
      ) {
        logger.info(
          `üéØ –ù–ê–ô–î–ï–ù –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–ô –°–ò–ì–ù–ê–õ: ${new Date(
            curr.timestamp
          ).toLocaleString()} - V=${curr.volume.toFixed(2)}`
        );
        const nextCandles = lastCandles.slice(i + 1);
        const confirming = nextCandles.find(c => c.volume < curr.volume);
        if (confirming) {
          logger.info(
            `‚úÖ –ù–ê–ô–î–ï–ù–û –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï: ${new Date(
              confirming.timestamp
            ).toLocaleString()}, V=${confirming.volume.toFixed(
              2
            )} < ${curr.volume.toFixed(2)}`
          );
          // –ù–∞ —Å—Ç–∞—Ä—Ç–µ –≤—Ö–æ–¥ –ø–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–º—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ–º
          logger.info(
            "‚è≠ –ü—Ä–æ–ø—É—Å–∫ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ; –∂–¥–µ–º –æ–Ω–ª–∞–π–Ω-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
          );
          continue;
          /* –õ–û–ì–ò –ò –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–ô –í–•–û–î –û–¢–ö–õ–Æ–ß–ï–ù–´ –ü–†–ò –°–¢–ê–†–¢–ï
          // –õ–æ–≥–∏—Ä—É–µ–º –∫–ª–∞—Å—Ç–µ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ OI –∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ
          try {
            if (prev) {
              const clusterAnalysis = await analysisService.analyzeVolumeClusters(
                curr,
                prev
              );
              const upperPercent = (
                (clusterAnalysis.upperClusterVolume / curr.volume) *
                100
              ).toFixed(1);
              const middlePercent = (
                (clusterAnalysis.middleClusterVolume / curr.volume) *
                100
              ).toFixed(1);
              const lowerPercent = (
                (clusterAnalysis.lowerClusterVolume / curr.volume) *
                100
              ).toFixed(1);
              logger.info(
                `\nüìä –ö–õ–ê–°–¢–ï–†–´: –í–µ—Ä—Ö=${upperPercent}% | –°—Ä–µ–¥=${middlePercent}% | –ù–∏–∑=${lowerPercent}% | –ó–æ–Ω–∞=${clusterAnalysis.dominantZone}`
              );
              try {
                const oiZones = await analysisService.analyzeOpenInterestZones(
                  curr
                );
                if (oiZones) {
                  const topVolZone =
                    clusterAnalysis.upperClusterVolume >=
                    clusterAnalysis.lowerClusterVolume
                      ? "upper"
                      : "lower";
                  const zoneDelta =
                    topVolZone === "upper"
                      ? oiZones.upperDelta
                      : oiZones.lowerDelta;
                  const oiTrend = zoneDelta >= 0 ? "—Ä–æ—Å—Ç" : "–ø–∞–¥–µ–Ω–∏–µ";
                  const sideByOi =
                    topVolZone === "lower"
                      ? zoneDelta < 0
                        ? "–õ–û–ù–ì"
                        : "–®–û–†–¢"
                      : zoneDelta < 0
                      ? "–®–û–†–¢"
                      : "–õ–û–ù–ì";
                  logger.info(
                    `üìà OI(5–º/—á–∞—Å): low=${oiZones.lowerDelta.toFixed(
                      2
                    )} | mid=${oiZones.middleDelta.toFixed(
                      2
                    )} | up=${oiZones.upperDelta.toFixed(
                      2
                    )} ‚Üí –∑–æ–Ω–∞=${topVolZone}, –≤ –∑–æ–Ω–µ ${oiTrend} ‚Üí ${sideByOi}`
                  );
                }
              } catch {}
            }
          } catch {}
          // –ï—Å–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∞—è —Å–≤–µ—á–∞ —É–∂–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏ ‚Äî –≤—Ö–æ–¥–∏–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ –µ—ë –∑–∞–∫—Ä—ã—Ç–∏—é
          try {
            if (!trackers.some(tr => tr.id === `${curr.timestamp}`)) {
              const signalCandle = curr;
              let side: Side = signalCandle.isGreen ? "Buy" : "Sell";
              try {
                if (prev) {
                  const clusterAnalysis = await analysisService.analyzeVolumeClusters(
                    signalCandle,
                    prev
                  );
                  try {
                    const oiZones = await analysisService.analyzeOpenInterestZones(
                      signalCandle
                    );
                    if (oiZones) {
                      const comparedZone =
                        clusterAnalysis.upperClusterVolume >=
                        clusterAnalysis.lowerClusterVolume
                          ? "upper"
                          : "lower";
                      const zoneDelta =
                        comparedZone === "upper"
                          ? oiZones.upperDelta
                          : oiZones.lowerDelta;
                      side =
                        comparedZone === "lower"
                          ? zoneDelta < 0
                            ? "Buy"
                            : "Sell"
                          : zoneDelta < 0
                          ? "Sell"
                          : "Buy";
                    }
                  } catch {}
                }
              } catch {}

              const entry = confirming.close;
              logger.info(
                `   üí° –ò—Å—Ç–æ—á–Ω–∏–∫ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ (–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ): close –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–π —Å–≤–µ—á–∏ ${new Date(
                  confirming.timestamp
                ).toLocaleString()} = ${entry.toFixed(3)}`
              );
              const { tp, sl } = calcTpSl(
                entry,
                side,
                takeProfitPoints,
                stopLossPoints
              );
              const qty = notionalUsd / entry;

              const tracker: ActiveTracker = {
                id: `${signalCandle.timestamp}`,
                side,
                entryPrice: entry,
                tpPrice: tp,
                slPrice: sl,
                notionalUsd,
                quantityAsset: qty,
                createdAt: Date.now(),
                resolved: false
              };
              trackers.push(tracker);

              // –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–∫–ª–∞—Å—Ç–µ—Ä—ã –∏ OI) –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
              let clusterInfo = "";
              let oiInfo = "";
              try {
                const clusterAnalysis = await analysisService.analyzeVolumeClusters(
                  signalCandle,
                  prev as Candle
                );
                const upperPercentMsg = (
                  (clusterAnalysis.upperClusterVolume / signalCandle.volume) *
                  100
                ).toFixed(1);
                const middlePercentMsg = (
                  (clusterAnalysis.middleClusterVolume / signalCandle.volume) *
                  100
                ).toFixed(1);
                const lowerPercentMsg = (
                  (clusterAnalysis.lowerClusterVolume / signalCandle.volume) *
                  100
                ).toFixed(1);
                clusterInfo = `\nüìä –ö–õ–ê–°–¢–ï–†–´: –í–µ—Ä—Ö ${upperPercentMsg}% | –°—Ä–µ–¥ ${middlePercentMsg}% | –ù–∏–∑ ${lowerPercentMsg}%`;
                try {
                  const oiZones = await analysisService.analyzeOpenInterestZones(
                    signalCandle
                  );
                  if (oiZones) {
                    const comparedZone =
                      clusterAnalysis.upperClusterVolume >=
                      clusterAnalysis.lowerClusterVolume
                        ? "upper"
                        : "lower";
                    const zoneDelta =
                      comparedZone === "upper"
                        ? oiZones.upperDelta
                        : oiZones.lowerDelta;
                    const oiTrend = zoneDelta >= 0 ? "—Ä–æ—Å—Ç" : "–ø–∞–¥–µ–Ω–∏–µ";
                    oiInfo = `\nüìà OI(5–º/—á–∞—Å): low=${oiZones.lowerDelta.toFixed(
                      2
                    )} | mid=${oiZones.middleDelta.toFixed(
                      2
                    )} | up=${oiZones.upperDelta.toFixed(
                      2
                    )} ‚Üí –∑–æ–Ω–∞=${comparedZone}, –≤ –∑–æ–Ω–µ ${oiTrend}`;
                  }
                } catch {}
              } catch {}

              await telegram.sendMessage(
                formatSignalMessage({
                  symbol,
                  side,
                  entry,
                  tp,
                  sl,
                  baseCapitalUsd,
                  leverage,
                  notionalUsd
                }) +
                  clusterInfo +
                  oiInfo
              );

              logger.info(
                `üéØ –°–∏–≥–Ω–∞–ª: ${side} @ ${entry.toFixed(3)} | TP ${tp.toFixed(
                  3
                )} | SL ${sl.toFixed(3)} | notional $${notionalUsd}`
              );

              // –°–∏–≥–Ω–∞–ª –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω
              currentSignal = null;
            }
          } catch (e) {
            logger.warn(
              "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª –ø–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–º—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é",
              e
            );
          }
        */
        } else {
          logger.info(
            "‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –∂–¥–µ–º –≤–µ–±—Å–æ–∫–µ—Ç..."
          );
        }
      }
    }
  }

  // –°—Ç—Ä–∏–º —Å–¥–µ–ª–æ–∫ –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è TP/SL
  try {
    binance.startTradesWebSocket(symbol, trade => {
      const price = parseFloat(trade.price);
      if (!Number.isFinite(price)) return;
      latestTradePrice = price;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–∫–µ—Ä—ã –Ω–∞ –ø–µ—Ä–≤–æ–µ –∫–∞—Å–∞–Ω–∏–µ TP/SL
      for (const tr of trackers) {
        if (tr.resolved) continue;

        if (tr.side === "Buy") {
          if (price >= tr.tpPrice) {
            resolveTracker(tr, price, telegram);
          } else if (price <= tr.slPrice) {
            resolveTracker(tr, price, telegram);
          }
        } else {
          if (price <= tr.tpPrice) {
            resolveTracker(tr, price, telegram);
          } else if (price >= tr.slPrice) {
            resolveTracker(tr, price, telegram);
          }
        }
      }
    });
  } catch (e) {
    logger.warn(
      "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ—Ç–æ–∫ —Å–¥–µ–ª–æ–∫, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ TP/SL –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Ç–æ—á–Ω—ã–º",
      e
    );
  }

  // WebSocket —Å–≤–µ—á–µ–π (15m), –¥–µ—Ç–µ–∫—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  await binance.startWebSocket(
    symbol,
    async (candle: Candle) => {
      try {
        if (!candle.confirmed) return;

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–µ—á—É –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
        candleHistory.push(candle);
        if (candleHistory.length > 6) candleHistory = candleHistory.slice(-6);

        const prev = findPreviousConfirmed(candleHistory, candle.timestamp);
        if (!prev) return;

        // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª—å–Ω—ã–π –±–∞—Ä ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–∞ –°–õ–ï–î–£–Æ–©–ï–ô —Å–≤–µ—á–µ
        if (currentSignal) {
          const expectedTs = currentSignal.expectedConfirmTs;
          if (candle.timestamp > expectedTs) {
            logger.warn(
              `‚åõ –°–∏–≥–Ω–∞–ª –ø—Ä–æ—Ç—É—Ö: –æ–∂–∏–¥–∞–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ ${new Date(
                expectedTs
              ).toLocaleTimeString()}, –ø—Ä–∏—à–ª–∞ –±–æ–ª–µ–µ –ø–æ–∑–¥–Ω—è—è —Å–≤–µ—á–∞ ${new Date(
                candle.timestamp
              ).toLocaleTimeString()}`
            );
            currentSignal = null;
          } else if (
            candle.timestamp === expectedTs &&
            candle.volume < currentSignal.candle.volume
          ) {
            // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ ‚Äî —Ñ–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–µ–º —Ç—Ä–µ–∫–µ—Ä
            const signalCandle = currentSignal.candle;
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 1-–≤-1 –ø–æ –ª–æ–≥–∏–∫–µ TradingLogicService (–∫–ª–∞—Å—Ç–µ—Ä—ã + OI)
            let side: Side = signalCandle.isGreen ? "Buy" : "Sell";
            try {
              const clusterAnalysis = await analysisService.analyzeVolumeClusters(
                signalCandle,
                prev as Candle,
                15 * 60 * 1000
              );
              try {
                const oiZones = await analysisService.analyzeOpenInterestZones(
                  signalCandle,
                  15 * 60 * 1000
                );
                if (oiZones != null) {
                  const comparedZone =
                    clusterAnalysis.upperClusterVolume >=
                    clusterAnalysis.lowerClusterVolume
                      ? "upper"
                      : "lower";
                  const zoneDelta =
                    comparedZone === "upper"
                      ? oiZones.upperDelta
                      : oiZones.lowerDelta;
                  side =
                    comparedZone === "lower"
                      ? zoneDelta < 0
                        ? "Buy"
                        : "Sell"
                      : zoneDelta < 0
                      ? "Sell"
                      : "Buy";
                }
              } catch (e) {
                // –ï—Å–ª–∏ OI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –æ—Å—Ç–∞–µ–º—Å—è –Ω–∞ –±–∞–∑–æ–≤–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ —Ü–≤–µ—Ç—É —Å–≤–µ—á–∏
              }
            } catch (e) {
              // –ï—Å–ª–∏ –∫–ª–∞—Å—Ç–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã ‚Äî –æ—Å—Ç–∞–µ–º—Å—è –Ω–∞ –±–∞–∑–æ–≤–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ —Ü–≤–µ—Ç—É —Å–≤–µ—á–∏
            }

            const entry = candle.close;
            logger.info(
              `   üí° –ò—Å—Ç–æ—á–Ω–∏–∫ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞: close –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–π —Å–≤–µ—á–∏ ${new Date(
                candle.timestamp
              ).toLocaleString()} = ${entry.toFixed(3)}`
            );
            const { tp, sl } = calcTpSlFlexible(
              entry,
              side,
              signalCandle,
              candle,
              takeProfitPoints,
              stopLossPoints
            );
            const qty = notionalUsd / entry;

            const tracker: ActiveTracker = {
              id: `${signalCandle.timestamp}`,
              side,
              entryPrice: entry,
              tpPrice: tp,
              slPrice: sl,
              notionalUsd,
              quantityAsset: qty,
              createdAt: Date.now(),
              resolved: false
            };
            trackers.push(tracker);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –≤ Telegram
            // –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–∫–ª–∞—Å—Ç–µ—Ä—ã –∏ OI) –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            let clusterInfo = "";
            let oiInfo = "";
            try {
              const clusterAnalysis = await analysisService.analyzeVolumeClusters(
                signalCandle,
                prev as Candle,
                15 * 60 * 1000
              );
              const upperPercent = (
                (clusterAnalysis.upperClusterVolume / signalCandle.volume) *
                100
              ).toFixed(1);
              const middlePercent = (
                (clusterAnalysis.middleClusterVolume / signalCandle.volume) *
                100
              ).toFixed(1);
              const lowerPercent = (
                (clusterAnalysis.lowerClusterVolume / signalCandle.volume) *
                100
              ).toFixed(1);
              clusterInfo = `\nüìä –ö–õ–ê–°–¢–ï–†–´: –í–µ—Ä—Ö ${upperPercent}% | –°—Ä–µ–¥ ${middlePercent}% | –ù–∏–∑ ${lowerPercent}%`;
              try {
                const oiZones = await analysisService.analyzeOpenInterestZones(
                  signalCandle,
                  15 * 60 * 1000
                );
                if (oiZones != null) {
                  const comparedZone =
                    clusterAnalysis.upperClusterVolume >=
                    clusterAnalysis.lowerClusterVolume
                      ? "upper"
                      : "lower";
                  const zoneDelta =
                    comparedZone === "upper"
                      ? oiZones.upperDelta
                      : oiZones.lowerDelta;
                  const oiTrend = zoneDelta >= 0 ? "—Ä–æ—Å—Ç" : "–ø–∞–¥–µ–Ω–∏–µ";
                  oiInfo = `\nüìà OI(5–º/—á–∞—Å): low=${oiZones.lowerDelta.toFixed(
                    2
                  )} | mid=${oiZones.middleDelta.toFixed(
                    2
                  )} | up=${oiZones.upperDelta.toFixed(
                    2
                  )} ‚Üí –∑–æ–Ω–∞=${comparedZone}, –≤ –∑–æ–Ω–µ ${oiTrend}`;
                }
              } catch (e) {}
            } catch (e) {}

            // –î—É–±–ª–∏—Ä—É–µ–º —Å–≤–æ–¥–∫–∏ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –∏ OI –≤ –ª–æ–≥–∏
            if (clusterInfo) {
              logger.info(clusterInfo);
            }
            if (oiInfo) {
              logger.info(oiInfo);
            }

            await telegram.sendMessage(
              formatSignalMessage({
                symbol,
                side,
                entry,
                tp,
                sl,
                baseCapitalUsd,
                leverage,
                notionalUsd
              }) +
                clusterInfo +
                oiInfo
            );

            logger.info(
              `üéØ –°–∏–≥–Ω–∞–ª: ${side} @ ${entry.toFixed(3)} | TP ${tp.toFixed(
                3
              )} | SL ${sl.toFixed(3)} | notional $${notionalUsd}`
            );

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–∏–≥–Ω–∞–ª ‚Äî –æ–Ω –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω
            currentSignal = null;
            return;
          } else if (
            candle.timestamp === expectedTs &&
            candle.volume >= currentSignal.candle.volume
          ) {
            logger.info(
              `‚ùå –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å–≤–µ—á–µ (${new Date(
                candle.timestamp
              ).toLocaleTimeString()}), —Å–∏–≥–Ω–∞–ª –æ—Ç–º–µ–Ω–µ–Ω`
            );
            currentSignal = null;
          }
          // –ï—Å–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏—à–ª–æ ‚Äì –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å
        }

        // –ò–Ω–∞—á–µ –∏—â–µ–º –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª—å–Ω—ã–π –±–∞—Ä: –æ–±—ä–µ–º > –ø–æ—Ä–æ–≥–∞ –∏ > –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–≤–µ—á–∏
        if (candle.volume > volumeThreshold && candle.volume > prev.volume) {
          currentSignal = {
            candle,
            expectedConfirmTs: candle.timestamp + 15 * 60 * 1000
          };
          logger.info(
            `üì¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–∏–≥–Ω–∞–ª—å–Ω—ã–π –±–∞—Ä: ${new Date(
              candle.timestamp
            ).toLocaleString()} V=${candle.volume.toFixed(
              2
            )} (–ø–æ—Ä–æ–≥=${volumeThreshold}). –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ ${new Date(
              currentSignal.expectedConfirmTs
            ).toLocaleTimeString()}`
          );
        }
      } catch (error) {
        logger.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–≤–µ—á–µ–π —Å–∏–≥–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞:", error);
      }
    },
    "15m" as any
  );
}

function findPreviousConfirmed(history: Candle[], ts: number): Candle | null {
  for (let i = history.length - 2; i >= 0; i--) {
    if (history[i].timestamp < ts && history[i].confirmed) return history[i];
  }
  return null;
}

function calcTpSl(entry: number, side: Side, tpPts: number, slPts: number) {
  if (side === "Buy") {
    return { tp: entry + tpPts, sl: entry - slPts };
  }
  return { tp: entry - tpPts, sl: entry + slPts };
}

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π SL: –±–µ—Ä–µ–º –¥–∞–ª—å–Ω–∏–π —ç–∫—Å—Ç—Ä–µ–º—É–º –∏–∑ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–π —Å–≤–µ—á–µ–π + 0.5$ –±—É—Ñ–µ—Ä
function calcTpSlFlexible(
  entry: number,
  side: Side,
  signalCandle: Candle,
  confirmCandle: Candle,
  tpPts: number,
  buffer: number
) {
  const tp = side === "Buy" ? entry + tpPts : entry - tpPts;
  const highExtreme = Math.max(signalCandle.high, confirmCandle.high);
  const lowExtreme = Math.min(signalCandle.low, confirmCandle.low);
  const sl = side === "Buy" ? lowExtreme - buffer : highExtreme + buffer;
  return { tp, sl };
}

function resolveTracker(
  tr: ActiveTracker,
  exitPrice: number,
  telegram: TelegramService
) {
  if (tr.resolved) return;
  tr.resolved = true;

  const delta =
    tr.side === "Buy" ? exitPrice - tr.entryPrice : tr.entryPrice - exitPrice;
  const pnlUsd = delta * tr.quantityAsset; // –ª–∏–Ω–µ–π–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç USDT
  const result = pnlUsd >= 0 ? "‚úÖ TP" : "‚ùå SL";

  telegram
    .sendMessage(
      formatResolutionMessage({
        symbol: "SOLUSDT",
        side: tr.side,
        entry: tr.entryPrice,
        exit: exitPrice,
        delta,
        notionalUsd: tr.notionalUsd,
        qty: tr.quantityAsset,
        pnlUsd
      })
    )
    .catch(err =>
      logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–≥–Ω–∞–ª–∞ –≤ Telegram:", err)
    );

  logger.info(
    `${result} ${tr.side} | entry ${tr.entryPrice.toFixed(
      3
    )} ‚Üí exit ${exitPrice.toFixed(3)} | PnL $${pnlUsd.toFixed(2)}`
  );
}

function formatSignalMessage(args: {
  symbol: string;
  side: Side;
  entry: number;
  tp: number;
  sl: number;
  baseCapitalUsd: number;
  leverage: number;
  notionalUsd: number;
}): string {
  const dir = args.side === "Buy" ? "–õ–û–ù–ì" : "–®–û–†–¢";
  return (
    `üì¢ –°–ò–ì–ù–ê–õ (—Å–∏–º—É–ª—è—Ü–∏—è) ${args.symbol}\n\n` +
    `–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${dir}\n` +
    `–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: ${args.entry.toFixed(3)}\n` +
    `TP: ${args.tp.toFixed(3)} (+$1.0)\n` +
    `SL: ${args.sl.toFixed(3)} (-$0.5)\n\n` +
    `–ö–∞–ø–∏—Ç–∞–ª: $${args.baseCapitalUsd} | –ü–ª–µ—á–æ: ${args.leverage}x\n` +
    `–ù–æ—Ç–∏–æ–Ω–∞–ª: $${args.notionalUsd}`
  );
}

function formatResolutionMessage(args: {
  symbol: string;
  side: Side;
  entry: number;
  exit: number;
  delta: number;
  notionalUsd: number;
  qty: number;
  pnlUsd: number;
}): string {
  const dir = args.side === "Buy" ? "–õ–û–ù–ì" : "–®–û–†–¢";
  const outcome = args.pnlUsd >= 0 ? "‚úÖ TP" : "‚ùå SL";
  const sign = args.pnlUsd >= 0 ? "+" : "";
  return (
    `${outcome} ${args.symbol}\n\n` +
    `${dir}\n` +
    `–í—Ö–æ–¥: ${args.entry.toFixed(3)}\n` +
    `–í—ã—Ö–æ–¥: ${args.exit.toFixed(3)}\n` +
    `Œî: ${args.delta >= 0 ? "+" : ""}${args.delta.toFixed(3)}\n\n` +
    `–ù–æ—Ç–∏–æ–Ω–∞–ª: $${args.notionalUsd} | –ö–æ–ª-–≤–æ: ${args.qty.toFixed(4)}\n` +
    `–†–µ–∑—É–ª—å—Ç–∞—Ç: ${sign}$${args.pnlUsd.toFixed(2)}`
  );
}

main().catch(e => {
  logger.error("–°–∏–≥–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:", e);
  process.exit(1);
});
