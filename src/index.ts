import dotenv from "dotenv";
import { BinanceService } from "./services/binance";
import { TelegramService } from "./services/telegram";
import { logger } from "./utils/logger";
import {
  TradingLogicService,
  TradingLogicCallbacks,
  TradingLogicOptions
} from "./services/tradingLogicService";
import { CandleChartInterval } from "binance-api-node";
import { Candle } from "./services/binance.types";

dotenv.config();

const {
  BINANCE_API_KEY,
  BINANCE_API_SECRET,
  TELEGRAM_BOT_TOKEN,
  TELEGRAM_CHAT_ID,
  BINANCE_TESTNET,
  RISK_PERCENTAGE
} = process.env;

if (
  !BINANCE_API_KEY ||
  !BINANCE_API_SECRET ||
  !TELEGRAM_BOT_TOKEN ||
  !TELEGRAM_CHAT_ID
) {
  throw new Error("Missing required environment variables");
}

const riskPercentage = RISK_PERCENTAGE ? parseFloat(RISK_PERCENTAGE) : 95; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 95%

async function main() {
  try {
    const telegramService = new TelegramService(
      TELEGRAM_BOT_TOKEN as string,
      TELEGRAM_CHAT_ID as string
    );

    const handleTradeUpdate = async (message: string) => {
      try {
        await telegramService.sendMessage(message);
        logger.info("Message sent to Telegram");
      } catch (error) {
        logger.error("Failed to send message to Telegram:", {
          code: error.code,
          response: error.response?.body,
          stack: error.stack
        });
      }
      logger.info("Trade update notification sent via Telegram.");
    };

    const handleSignalUpdate = async (message: string) => {
      try {
        await telegramService.sendMessage(message);
        logger.info("Signal message sent to Telegram");
      } catch (error) {
        logger.error("Failed to send signal message to Telegram:", {
          code: error.code,
          response: error.response?.body,
          stack: error.stack
        });
      }
      logger.info("Signal update notification sent via Telegram.");
    };

    const binanceService = new BinanceService(
      BINANCE_API_KEY as string,
      BINANCE_API_SECRET as string,
      BINANCE_TESTNET === "true"
    );

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    const availableBalance = await binanceService.getUSDTBalance();
    if (availableBalance <= 0) {
      logger.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏.");
      return;
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ % –æ—Ç –±–∞–ª–∞–Ω—Å–∞
    const leverageValue = 6; // –ü–ª–µ—á–æ
    const tradeSizeUsd =
      availableBalance * (riskPercentage / 100) * leverageValue;

    logger.info(
      `üìä –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏: ${availableBalance.toFixed(
        2
      )} USDT * ${riskPercentage}% * ${leverageValue}x –ø–ª–µ—á–æ = ${tradeSizeUsd.toFixed(
        2
      )} USDT`
    );

    const tradingLogicCallbacks: TradingLogicCallbacks = {
      onTradeOperation: handleTradeUpdate,
      onSignalDetected: handleSignalUpdate
    };

    // –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∞—à–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    const tradingOptions: TradingLogicOptions = {
      symbol: "SOLUSDT",
      tradeSizeUsd: tradeSizeUsd, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
      takeProfitPoints: 1.5,
      stopLossPoints: 1.5,
      trailingActivationPoints: 1,
      trailingDistance: 1.5,
      volumeThreshold: 100000, // –ù–æ–≤—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è Binance
      useTrailingStop: true,
      leverage: leverageValue // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ
    };

    const tradingLogicService = new TradingLogicService(
      binanceService.getClient(),
      new (require("./services/notificationService").NotificationService)(
        tradingOptions.symbol,
        tradingOptions.tradeSizeUsd,
        tradingOptions.stopLossPoints
      ),
      tradingLogicCallbacks,
      tradingOptions
    );

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–≤–∏–ª —Ç–æ—Ä–≥–æ–≤–ª–∏
    await tradingLogicService.initialize();

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /restart
    telegramService.setRestartCallback(async () => {
      logger.info("üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /restart");

      try {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await binanceService.disconnect();

        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        await new Promise(resolve => setTimeout(resolve, 2000));

        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        logger.info("üîç –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ...");
        const initialCandles = await binanceService.getHistoricalCandles(
          tradingOptions.symbol,
          "1h" as CandleChartInterval,
          5
        );

        await tradingLogicService.syncPositionState(initialCandles);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
        await tradingLogicService.finishInitialHistoryAnalysis();

        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º WebSocket
        binanceService.startWebSocket(
          tradingOptions.symbol,
          async (candle: Candle) => {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–≤–µ—á–µ–π
            if (candle.confirmed) {
              logger.info(
                `üìä WebSocket: ${new Date(
                  candle.timestamp
                ).toLocaleString()} - V=${candle.volume.toFixed(2)} ‚úÖ`
              );

              // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–µ—á—É –≤ –∏—Å—Ç–æ—Ä–∏—é
              const candleHistory = tradingLogicService.getCandleHistory();
              candleHistory.push(candle);

              // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 10 —Å–≤–µ—á–∞–º–∏
              if (candleHistory.length > 10) {
                candleHistory.shift();
              }

              // –ò—â–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–≤–µ—á—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
              let previousCandle = null;
              for (let i = candleHistory.length - 1; i >= 0; i--) {
                if (
                  candleHistory[i].timestamp < candle.timestamp &&
                  candleHistory[i].confirmed
                ) {
                  previousCandle = candleHistory[i];
                  break;
                }
              }

              if (previousCandle) {
                logger.info(
                  `üîç –í—ã–∑—ã–≤–∞–µ–º checkVolumeSpike: —Ç–µ–∫—É—â–∞—è=${new Date(
                    candle.timestamp
                  ).toLocaleString()}, –ø—Ä–µ–¥—ã–¥—É—â–∞—è=${new Date(
                    previousCandle.timestamp
                  ).toLocaleString()}`
                );
                await tradingLogicService.checkVolumeSpike(
                  candle,
                  previousCandle,
                  candleHistory
                );
              } else {
                logger.info(
                  `‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–≤–µ—á–µ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º checkVolumeSpike`
                );
              }
            } else {
              // –ù–ï –ª–æ–≥–∏—Ä—É–µ–º –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —Å–≤–µ—á–∏ (–∏–∑–±–µ–≥–∞–µ–º —Å–ø–∞–º–∞)
              // logger.info(
              //   `üìä WebSocket: ${new Date(
              //     candle.timestamp
              //   ).toLocaleString()} - V=${candle.volume.toFixed(2)} ‚è≥`
              // );
            }
          }
        );

        logger.info("‚úÖ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ");
      } catch (error) {
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:", error);
        throw error;
      }
    });

    logger.info("Bot starting...");

    // –ù–∞—á–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –ª–æ–≥–∏–∫–∏
    const initialCandles = await binanceService.getHistoricalCandles(
      tradingOptions.symbol,
      "1h" as CandleChartInterval,
      5 // –ù–∞–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π
    );
    await tradingLogicService.syncPositionState(initialCandles);

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
    logger.info("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤...");
    if (initialCandles.length >= 5) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–≤–µ—á–µ–π –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
      const lastCandles = initialCandles.slice(-5);

      logger.info(`üìä –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 —Å–≤–µ—á–µ–π:`);
      lastCandles.forEach((candle, index) => {
        logger.info(
          `   ${index + 1}. ${new Date(
            candle.timestamp
          ).toLocaleString()} - V=${candle.volume.toFixed(2)} ${
            candle.isGreen ? "üü¢" : "üî¥"
          }`
        );
      });
      logger.info(`   –ü–æ—Ä–æ–≥ –æ–±—ä–µ–º–∞: ${tradingOptions.volumeThreshold}`);

      // –ò—â–µ–º —Å–∏–≥–Ω–∞–ª—å–Ω—ã–µ —Å–≤–µ—á–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 4 —Å–≤–µ—á–∞—Ö (–∏—Å–∫–ª—é—á–∞—è —Å–∞–º—É—é –ø–æ—Å–ª–µ–¥–Ω—é—é)
      let foundSignal = false;
      const allSignals = []; // –ú–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤

      for (let i = 0; i < lastCandles.length - 1; i++) {
        const currentCandle = lastCandles[i];
        const previousCandle = i > 0 ? lastCandles[i - 1] : null;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è —Å–∏–≥–Ω–∞–ª–∞: –æ–±—ä–µ–º > –ø–æ—Ä–æ–≥–∞ –ò > –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–≤–µ—á–∏
        if (
          currentCandle.volume > tradingOptions.volumeThreshold &&
          (!previousCandle || currentCandle.volume > previousCandle.volume)
        ) {
          logger.info(
            `üéØ –ù–ê–ô–î–ï–ù –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–ô –°–ò–ì–ù–ê–õ: –°–≤–µ—á–∞ ${new Date(
              currentCandle.timestamp
            ).toLocaleString()} - V=${currentCandle.volume.toFixed(2)}`
          );
          // –ö–õ–ê–°–¢–ï–†–ù–´–ô –ê–ù–ê–õ–ò–ó –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–≤–µ—á–µ–π)
          if (previousCandle) {
            // –í—Å–µ–≥–¥–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞—Å—Ç–µ—Ä—ã –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            const clusterAnalysis = await tradingLogicService.analyzeVolumeClusters(
              currentCandle,
              previousCandle
            );

            // –ö–õ–ê–°–¢–ï–†–ù–´–ô –ê–ù–ê–õ–ò–ó: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ –ø–æ —Ç—Ä–µ—Ç—è–º
            const upperPercent = (
              (clusterAnalysis.upperClusterVolume / currentCandle.volume) *
              100
            ).toFixed(1);
            const middlePercent = (
              (clusterAnalysis.middleClusterVolume / currentCandle.volume) *
              100
            ).toFixed(1);
            const lowerPercent = (
              (clusterAnalysis.lowerClusterVolume / currentCandle.volume) *
              100
            ).toFixed(1);

            logger.info(
              `\nüìä –ö–õ–ê–°–¢–ï–†–´: –í–µ—Ä—Ö=${upperPercent}% | –°—Ä–µ–¥=${middlePercent}% | –ù–∏–∑=${lowerPercent}% | –ó–æ–Ω–∞=${clusterAnalysis.dominantZone}`
            );

            // –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó OI 5–º –∑–∞ —á–∞—Å —Å–∏–≥–Ω–∞–ª–∞ –∏ –≤—ã–≤–æ–¥ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ OI
            try {
              const oiZones = await tradingLogicService.analyzeOpenInterestZones(
                currentCandle
              );
              if (oiZones) {
                const topVolZone =
                  clusterAnalysis.upperClusterVolume >=
                  clusterAnalysis.lowerClusterVolume
                    ? "upper"
                    : "lower";
                const zoneDelta =
                  topVolZone === "upper"
                    ? oiZones.upperDelta
                    : oiZones.lowerDelta;
                const oiTrend = zoneDelta >= 0 ? "—Ä–æ—Å—Ç" : "–ø–∞–¥–µ–Ω–∏–µ";
                const sideByOi =
                  topVolZone === "lower"
                    ? zoneDelta < 0
                      ? "–õ–û–ù–ì"
                      : "–®–û–†–¢"
                    : zoneDelta < 0
                    ? "–®–û–†–¢"
                    : "–õ–û–ù–ì";

                logger.info(
                  `üìà OI(5–º/—á–∞—Å): low=${oiZones.lowerDelta.toFixed(
                    2
                  )} | mid=${oiZones.middleDelta.toFixed(
                    2
                  )} | up=${oiZones.upperDelta.toFixed(
                    2
                  )} ‚Üí –∑–æ–Ω–∞=${topVolZone}, –≤ –∑–æ–Ω–µ ${oiTrend} ‚Üí ${sideByOi}`
                );
              }
            } catch (e) {
              // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ OI –≤ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–º –∞–Ω–∞–ª–∏–∑–µ
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞
            const nextCandles = lastCandles.slice(i + 1);
            logger.info(
              `üîç –ò—â–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â—É—é —Å–≤–µ—á—É –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ ${new Date(
                currentCandle.timestamp
              ).toLocaleString()} (V=${currentCandle.volume.toFixed(2)})`
            );
            logger.info(
              `   üìä –°–ª–µ–¥—É—é—â–∏–µ —Å–≤–µ—á–∏: ${nextCandles
                .map(
                  c =>
                    `${new Date(
                      c.timestamp
                    ).toLocaleTimeString()} (V=${c.volume.toFixed(2)})`
                )
                .join(", ")}`
            );

            const confirmingCandle = nextCandles.find(
              c => c.volume < currentCandle.volume
            );

            if (confirmingCandle) {
              logger.info(
                `‚úÖ –ù–ê–ô–î–ï–ù–û –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∞—è —Å–≤–µ—á–∞ ${new Date(
                  confirmingCandle.timestamp
                ).toLocaleString()}, V=${confirmingCandle.volume.toFixed(
                  2
                )} < ${currentCandle.volume.toFixed(2)}`
              );

              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
              const confirmingIndex = lastCandles.findIndex(
                c => c.timestamp === confirmingCandle.timestamp
              );
              const entryIndex = confirmingIndex + 1; // –°–≤–µ—á–∞ –¥–ª—è –≤—Ö–æ–¥–∞ - —Å–ª–µ–¥—É—é—â–∞—è –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–π
              let canEnter = false;

              // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–µ—á—É –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–π –ø–æ —Ñ–ª–∞–≥—É confirmed
              if (entryIndex < lastCandles.length) {
                // –°–≤–µ—á–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–π –ï–°–¢–¨ –≤ –∏—Å—Ç–æ—Ä–∏–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—ë —Ñ–ª–∞–≥
                const entryCandle = lastCandles[entryIndex];
                if (!entryCandle.confirmed) {
                  // –°–≤–µ—á–∞ –ù–ï –∑–∞–∫—Ä—ã–ª–∞—Å—å (confirmed = false) - –ø—Ä–æ–≤–µ—Ä—è–µ–º 20-–º–∏–Ω—É—Ç–Ω–æ–µ –æ–∫–Ω–æ
                  const currentTime = Date.now();
                  const entryCandleStart = entryCandle.timestamp;
                  const timeInCandle = currentTime - entryCandleStart;
                  const ENTRY_WINDOW_MS = 20 * 60 * 1000; // 20 –º–∏–Ω—É—Ç

                  if (timeInCandle <= ENTRY_WINDOW_MS) {
                    logger.info(
                      `üéØ –ú–û–ñ–ù–û –í–•–û–î–ò–¢–¨: –°–≤–µ—á–∞ ${new Date(
                        entryCandleStart
                      ).toLocaleTimeString()} –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞, –ø—Ä–æ—à–ª–æ ${Math.round(
                        timeInCandle / (60 * 1000)
                      )} –º–∏–Ω (–ª–∏–º–∏—Ç: 20 –º–∏–Ω)`
                    );
                    canEnter = true;
                  } else {
                    logger.info(
                      `‚è∞ –û–ö–ù–û –í–•–û–î–ê –ó–ê–ö–†–´–¢–û: –ü—Ä–æ—à–ª–æ ${Math.round(
                        timeInCandle / (60 * 1000)
                      )} –º–∏–Ω –æ—Ç –Ω–∞—á–∞–ª–∞ —Å–≤–µ—á–∏ ${new Date(
                        entryCandleStart
                      ).toLocaleTimeString()} (–ª–∏–º–∏—Ç: 20 –º–∏–Ω)`
                    );
                    canEnter = false;
                  }
                } else {
                  logger.info(
                    "‚ö†Ô∏è –ú–û–ú–ï–ù–¢ –í–•–û–î–ê –ü–†–û–ü–£–©–ï–ù: –°–≤–µ—á–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–π —É–∂–µ –∑–∞–∫—Ä—ã–ª–∞—Å—å (confirmed=true)"
                  );
                }
              } else {
                // –°–≤–µ—á–∏ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–π –ù–ï–¢ –≤ –∏—Å—Ç–æ—Ä–∏–∏
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫—Ä—ã–ª–∞—Å—å –ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∞—è —Å–≤–µ—á–∞ –∏ 20-–º–∏–Ω—É—Ç–Ω–æ–µ –æ–∫–Ω–æ
                // –°—á–∏—Ç–∞–µ–º —Å–≤–µ—á—É –∑–∞–∫—Ä—ã—Ç–æ–π, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ —á–∞—Å–∞ —Å –µ—ë –Ω–∞—á–∞–ª–∞
                const timeSinceConfirmingStart =
                  Date.now() - confirmingCandle.timestamp;
                const isConfirmingClosed =
                  confirmingCandle.confirmed ||
                  timeSinceConfirmingStart > 60 * 60 * 1000; // 1 —á–∞—Å —Å –Ω–∞—á–∞–ª–∞ —Å–≤–µ—á–∏

                // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–π —Å–≤–µ—á–∏
                logger.info(`üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–î–¢–í–ï–†–ñ–î–ê–Æ–©–ï–ô –°–í–ï–ß–ò:`);
                logger.info(`   üìä confirmed: ${confirmingCandle.confirmed}`);
                logger.info(
                  `   ‚è∞ timeSinceConfirmingStart: ${Math.round(
                    timeSinceConfirmingStart / (60 * 1000)
                  )} –º–∏–Ω`
                );
                logger.info(`   ‚úÖ isConfirmingClosed: ${isConfirmingClosed}`);

                if (isConfirmingClosed) {
                  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å–≤–µ—á–∏
                  const nextCandleStart =
                    confirmingCandle.timestamp + 60 * 60 * 1000; // +1 —á–∞—Å
                  const currentTime = Date.now();
                  const timeInNextCandle = currentTime - nextCandleStart;
                  const ENTRY_WINDOW_MS = 20 * 60 * 1000; // 20 –º–∏–Ω—É—Ç

                  if (
                    timeInNextCandle >= 0 &&
                    timeInNextCandle <= ENTRY_WINDOW_MS
                  ) {
                    logger.info(
                      `üéØ –ú–û–ñ–ù–û –í–•–û–î–ò–¢–¨: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∞—è –∑–∞–∫—Ä—ã–ª–∞—Å—å, –≤ —Å–ª–µ–¥—É—é—â–µ–π —Å–≤–µ—á–µ –ø—Ä–æ—à–ª–æ ${Math.round(
                        timeInNextCandle / (60 * 1000)
                      )} –º–∏–Ω (–ª–∏–º–∏—Ç: 20 –º–∏–Ω)`
                    );
                    canEnter = true;
                  } else if (timeInNextCandle < 0) {
                    logger.info(
                      "‚è≥ –ü–û–î–¢–í–ï–†–ñ–î–ê–Æ–©–ê–Ø –ó–ê–ö–†–´–õ–ê–°–¨, –ù–û –°–õ–ï–î–£–Æ–©–ê–Ø –°–í–ï–ß–ê –ï–©–ï –ù–ï –ù–ê–ß–ê–õ–ê–°–¨ - –ñ–î–ï–ú!"
                    );
                    canEnter = false;
                  } else {
                    logger.info(
                      `‚è∞ –û–ö–ù–û –í–•–û–î–ê –ó–ê–ö–†–´–¢–û: –í —Å–ª–µ–¥—É—é—â–µ–π —Å–≤–µ—á–µ –ø—Ä–æ—à–ª–æ ${Math.round(
                        timeInNextCandle / (60 * 1000)
                      )} –º–∏–Ω (–ª–∏–º–∏—Ç: 20 –º–∏–Ω)`
                    );
                    canEnter = false;
                  }
                } else {
                  logger.info(
                    "‚è≥ –ü–û–î–¢–í–ï–†–ñ–î–ê–Æ–©–ê–Ø –°–í–ï–ß–ê –ï–©–ï –ù–ï –ó–ê–ö–†–´–õ–ê–°–¨ - –ñ–î–ï–ú –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò!"
                  );
                  canEnter = false;
                }
              }

              // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –≤ –º–∞—Å—Å–∏–≤
              allSignals.push({
                candle: currentCandle,
                confirmingCandle: confirmingCandle,
                canEnter: canEnter,
                isActive: true // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã –∞–∫—Ç–∏–≤–Ω—ã
              });

              logger.info(
                `üíæ –î–æ–±–∞–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª: ${new Date(
                  currentCandle.timestamp
                ).toLocaleString()}, V=${currentCandle.volume.toFixed(2)} (${
                  currentCandle.isGreen ? "üî¥ –®–û–†–¢" : "üü¢ –õ–û–ù–ì"
                }), –º–æ–∂–Ω–æ –≤—Ö–æ–¥–∏—Ç—å: ${canEnter ? "‚úÖ" : "‚ùå"}`
              );
            } else {
              logger.info(
                "‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –∂–¥–µ–º –Ω–æ–≤—ã–µ —Å–≤–µ—á–∏..."
              );
            }

            foundSignal = true;
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∞–º—ã–π –º–æ—â–Ω—ã–π —Å–∏–≥–Ω–∞–ª
          } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–≤–µ—á–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
            logger.info(
              `   üìä –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${
                currentCandle.isGreen ? "üî¥ –®–û–†–¢" : "üü¢ –õ–û–ù–ì"
              } (${currentCandle.isGreen ? "–∑–µ–ª–µ–Ω–∞—è —Å–≤–µ—á–∞" : "–∫—Ä–∞—Å–Ω–∞—è —Å–≤–µ—á–∞"})`
            );
          }
        }
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
      if (allSignals.length > 0) {
        logger.info(`üìä –ù–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: ${allSignals.length}`);

        // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Å–∏–≥–Ω–∞–ª—ã - –æ—Å—Ç–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º —Ç–æ–ª—å–∫–æ –ü–û–°–õ–ï–î–ù–ò–ô
        for (let i = 0; i < allSignals.length - 1; i++) {
          allSignals[i].isActive = false;
          logger.info(
            `‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Å—Ç–∞—Ä—ã–π —Å–∏–≥–Ω–∞–ª: ${new Date(
              allSignals[i].candle.timestamp
            ).toLocaleString()}`
          );
        }

        // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π (—Å–∞–º—ã–π —Å–≤–µ–∂–∏–π) —Å–∏–≥–Ω–∞–ª
        const lastSignal = allSignals[allSignals.length - 1];
        logger.info(
          `‚úÖ –ê–ö–¢–ò–í–ù–´–ô –°–ò–ì–ù–ê–õ: ${new Date(
            lastSignal.candle.timestamp
          ).toLocaleString()}, V=${lastSignal.candle.volume.toFixed(2)}`
        );
        // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –≤—ã—à–µ —á–µ—Ä–µ–∑ –∫–ª–∞—Å—Ç–µ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª
        tradingLogicService.setSignal({
          candle: lastSignal.candle,
          isActive: true,
          waitingForLowerVolume: true
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        if (lastSignal.canEnter) {
          logger.info("üöÄ –í–•–û–î–ò–ú –í –ü–û–ó–ò–¶–ò–Æ –ü–û –ü–û–°–õ–ï–î–ù–ï–ú–£ –°–ò–ì–ù–ê–õ–£!");
          await tradingLogicService.processCompletedCandle(
            lastSignal.confirmingCandle,
            initialCandles
          );
        } else {
          logger.info(
            "‚è≥ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤—Ö–æ–¥–∞, –∂–¥–µ–º –Ω–æ–≤—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏..."
          );
        }
      }

      if (!foundSignal) {
        logger.info("‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
      } else {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        const currentSignal = tradingLogicService.getCurrentSignal();
        if (currentSignal) {
          logger.info(
            `‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${new Date(
              currentSignal.candle.timestamp
            ).toLocaleString()}, V=${currentSignal.candle.volume.toFixed(2)}`
          );
        } else {
          logger.info("‚ö†Ô∏è –í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –±—ã–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏");
        }
      }
    }

    logger.info("Bot started successfully.");

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–µ—á—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏ –∏—Å—Ç–æ—Ä–∏—é —Å–≤–µ—á–µ–π
    let lastProcessedCandle = initialCandles[initialCandles.length - 1];
    let candleHistory = [...initialCandles]; // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–≤–µ—á–µ–π

    // –ü—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    await binanceService.startWebSocket(
      tradingOptions.symbol,
      async (candle: Candle) => {
        try {
          // –ü—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ WebSocket –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å–≤–µ—á–∏
          const timeSinceLastCandle =
            candle.timestamp - lastProcessedCandle.timestamp;
          const hourInMs = 60 * 60 * 1000;

          if (timeSinceLastCandle > hourInMs && candle.confirmed) {
            logger.warn(
              `‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø—Ä–æ–ø—É—Å–∫ —Å–≤–µ—á–µ–π –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${Math.floor(
                timeSinceLastCandle / hourInMs
              )} —á–∞—Å–æ–≤`
            );

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å–≤–µ—á–∏
            const missedCandles = await binanceService.getHistoricalCandles(
              tradingOptions.symbol,
              "1h" as CandleChartInterval,
              Math.min(50, Math.floor(timeSinceLastCandle / hourInMs) + 5)
            );

            if (missedCandles.length > 0) {
              // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –ø—Ä–æ–ø—É—â–µ–Ω–Ω—É—é —Å–≤–µ—á—É
              for (const missedCandle of missedCandles) {
                if (
                  missedCandle.timestamp > lastProcessedCandle.timestamp &&
                  missedCandle.timestamp <= candle.timestamp &&
                  missedCandle.confirmed
                ) {
                  logger.info(
                    `üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—É—é —Å–≤–µ—á—É: ${new Date(
                      missedCandle.timestamp
                    ).toLocaleString()}`
                  );

                  // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                  candleHistory.push(missedCandle);
                  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–º–∏ —Å–≤–µ—á–∞–º–∏
                  if (candleHistory.length > 5) {
                    candleHistory = candleHistory.slice(-5);
                  }

                  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—É—é —Å–≤–µ—á—É
                  const expectedPreviousTimestamp =
                    missedCandle.timestamp - 60 * 60 * 1000;
                  let previousCandle = null;

                  for (let i = candleHistory.length - 2; i >= 0; i--) {
                    if (
                      candleHistory[i].timestamp ===
                        expectedPreviousTimestamp &&
                      candleHistory[i].confirmed
                    ) {
                      previousCandle = candleHistory[i];
                      break;
                    }
                  }

                  if (previousCandle) {
                    await tradingLogicService.checkVolumeSpike(
                      missedCandle,
                      previousCandle,
                      candleHistory
                    );
                  }

                  lastProcessedCandle = missedCandle;
                }
              }

              logger.info(
                `‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${missedCandles.length} –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π`
              );
            }
          }
          // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —Å–≤–µ—á–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
          if (candle.confirmed) {
            logger.debug(
              `üîç –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è —Å–≤–µ—á–∞: ${new Date(
                candle.timestamp
              ).toLocaleString()}, lastProcessed: ${new Date(
                lastProcessedCandle.timestamp
              ).toLocaleString()}`
            );
          }

          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ (–∑–∞–∫—Ä—ã—Ç—ã–µ) —Å–≤–µ—á–∏
          if (
            candle.confirmed &&
            candle.timestamp >= lastProcessedCandle.timestamp
          ) {
            logger.info(
              `üïê –°–≤–µ—á–∞ –∑–∞–∫—Ä—ã—Ç–∞: ${new Date(
                candle.timestamp
              ).toLocaleString()}, V=${candle.volume.toFixed(2)}`
            );

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–≤–µ—á–µ–π
            logger.info(
              `üîç –ü–†–û–í–ï–†–Ø–ï–ú –°–ò–ì–ù–ê–õ–´: candleHistory.length = ${candleHistory.length}`
            );
            if (candleHistory.length > 0) {
              // –°—Ç—Ä–æ–≥–æ –∏—â–µ–º —Å–≤–µ—á—É t-1h; –µ—Å–ª–∏ –Ω–µ—Ç –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ ‚Äî –ø–æ–¥—Ç—è–Ω–µ–º —á–µ—Ä–µ–∑ REST
              const expectedPreviousTimestamp =
                candle.timestamp - 60 * 60 * 1000; // -1 —á–∞—Å
              let previousCandle = candleHistory.find(
                c => c.timestamp === expectedPreviousTimestamp && c.confirmed
              );

              if (!previousCandle) {
                try {
                  const recent = await binanceService.getHistoricalCandles(
                    tradingOptions.symbol,
                    "1h" as CandleChartInterval,
                    10
                  );
                  previousCandle = recent.find(
                    c =>
                      c.timestamp === expectedPreviousTimestamp && c.confirmed
                  ) as any;
                  if (previousCandle) {
                    logger.info(
                      `üîÅ –ü–æ–¥–≥—Ä—É–∑–∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–≤–µ—á—É t-1h: ${new Date(
                        previousCandle.timestamp
                      ).toLocaleString()} (V=${previousCandle.volume.toFixed(
                        2
                      )})`
                    );
                  } else {
                    logger.warn(
                      `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–µ—á—É t-1h=${new Date(
                        expectedPreviousTimestamp
                      ).toLocaleString()} –Ω–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏, –Ω–∏ —á–µ—Ä–µ–∑ REST`
                    );
                  }
                } catch (e) {
                  logger.error(
                    "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–≤–µ—á–∏ —á–µ—Ä–µ–∑ REST:",
                    e
                  );
                }
              }

              if (previousCandle) {
                logger.info(
                  `üîç –í—ã–∑—ã–≤–∞–µ–º checkVolumeSpike: —Ç–µ–∫—É—â–∞—è=${new Date(
                    candle.timestamp
                  ).toLocaleString()}, –ø—Ä–µ–¥—ã–¥—É—â–∞—è=${new Date(
                    previousCandle.timestamp
                  ).toLocaleString()}`
                );
                await tradingLogicService.checkVolumeSpike(
                  candle,
                  previousCandle,
                  candleHistory
                );
              } else {
                logger.info(
                  `‚ö†Ô∏è –ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–≤–µ—á–∏ t-1h, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º checkVolumeSpike`
                );
                // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ candleHistory
                logger.info(`üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê candleHistory:`);
                for (let i = 0; i < candleHistory.length; i++) {
                  const c = candleHistory[i];
                  logger.info(
                    `   ${i}: ${new Date(
                      c.timestamp
                    ).toLocaleString()}, V=${c.volume.toFixed(2)}, confirmed=${
                      c.confirmed
                    }`
                  );
                }
              }
            } else {
              logger.info(
                `‚ö†Ô∏è candleHistory –ø—É—Å—Ç–æ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º checkVolumeSpike`
              );
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–∞ —Å–≤–µ—á–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–π –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
            const currentSignal = tradingLogicService.getCurrentSignal();
            const activePosition = tradingLogicService.getActivePosition();

            // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
            if (currentSignal) {
              logger.info(`üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ê–ö–¢–ò–í–ù–û–ì–û –°–ò–ì–ù–ê–õ–ê:`);
              logger.info(
                `   üìä waitingForLowerVolume: ${currentSignal.waitingForLowerVolume}`
              );
              logger.info(`   üìä candle.volume: ${candle.volume.toFixed(2)}`);
              logger.info(
                `   üìä currentSignal.candle.volume: ${currentSignal.candle.volume.toFixed(
                  2
                )}`
              );
              logger.info(
                `   üìä candle.timestamp > currentSignal.candle.timestamp: ${candle.timestamp >
                  currentSignal.candle.timestamp}`
              );
              logger.info(`   üìä !activePosition: ${!activePosition}`);
            }

            if (
              currentSignal &&
              currentSignal.waitingForLowerVolume &&
              candle.volume < currentSignal.candle.volume &&
              candle.timestamp > currentSignal.candle.timestamp &&
              !activePosition // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
            ) {
              // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–≤–∞—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∞—è —Å–≤–µ—á–∞
              const signalCandleIndex = candleHistory.findIndex(
                c => c.timestamp === currentSignal.candle.timestamp
              );
              const currentCandleIndex = candleHistory.findIndex(
                c => c.timestamp === candle.timestamp
              );

              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ–∂–¥—É —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –∏ —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–æ–π –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏—Ö
              let hasEarlierConfirmation = false;
              if (signalCandleIndex !== -1 && currentCandleIndex !== -1) {
                for (
                  let i = signalCandleIndex + 1;
                  i < currentCandleIndex;
                  i++
                ) {
                  const betweenCandle = candleHistory[i];
                  if (betweenCandle.volume < currentSignal.candle.volume) {
                    hasEarlierConfirmation = true;
                    logger.info(
                      `‚ö†Ô∏è –ü–†–û–ü–£–°–ö –í–•–û–î–ê: –£–∂–µ –±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∞—è —Å–≤–µ—á–∞ ${new Date(
                        betweenCandle.timestamp
                      ).toLocaleString()}, V=${betweenCandle.volume.toFixed(2)}`
                    );
                    break;
                  }
                }
              }

              if (!hasEarlierConfirmation) {
                logger.info(
                  `‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ê–Æ–©–ê–Ø –°–í–ï–ß–ê –ó–ê–ö–†–´–õ–ê–°–¨: V=${candle.volume.toFixed(
                    2
                  )} < ${currentSignal.candle.volume.toFixed(2)}`
                );
                // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ openPosition —á–µ—Ä–µ–∑ –∫–ª–∞—Å—Ç–µ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                logger.info(
                  "üöÄ –í–•–û–î–ò–ú –í –ü–û–ó–ò–¶–ò–Æ –°–†–ê–ó–£ –ü–û–°–õ–ï –ó–ê–ö–†–´–¢–ò–Ø –ü–û–î–¢–í–ï–†–ñ–î–ê–Æ–©–ï–ô!"
                );

                // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
                await tradingLogicService.processCompletedCandle(
                  candle,
                  [...candleHistory, candle] // –ü–µ—Ä–µ–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –í–ö–õ–Æ–ß–ê–Ø —Ç–µ–∫—É—â—É—é —Å–≤–µ—á—É
                );
                return; // –í—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å processCompletedCandle
              } else {
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Å–∏–≥–Ω–∞–ª
                logger.info("üîÑ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Å–∏–≥–Ω–∞–ª");
                tradingLogicService.clearSignal();
              }
            }

            // –£–±–∏—Ä–∞–µ–º —Ç–∞–π–º–∞—É—Ç - –æ–Ω –Ω–µ –Ω—É–∂–µ–Ω

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫—Ä—ã—Ç—É—é —Å–≤–µ—á—É
            await tradingLogicService.processCompletedCandle(
              candle,
              [...candleHistory, candle] // –ü–µ—Ä–µ–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –í–ö–õ–Æ–ß–ê–Ø —Ç–µ–∫—É—â—É—é —Å–≤–µ—á—É
            );

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π
            lastProcessedCandle = candle;
            candleHistory.push(candle);

            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 3 —Å–≤–µ—á–∞–º–∏
            if (candleHistory.length > 3) {
              candleHistory = candleHistory.slice(-3);
            }

            // –ü—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
          }
        } catch (error) {
          logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ WebSocket —Å–≤–µ—á–∏:", error);
        }
      }
    );

    // –¢—É—Ç –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤–µ—á–µ–π —á–µ—Ä–µ–∑ WebSocket,
    // –µ—Å–ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ binance-api-node —ç—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤ —É–¥–æ–±–Ω–æ–º –≤–∏–¥–µ,
    // –∏–ª–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–ø—Ä–∞—à–∏–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Å–≤–µ—á–∏ —á–µ—Ä–µ–∑ REST.

    process.on("SIGINT", async () => {
      logger.info("Shutting down...");
      binanceService.stopWebSocket();
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É graceful shutdown, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞
      process.exit(0);
    });

    process.on("uncaughtException", error => {
      logger.error("Uncaught Exception:", error);
      process.exit(1);
    });

    process.on("unhandledRejection", (reason, promise) => {
      logger.error("Unhandled Rejection at:", promise, "reason:", reason);
      process.exit(1);
    });
  } catch (error) {
    logger.error("Failed to start bot:", error);
    process.exit(1);
  }
}

main();
